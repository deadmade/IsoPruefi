<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="core_8h" kind="file" language="C++">
    <compoundname>core.h</compoundname>
    <includedby refid="core_8cpp" local="yes">src/core.cpp</includedby>
    <includedby refid="main_8cpp" local="yes">src/main.cpp</includedby>
    <invincdepgraph>
      <node id="1">
        <label>include/core.h</label>
        <link refid="core_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>src/core.cpp</label>
        <link refid="core_8cpp"/>
      </node>
      <node id="3">
        <label>src/main.cpp</label>
        <link refid="main_8cpp"/>
      </node>
    </invincdepgraph>
    <sectiondef kind="func">
      <memberdef kind="function" id="core_8h_1ab2663357b0b9fda0a3b6f6c4456daa12" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void CoreSetup</definition>
        <argsstring>()</argsstring>
        <name>CoreSetup</name>
        <briefdescription>
<para>Initializes all core system components and peripherals. </para>
        </briefdescription>
        <detaileddescription>
<para>This function performs comprehensive system initialization including:</para>
<para>**Network Setup:**<itemizedlist>
<listitem><para>Establishes WiFi connection with timeout handling</para>
</listitem><listitem><para>Configures MQTT client with unique sensor-based ID</para>
</listitem><listitem><para>Attempts initial MQTT broker connection</para>
</listitem></itemizedlist>
</para>
<para>**Hardware Initialization:**<itemizedlist>
<listitem><para>Initializes DS3231 real-time clock module</para>
</listitem><listitem><para>Adjusts RTC time if power was lost (uses compilation timestamp)</para>
</listitem><listitem><para>Sets up SD card with SPI communication</para>
</listitem><listitem><para>Initializes ADT7410 temperature sensor</para>
</listitem></itemizedlist>
</para>
<para>**Data Recovery:**<itemizedlist>
<listitem><para>Registers FAT file system timestamp callback</para>
</listitem></itemizedlist>
</para>
<para><simplesect kind="warning"><para>This function will halt program execution (infinite loop) if any critical component fails to initialize (RTC, SD card, or temperature sensor)</para>
</simplesect>
<simplesect kind="note"><para>The function uses compile-time constants for timeouts and configuration </para>
</simplesect>
<simplesect kind="see"><para><ref refid="core_8cpp_1a9b7578cbf8a2ac9a8a2ccb3fc5431791" kindref="member">WIFI_CONNECT_TIMEOUT_MS</ref>, <ref refid="core_8cpp_1a4ae62406649dce01eb479e7a476a4305" kindref="member">CLIENT_ID_BUFFER_SIZE</ref>, <ref refid="core_8cpp_1a4f1edbd0b6c65e5e7843bbda20bb24e2" kindref="member">SD_SCK_FREQUENCY_MHZ</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/core.h" line="3" column="6" bodyfile="src/core.cpp" bodystart="122" bodyend="162" declfile="include/core.h" declline="3" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="core_8h_1add0006ee50cb0bc41312da546591a02a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void CoreLoop</definition>
        <argsstring>()</argsstring>
        <name>CoreLoop</name>
        <briefdescription>
<para>Main operational loop for continuous sensor monitoring, MQTT transmission, and robust data recovery. </para>
        </briefdescription>
        <detaileddescription>
<para>This function implements the primary logic for the temperature monitoring system, including:<itemizedlist>
<listitem><para>Real-time sensor measurement and transmission via MQTT with QoS 1</para>
</listitem><listitem><para>Intelligent WiFi and MQTT connection management with automatic reconnection</para>
</listitem><listitem><para>Fallback to CSV batch storage during connectivity outages</para>
</listitem><listitem><para>Recovery and transmission of offline data after successful reconnection</para>
</listitem><listitem><para>Comprehensive error handling and status reporting</para>
</listitem></itemizedlist>
</para>
<para>**Operational Flow:** 1. Time Management: Reads current time from RTC, tracks minute changes to avoid duplicate measurements. 2. WiFi Connection: Monitors status, attempts reconnection, falls back to CSV logging if offline. 3. MQTT Connection: Verifies broker connectivity, reconnects as needed, falls back to CSV logging if offline. 4. Data Recovery: Sends pending CSV data after reconnection, ensures recovery only once per cycle. 5. Normal Operation: Measures temperature, transmits via MQTT, polls for incoming messages.</para>
<para>**Error Handling:**<itemizedlist>
<listitem><para>Network or broker failures trigger CSV fallback storage for all measurements.</para>
</listitem><listitem><para>Connection attempts are rate-limited to prevent resource exhaustion.</para>
</listitem><listitem><para>All measurement data is preserved and recovered after connectivity is restored.</para>
</listitem></itemizedlist>
</para>
<para><simplesect kind="note"><para>Maintains a fixed loop delay for consistent timing and system stability. </para>
</simplesect>
<simplesect kind="see"><para><ref refid="core_8cpp_1a6cef1bc6ccf08999da59db3b88095f7d" kindref="member">RECONNECT_INTERVAL_MS</ref>, <ref refid="core_8cpp_1aa9b3766a24a11a11d57c6ba9114d992b" kindref="member">LOOP_DELAY_MS</ref> for timing configuration </para>
</simplesect>
<simplesect kind="see"><para>saveToCsvBatch() for offline data storage </para>
</simplesect>
<simplesect kind="see"><para>sendPendingData() for data recovery and MQTT retransmission </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/core.h" line="4" column="6" bodyfile="src/core.cpp" bodystart="195" bodyend="262" declfile="include/core.h" declline="4" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="core_8h_1ad2926b332df58811bd7c1903d4f43201" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool IsWifiConnected</definition>
        <argsstring>()</argsstring>
        <name>IsWifiConnected</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/core.h" line="5" column="6" bodyfile="src/core.cpp" bodystart="62" bodyend="64" declfile="include/core.h" declline="5" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="core_8h_1a48f7d21be0a2e633ba6377e12e8dd8b9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool IsMqttConnected</definition>
        <argsstring>()</argsstring>
        <name>IsMqttConnected</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/core.h" line="6" column="6" bodyfile="src/core.cpp" bodystart="66" bodyend="68" declfile="include/core.h" declline="6" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="core_8h_1a3497f9bddce44ba60bc1629f84d93de5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void FatDateTime</definition>
        <argsstring>(uint16_t *date, uint16_t *time)</argsstring>
        <name>FatDateTime</name>
        <param>
          <type>uint16_t *</type>
          <declname>date</declname>
        </param>
        <param>
          <type>uint16_t *</type>
          <declname>time</declname>
        </param>
        <briefdescription>
<para>Callback function for FAT file system timestamp generation. </para>
        </briefdescription>
        <detaileddescription>
<para>This function is used by the SdFat library to obtain current date and time for file system operations. It retrieves the time from the RTC and converts it to the FAT file system format using the appropriate macros.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">date</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to store the encoded FAT date (year, month, day) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">time</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to store the encoded FAT time (hour, minute, second)</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>This function is registered as a callback with SdFile::dateTimeCallback() </para>
</simplesect>
<simplesect kind="see"><para>FAT_DATE, FAT_TIME macros for encoding format details </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/core.h" line="7" column="6" bodyfile="src/core.cpp" bodystart="87" bodyend="91" declfile="include/core.h" declline="7" declcolumn="6"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#pragma<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="core_8h_1ab2663357b0b9fda0a3b6f6c4456daa12" kindref="member">CoreSetup</ref>();</highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="core_8h_1add0006ee50cb0bc41312da546591a02a" kindref="member">CoreLoop</ref>();</highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="core_8h_1ad2926b332df58811bd7c1903d4f43201" kindref="member">IsWifiConnected</ref>();</highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="core_8h_1a48f7d21be0a2e633ba6377e12e8dd8b9" kindref="member">IsMqttConnected</ref>();</highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="core_8h_1a3497f9bddce44ba60bc1629f84d93de5" kindref="member">FatDateTime</ref>(uint16_t*<sp/>date,<sp/>uint16_t*<sp/>time);</highlight></codeline>
    </programlisting>
    <location file="include/core.h"/>
  </compounddef>
</doxygen>
