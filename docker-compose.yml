name: isopruefi-docker

networks:
  isopruefi-network:
    driver: bridge
  database-network:
  isopruefi-custom:
  loki:

services:
  traefik:
    image: traefik:3.4.4
    container_name: traefik
    restart: unless-stopped
    ports:
      - 80:80
      - 443:443
      - 8432:8080
    labels:
      - "traefik.enable=true"

      - "traefik.http.routers.traefik.tls=true"
      - "traefik.http.routers.traefik.entrypoints=websecure"
      - "traefik.http.routers.traefik.rule=Host(`traefik.localhost`)"
      - "traefik.http.services.dashboard.loadbalancer.server.port=8432"

      - "traefik.http.routers.dashboard.tls.domains[0].main=*.localhost"
      - "traefik.http.routers.dashboard.tls.domains[0].sans=*.localhost"

      -  "traefik.http.middlewares.traefik-https-redirect.redirectscheme.scheme = https"
      -  "traefik.http.middlewares.sslheader.headers.customrequestheaders.X-Forwarded-Proto = https"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
      - "./isopruefi-docker/traefik/traefik.yml:/traefik.yml:ro"
      - "./isopruefi-docker/traefik/conf:/conf:ro"
      - "./isopruefi-docker/traefik/certs/:/var/traefik/certs/:rw"
    networks:
      - isopruefi-network
      - database-network
      - loki
      - isopruefi-custom

  influxdb3:
    image: influxdb:3.2.1-core
    container_name: influxdb
    restart: unless-stopped
    ports:
      - 8181:8181
    command:
      - influxdb3
      - serve
      - --node-id=node0
      - --object-store=file
      - --data-dir=/var/lib/influxdb3/data
      - --plugin-dir=/var/lib/influxdb3/plugins
     # - "--token \"supersecrettoken\""
      #- "--org my-org"
      #- "--bucket my-bucket"
    volumes:
      - type: bind
        source: ./isopruefi-docker/influx/influxdb3/data
        # Path to store data in the container
        target: /var/lib/influxdb3/data
      - type: bind
        # Path to store plugins on your host system
        source: ./isopruefi-docker/influx/influxdb3/plugins
        # Path to store plugins in the container
        target: /var/lib/influxdb3/plugins
     # - ./influx/bootstrap.sh:/docker-entrypoint-initdb.d/bootstrap.sh:ro
    networks:
      - database-network

  influxdb-explorer:
    image: influxdata/influxdb3-ui:1.0.3
    container_name: influx-explorer
    restart: unless-stopped
    ports:
      - 8888:80
      - 8889:8888
    labels:
        - "traefik.enable=true"
        - "traefik.http.routers.explorer.rule=Host(`explorer.localhost`)"
        - "traefik.http.routers.explorer.entrypoints=websecure"
        - "traefik.http.routers.explorer.tls=true"
        - traefik.http.services.explorer.loadbalancer.server.port=80
    command:
      - "--mode=admin"
    volumes:
      - "./isopruefi-docker/influx/explorer/db:/db:rw"
      - "./isopruefi-docker/influx/explorer/config:/app-root/config:ro"
    networks:
      - isopruefi-custom
    depends_on:
      - influxdb3
      - traefik

  postgres:
    image: postgres:alpine3.21
    container_name: postgres
    restart: unless-stopped
    ports:
      - 5432:5432
    volumes:
      - ./isopruefi-docker/postgres:/var/lib/postgresql/data
    networks:
      - database-network
    environment:
      - POSTGRES_PASSWORD=secret
      - POSTGRES_USER=Isopruefi
      - POSTGRES_DB=Isopruefi

  loki:
    image: grafana/loki:3.5.2
    container_name: loki
    ports:
      - "3100:3100"
    command: -config.file=/etc/loki/local-config.yaml
    volumes:
     - ./isopruefi-docker/loki/loki-config.yaml:/etc/loki/local-config.yaml
    networks:
      - loki

  prometheus:
    image: prom/prometheus:v3.4.2
    container_name: prometheus
    command:
      - --web.enable-remote-write-receiver
      - --config.file=/etc/prometheus/prometheus.yml
    ports:
      - "9090:9090"

  alloy:
    image: grafana/alloy:v1.9.2
    container_name: alloy
    ports:
     - 12345:12345
     - 4317:4317
     - 4318:4318
    volumes:
      - ./isopruefi-docker/loki/config.alloy:/etc/alloy/config.alloy
      - /var/run/docker.sock:/var/run/docker.sock
    command: run --server.http.listen-addr=0.0.0.0:12345 --storage.path=/var/lib/alloy/data /etc/alloy/config.alloy
    networks:
      - loki
    depends_on:
      - loki
      - prometheus

  grafana:
    image: grafana/grafana:12.0.2
    container_name: grafana
    labels:
        - "traefik.enable=true"
        - "traefik.http.routers.grafana.rule=Host(`grafana.localhost`)"
        - "traefik.http.routers.grafana.entrypoints=websecure"
        - "traefik.http.routers.grafana.tls=true"
        - traefik.http.services.grafana.loadbalancer.server.port=3000
    environment:
     - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
     - GF_AUTH_ANONYMOUS_ENABLED=true
     - GF_AUTH_BASIC_ENABLED=false
     - GF_LOG_LEVEL=warn
    #ports:
    # - 3000:3000/tcp
    networks:
      - loki
    depends_on:
      - loki
      - alloy
    entrypoint:
      - sh
      - -euc
      - |
        mkdir -p /etc/grafana/provisioning/datasources
        cat <<EOF > /etc/grafana/provisioning/datasources/ds.yaml
        apiVersion: 1
        datasources:
        - name: Loki
          type: loki
          access: proxy
          orgId: 1
          url: http://loki:3100
          basicAuth: false
          isDefault: false
          version: 1
          editable: false
        - name: Prometheus
          type: prometheus
          orgId: 1
          url: http://prometheus:9090
          basicAuth: false
          isDefault: true
          version: 1
          editable: false
        EOF
        /run.sh
    
  isopruefi-frontend:
      build: ./isopruefi-frontend
      container_name: isopruefi-frontend
      labels:
        - "traefik.enable=true"
        - "traefik.http.routers.frontend.rule=Host(`frontend.localhost`)"
        - "traefik.http.routers.frontend.entrypoints=websecure"
        - "traefik.http.routers.frontend.tls=true"
        - traefik.http.services.frontend.loadbalancer.server.port=3000
      volumes:
        - ./isopruefi-frontend:/app
        - ./isopruefi-frontend/node_modules:/app/node_modules
      networks:
      - isopruefi-custom
      environment:
        - NODE_ENV=development
      stdin_open: true
      tty: true
      command: npm start

  isopruefi-backend-api:
      build: 
        context: ./isopruefi-backend/Rest-API
        dockerfile: Dockerfile-Dev
      container_name: isopruefi-backend-api
      labels:
        - "traefik.enable=true"
        - "traefik.http.routers.backend.rule=Host(`backend.localhost`)"
        - "traefik.http.routers.backend.entrypoints=websecure"
        - "traefik.http.routers.backend.tls=true"
        - traefik.http.services.backend.loadbalancer.server.port=8080
      volumes:
        - ./isopruefi-backend/Rest-API:/src/Rest-API
      networks:
      - isopruefi-custom
      environment: 
        - ASPNETCORE_ENVIRONMENT=Development
      command: ["dotnet", "watch", "run", "--urls=http://0.0.0.0:8080"]

  isopruefi-mqtt-receiver:
        build: 
          context: ./isopruefi-backend/MQTT-Receiver
          dockerfile: Dockerfile-Dev
        container_name: isopruefi-mqtt-receiver
        volumes:
          - ./isopruefi-backend/MQTT-Receiver:/src/Rest-API
        networks:
        - isopruefi-custom
        environment: 
          - ASPNETCORE_ENVIRONMENT=Development
        command: ["dotnet", "MQTT-Receiver.dll"]

    

