<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.13.2" xml:lang="en-US">
  <compounddef id="db/d72/mock__json_8h" kind="file" language="C++">
    <compoundname>mock_json.h</compoundname>
    <includes local="no">string</includes>
    <includes local="no">vector</includes>
    <includes local="no">map</includes>
    <incdepgraph>
      <node id="1">
        <label>include/mock_json.h</label>
        <link refid="db/d72/mock__json_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>map</label>
      </node>
      <node id="2">
        <label>string</label>
      </node>
      <node id="3">
        <label>vector</label>
      </node>
    </incdepgraph>
    <innerclass refid="db/d45/struct_mock_json_array" prot="public">MockJsonArray</innerclass>
    <innerclass refid="dc/dff/struct_mock_json_document" prot="public">MockJsonDocument</innerclass>
    <sectiondef kind="define">
      <memberdef kind="define" id="db/d72/mock__json_8h_1a54db1bfd55a2f11a001e5854071c899c" prot="public" static="no">
        <name>JsonDocument</name>
        <initializer><ref refid="dc/dff/struct_mock_json_document" kindref="compound">MockJsonDocument</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/mock_json.h" line="62" column="9" bodyfile="include/mock_json.h" bodystart="62" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="db/d72/mock__json_8h_1a23d227a500ab50420b35be152ef0a5e4" prot="public" static="no">
        <name>JsonArray</name>
        <initializer><ref refid="db/d45/struct_mock_json_array" kindref="compound">MockJsonArray</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/mock_json.h" line="63" column="9" bodyfile="include/mock_json.h" bodystart="63" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#pragma<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vector&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;map&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight></codeline>
<codeline lineno="6" refid="db/d45/struct_mock_json_array" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="db/d45/struct_mock_json_array" kindref="compound">MockJsonArray</ref><sp/>{</highlight></codeline>
<codeline lineno="7" refid="db/d45/struct_mock_json_array_1abf917a8e07e4ad39db9c8b4846751c58" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;std::string&gt;<sp/><ref refid="db/d45/struct_mock_json_array_1abf917a8e07e4ad39db9c8b4846751c58" kindref="member">values</ref>;</highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight></codeline>
<codeline lineno="9" refid="db/d45/struct_mock_json_array_1afbc04d4b35b6347ab7193ba9dcb65d4e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="db/d45/struct_mock_json_array_1afbc04d4b35b6347ab7193ba9dcb65d4e" kindref="member">add</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>value)<sp/>{</highlight></codeline>
<codeline lineno="10"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="db/d45/struct_mock_json_array_1abf917a8e07e4ad39db9c8b4846751c58" kindref="member">values</ref>.push_back(value);</highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight></codeline>
<codeline lineno="13" refid="db/d45/struct_mock_json_array_1aa9d88084e6cb19071e51695690e6cffe" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="db/d45/struct_mock_json_array_1aa9d88084e6cb19071e51695690e6cffe" kindref="member">add</ref>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>value)<sp/>{</highlight></codeline>
<codeline lineno="14"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="db/d45/struct_mock_json_array_1abf917a8e07e4ad39db9c8b4846751c58" kindref="member">values</ref>.push_back(std::to_string(value));</highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="17" refid="db/d45/struct_mock_json_array_1a78db22394b5aaae364e1512e83d5dfdc" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/><ref refid="db/d45/struct_mock_json_array_1a78db22394b5aaae364e1512e83d5dfdc" kindref="member">operator[]</ref>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="db/d45/struct_mock_json_array_1abf917a8e07e4ad39db9c8b4846751c58" kindref="member">values</ref>[i];</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="21" refid="db/d45/struct_mock_json_array_1afcc4a101a807a2f78d94f94fc47b0a8b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="db/d45/struct_mock_json_array_1afcc4a101a807a2f78d94f94fc47b0a8b" kindref="member">size</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="db/d45/struct_mock_json_array_1abf917a8e07e4ad39db9c8b4846751c58" kindref="member">values</ref>.size();</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight></codeline>
<codeline lineno="25" refid="db/d45/struct_mock_json_array_1aaf6c3a2f7c378baf7d8fab53ae7a46e4" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="db/d45/struct_mock_json_array_1aaf6c3a2f7c378baf7d8fab53ae7a46e4" kindref="member">clear</ref>()<sp/>{</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="db/d45/struct_mock_json_array_1abf917a8e07e4ad39db9c8b4846751c58" kindref="member">values</ref>.clear();</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="28"><highlight class="normal">};</highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="30" refid="dc/dff/struct_mock_json_document" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="dc/dff/struct_mock_json_document" kindref="compound">MockJsonDocument</ref><sp/>{</highlight></codeline>
<codeline lineno="31" refid="dc/dff/struct_mock_json_document_1a02d8a7c2d2b9ff56c08fbbbeb4bc4ad5" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>std::map&lt;std::string,<sp/>std::string&gt;<sp/><ref refid="dc/dff/struct_mock_json_document_1a02d8a7c2d2b9ff56c08fbbbeb4bc4ad5" kindref="member">primitives</ref>;</highlight></codeline>
<codeline lineno="32" refid="dc/dff/struct_mock_json_document_1ac6132a268d826cd6fd7e3b84fd995bb3" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>std::map&lt;std::string,<sp/>MockJsonArray&gt;<sp/><ref refid="dc/dff/struct_mock_json_document_1ac6132a268d826cd6fd7e3b84fd995bb3" kindref="member">arrays</ref>;</highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34" refid="dc/dff/struct_mock_json_document_1a54ef1b4c26afbad9cf5c250eed062631" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="dc/dff/struct_mock_json_document_1a54ef1b4c26afbad9cf5c250eed062631" kindref="member">clear</ref>()<sp/>{</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="dc/dff/struct_mock_json_document_1a02d8a7c2d2b9ff56c08fbbbeb4bc4ad5" kindref="member">primitives</ref>.clear();</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="dc/dff/struct_mock_json_document_1ac6132a268d826cd6fd7e3b84fd995bb3" kindref="member">arrays</ref>.clear();</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="39" refid="dc/dff/struct_mock_json_document_1a0696fac92492fabb9af79ac44a2e5b21" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string&amp;<sp/><ref refid="dc/dff/struct_mock_json_document_1a0696fac92492fabb9af79ac44a2e5b21" kindref="member">operator[]</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>key)<sp/>{</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="dc/dff/struct_mock_json_document_1a02d8a7c2d2b9ff56c08fbbbeb4bc4ad5" kindref="member">primitives</ref>[key];</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight></codeline>
<codeline lineno="43" refid="dc/dff/struct_mock_json_document_1a45b69917a5922afcd030de648201bc94" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/><ref refid="dc/dff/struct_mock_json_document_1a45b69917a5922afcd030de648201bc94" kindref="member">operator[]</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>key)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="dc/dff/struct_mock_json_document_1a02d8a7c2d2b9ff56c08fbbbeb4bc4ad5" kindref="member">primitives</ref>.at(key);</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight></codeline>
<codeline lineno="47" refid="dc/dff/struct_mock_json_document_1a89a2a652b12aea547d02b6440031912e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="db/d45/struct_mock_json_array" kindref="compound">MockJsonArray</ref>&amp;<sp/><ref refid="dc/dff/struct_mock_json_document_1a89a2a652b12aea547d02b6440031912e" kindref="member">createNestedArray</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>key)<sp/>{</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="dc/dff/struct_mock_json_document_1ac6132a268d826cd6fd7e3b84fd995bb3" kindref="member">arrays</ref>[key];</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight></codeline>
<codeline lineno="51" refid="dc/dff/struct_mock_json_document_1a2ea6d36047f732b3a3cd2da86c9f91b0" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="dc/dff/struct_mock_json_document_1a2ea6d36047f732b3a3cd2da86c9f91b0" kindref="member">containsKey</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>key)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="dc/dff/struct_mock_json_document_1a02d8a7c2d2b9ff56c08fbbbeb4bc4ad5" kindref="member">primitives</ref>.count(key)<sp/>&gt;<sp/>0<sp/>||<sp/><ref refid="dc/dff/struct_mock_json_document_1ac6132a268d826cd6fd7e3b84fd995bb3" kindref="member">arrays</ref>.count(key)<sp/>&gt;<sp/>0;</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight></codeline>
<codeline lineno="55" refid="dc/dff/struct_mock_json_document_1a176ae01e30f5fc396861b84f35733e7e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="dc/dff/struct_mock_json_document_1a176ae01e30f5fc396861b84f35733e7e" kindref="member">size</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>key)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>it<sp/>=<sp/><ref refid="dc/dff/struct_mock_json_document_1ac6132a268d826cd6fd7e3b84fd995bb3" kindref="member">arrays</ref>.find(key);</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(it<sp/>!=<sp/><ref refid="dc/dff/struct_mock_json_document_1ac6132a268d826cd6fd7e3b84fd995bb3" kindref="member">arrays</ref>.end())<sp/>?<sp/>it-&gt;second.size()<sp/>:<sp/>0;</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="59"><highlight class="normal">};</highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight><highlight class="comment">//<sp/>//<sp/>Redefine<sp/>JsonDocument<sp/>to<sp/>use<sp/>the<sp/>mock</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="62" refid="db/d72/mock__json_8h_1a54db1bfd55a2f11a001e5854071c899c" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>JsonDocument<sp/>MockJsonDocument</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="63" refid="db/d72/mock__json_8h_1a23d227a500ab50420b35be152ef0a5e4" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>JsonArray<sp/>MockJsonArray</highlight></codeline>
    </programlisting>
    <location file="include/mock_json.h"/>
  </compounddef>
</doxygen>
