<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.14.0" xml:lang="en-US">
  <compounddef id="dc/d8a/network_8cpp" kind="file" language="C++">
    <compoundname>network.cpp</compoundname>
    <includes refid="d9/d94/network_8h" local="yes">network.h</includes>
    <includes local="yes">secrets.h</includes>
    <includes refid="d7/d75/mqtt_8h" local="yes">mqtt.h</includes>
    <incdepgraph>
      <node id="8">
        <label>Adafruit_ADT7410.h</label>
      </node>
      <node id="4">
        <label>Arduino.h</label>
      </node>
      <node id="9">
        <label>ArduinoJson.h</label>
      </node>
      <node id="10">
        <label>ArduinoMqttClient.h</label>
      </node>
      <node id="12">
        <label>mqtt.h</label>
        <link refid="d7/d75/mqtt_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>network.h</label>
        <link refid="d9/d94/network_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>platform.h</label>
        <link refid="de/d03/platform_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>src/network.cpp</label>
        <link refid="dc/d8a/network_8cpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>RTClib.h</label>
      </node>
      <node id="6">
        <label>SdFat.h</label>
      </node>
      <node id="5">
        <label>Wire.h</label>
      </node>
      <node id="11">
        <label>secrets.h</label>
      </node>
    </incdepgraph>
    <sectiondef kind="var">
      <memberdef kind="variable" id="dc/d8a/network_8cpp_1a2961a3ee6daab3612c6258629032802d" prot="public" static="yes" mutable="no">
        <type>const char</type>
        <definition>const char ssid[]</definition>
        <argsstring>[]</argsstring>
        <name>ssid</name>
        <initializer>= <ref refid="db/df8/secrets__example_8h_1af44aa8face3356c1566d19fcad3e5f8b" kindref="member">SECRET_SSID</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/network.cpp" line="5" column="19" bodyfile="src/network.cpp" bodystart="5" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="dc/d8a/network_8cpp_1a6c857fc5b1917d65a997274053f7dfd6" prot="public" static="yes" mutable="no">
        <type>const char</type>
        <definition>const char password[]</definition>
        <argsstring>[]</argsstring>
        <name>password</name>
        <initializer>= <ref refid="db/df8/secrets__example_8h_1af9af3945a9a7c95d2d047a2183832d35" kindref="member">SECRET_PASS</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/network.cpp" line="6" column="19" bodyfile="src/network.cpp" bodystart="6" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="dc/d8a/network_8cpp_1abb3ec794643663d2561757adeef8622c" prot="public" static="yes" mutable="no">
        <type>const char *</type>
        <definition>const char* broker</definition>
        <argsstring></argsstring>
        <name>broker</name>
        <initializer>= &quot;aicon.dhbw-heidenheim.de&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/network.cpp" line="7" column="19" bodyfile="src/network.cpp" bodystart="7" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="dc/d8a/network_8cpp_1a0eb069d5f53d3e9269b0f321cfbcf108" prot="public" static="yes" mutable="no">
        <type>const int</type>
        <definition>const int port</definition>
        <argsstring></argsstring>
        <name>port</name>
        <initializer>= 1883</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/network.cpp" line="8" column="18" bodyfile="src/network.cpp" bodystart="8" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="func">
      <memberdef kind="function" id="dc/d8a/network_8cpp_1a7ceb85fc6879638e22b72beeafa4de5c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool connectWiFi</definition>
        <argsstring>(unsigned long timeoutMs)</argsstring>
        <name>connectWiFi</name>
        <param>
          <type>unsigned long</type>
          <declname>timeoutMs</declname>
        </param>
        <briefdescription>
<para>Establishes a WiFi connection with the configured network. </para>
        </briefdescription>
        <detaileddescription>
<para>Attempts to connect to the WiFi network using credentials from the secrets file. Provides visual feedback via serial output and enforces a connection timeout.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>timeoutMs</parametername>
</parameternamelist>
<parameterdescription>
<para>Maximum time in milliseconds to wait for connection (default: 10000ms). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if WiFi connection is successful, false if timeout occurs. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/network.cpp" line="19" column="6" bodyfile="src/network.cpp" bodystart="19" bodyend="35"/>
      </memberdef>
      <memberdef kind="function" id="dc/d8a/network_8cpp_1a2585db85dfee612787923f923e4d9b6d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool connectMQTT</definition>
        <argsstring>(MqttClient &amp;mqttClient, unsigned long timeoutMs)</argsstring>
        <name>connectMQTT</name>
        <param>
          <type>MqttClient &amp;</type>
          <declname>mqttClient</declname>
        </param>
        <param>
          <type>unsigned long</type>
          <declname>timeoutMs</declname>
        </param>
        <briefdescription>
<para>Establishes an authenticated MQTT connection to the broker. </para>
        </briefdescription>
        <detaileddescription>
<para>Sets up MQTT client credentials using values from the secrets file and attempts to connect to the configured MQTT broker. Provides visual feedback and enforces a connection timeout.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>mqttClient</parametername>
</parameternamelist>
<parameterdescription>
<para>Reference to the MQTT client instance to connect. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>timeoutMs</parametername>
</parameternamelist>
<parameterdescription>
<para>Maximum time in milliseconds to wait for connection (default: 10000ms). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if MQTT connection is successful, false if timeout occurs. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/network.cpp" line="48" column="6" bodyfile="src/network.cpp" bodystart="48" bodyend="66"/>
      </memberdef>
      <memberdef kind="function" id="dc/d8a/network_8cpp_1aec8befb6e49b85d32ece0496dfca569b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool isConnectedToServer</definition>
        <argsstring>(MqttClient &amp;mqttClient)</argsstring>
        <name>isConnectedToServer</name>
        <param>
          <type>MqttClient &amp;</type>
          <declname>mqttClient</declname>
        </param>
        <briefdescription>
<para>Checks if both WiFi and MQTT connections are active. </para>
        </briefdescription>
        <detaileddescription>
<para>Verifies the status of both WiFi and MQTT connections to ensure the device can communicate with the MQTT broker.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>mqttClient</parametername>
</parameternamelist>
<parameterdescription>
<para>Reference to the MQTT client instance to check. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if both WiFi and MQTT are connected, false otherwise. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/network.cpp" line="77" column="6" bodyfile="src/network.cpp" bodystart="77" bodyend="79"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&quot;<ref refid="d9/d94/network_8h" kindref="compound">network.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;secrets.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="d7/d75/mqtt_8h" kindref="compound">mqtt.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><ref refid="dc/d8a/network_8cpp_1a2961a3ee6daab3612c6258629032802d" kindref="member">ssid</ref>[]<sp/><sp/><sp/><sp/><sp/>=<sp/><ref refid="db/df8/secrets__example_8h_1af44aa8face3356c1566d19fcad3e5f8b" kindref="member">SECRET_SSID</ref>;</highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><ref refid="dc/d8a/network_8cpp_1a6c857fc5b1917d65a997274053f7dfd6" kindref="member">password</ref>[]<sp/>=<sp/><ref refid="db/df8/secrets__example_8h_1af9af3945a9a7c95d2d047a2183832d35" kindref="member">SECRET_PASS</ref>;</highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/><ref refid="dc/d8a/network_8cpp_1abb3ec794643663d2561757adeef8622c" kindref="member">broker</ref><sp/><sp/><sp/><sp/>=<sp/></highlight><highlight class="stringliteral">&quot;aicon.dhbw-heidenheim.de&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="dc/d8a/network_8cpp_1a0eb069d5f53d3e9269b0f321cfbcf108" kindref="member">port</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>1883;</highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="dc/d8a/network_8cpp_1a7ceb85fc6879638e22b72beeafa4de5c" kindref="member">connectWiFi</ref>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>timeoutMs)<sp/>{</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/>Serial.print(</highlight><highlight class="stringliteral">&quot;Connecting<sp/>to<sp/>WiFi...&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/>WiFi.begin(<ref refid="dc/d8a/network_8cpp_1a2961a3ee6daab3612c6258629032802d" kindref="member">ssid</ref>,<sp/><ref refid="dc/d8a/network_8cpp_1a6c857fc5b1917d65a997274053f7dfd6" kindref="member">password</ref>);</highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>startAttemptTime<sp/>=<sp/>millis();</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(WiFi.status()<sp/>!=<sp/>WL_CONNECTED)<sp/>{</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(millis()<sp/>-<sp/>startAttemptTime<sp/>&gt;=<sp/>timeoutMs)<sp/>{</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Serial.println(</highlight><highlight class="stringliteral">&quot;\nWiFi<sp/>connection<sp/>timed<sp/>out.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/>delay(500);</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/>Serial.print(</highlight><highlight class="stringliteral">&quot;.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/>Serial.println(</highlight><highlight class="stringliteral">&quot;\nWiFi<sp/>connected.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="35"><highlight class="normal">}</highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="dc/d8a/network_8cpp_1a2585db85dfee612787923f923e4d9b6d" kindref="member">connectMQTT</ref>(MqttClient&amp;<sp/><ref refid="da/de0/core_8cpp_1aa36be85ab02519b9969bf118f8647728" kindref="member">mqttClient</ref>,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>timeoutMs)<sp/>{</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/>Serial.print(</highlight><highlight class="stringliteral">&quot;Connecting<sp/>to<sp/>MQTT...&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><ref refid="da/de0/core_8cpp_1aa36be85ab02519b9969bf118f8647728" kindref="member">mqttClient</ref>.setUsernamePassword(<ref refid="db/df8/secrets__example_8h_1a6097c00d8fc3e3e37995bd7e410db99d" kindref="member">SECRET_MQTT_USER</ref>,<sp/><ref refid="db/df8/secrets__example_8h_1af4eaf35f12a6da3d6e6df6f1ca56b132" kindref="member">SECRET_MQTT_PASS</ref>);</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>startAttemptTime<sp/>=<sp/>millis();</highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(!<ref refid="da/de0/core_8cpp_1aa36be85ab02519b9969bf118f8647728" kindref="member">mqttClient</ref>.connect(<ref refid="dc/d8a/network_8cpp_1abb3ec794643663d2561757adeef8622c" kindref="member">broker</ref>,<sp/><ref refid="dc/d8a/network_8cpp_1a0eb069d5f53d3e9269b0f321cfbcf108" kindref="member">port</ref>))<sp/>{</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(millis()<sp/>-<sp/>startAttemptTime<sp/>&gt;=<sp/>timeoutMs)<sp/>{</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Serial.println(</highlight><highlight class="stringliteral">&quot;\nMQTT<sp/>connection<sp/>timed<sp/>out.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/>Serial.print(</highlight><highlight class="stringliteral">&quot;.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/>delay(1000);</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/>Serial.println(</highlight><highlight class="stringliteral">&quot;<sp/>connected.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="66"><highlight class="normal">}</highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="dc/d8a/network_8cpp_1aec8befb6e49b85d32ece0496dfca569b" kindref="member">isConnectedToServer</ref>(MqttClient&amp;<sp/><ref refid="da/de0/core_8cpp_1aa36be85ab02519b9969bf118f8647728" kindref="member">mqttClient</ref>)<sp/>{</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>WiFi.status()<sp/>==<sp/>WL_CONNECTED<sp/>&amp;&amp;<sp/><ref refid="da/de0/core_8cpp_1aa36be85ab02519b9969bf118f8647728" kindref="member">mqttClient</ref>.connected();</highlight></codeline>
<codeline lineno="79"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="src/network.cpp"/>
  </compounddef>
</doxygen>
