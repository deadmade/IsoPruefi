<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.14.0" xml:lang="en-US">
  <compounddef id="dc/dff/struct_mock_json_document" kind="struct" language="C++" prot="public">
    <compoundname>MockJsonDocument</compoundname>
    <includes refid="db/d72/mock__json_8h" local="no">mock_json.h</includes>
    <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="dc/dff/struct_mock_json_document_1a02d8a7c2d2b9ff56c08fbbbeb4bc4ad5" prot="public" static="no" mutable="no">
        <type>std::map&lt; std::string, std::string &gt;</type>
        <definition>std::map&lt;std::string, std::string&gt; MockJsonDocument::primitives</definition>
        <argsstring></argsstring>
        <name>primitives</name>
        <qualifiedname>MockJsonDocument::primitives</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/mock_json.h" line="31" column="14" bodyfile="include/mock_json.h" bodystart="31" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="dc/dff/struct_mock_json_document_1ac6132a268d826cd6fd7e3b84fd995bb3" prot="public" static="no" mutable="no">
        <type>std::map&lt; std::string, <ref refid="db/d45/struct_mock_json_array" kindref="compound">MockJsonArray</ref> &gt;</type>
        <definition>std::map&lt;std::string, MockJsonArray&gt; MockJsonDocument::arrays</definition>
        <argsstring></argsstring>
        <name>arrays</name>
        <qualifiedname>MockJsonDocument::arrays</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/mock_json.h" line="32" column="14" bodyfile="include/mock_json.h" bodystart="32" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="dc/dff/struct_mock_json_document_1a54ef1b4c26afbad9cf5c250eed062631" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void MockJsonDocument::clear</definition>
        <argsstring>()</argsstring>
        <name>clear</name>
        <qualifiedname>MockJsonDocument::clear</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/mock_json.h" line="34" column="10" bodyfile="include/mock_json.h" bodystart="34" bodyend="37"/>
      </memberdef>
      <memberdef kind="function" id="dc/dff/struct_mock_json_document_1a0696fac92492fabb9af79ac44a2e5b21" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::string &amp;</type>
        <definition>std::string &amp; MockJsonDocument::operator[]</definition>
        <argsstring>(const std::string &amp;key)</argsstring>
        <name>operator[]</name>
        <qualifiedname>MockJsonDocument::operator[]</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/mock_json.h" line="39" column="17" bodyfile="include/mock_json.h" bodystart="39" bodyend="41"/>
      </memberdef>
      <memberdef kind="function" id="dc/dff/struct_mock_json_document_1a45b69917a5922afcd030de648201bc94" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const std::string &amp;</type>
        <definition>const std::string &amp; MockJsonDocument::operator[]</definition>
        <argsstring>(const std::string &amp;key) const</argsstring>
        <name>operator[]</name>
        <qualifiedname>MockJsonDocument::operator[]</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/mock_json.h" line="43" column="23" bodyfile="include/mock_json.h" bodystart="43" bodyend="45"/>
      </memberdef>
      <memberdef kind="function" id="dc/dff/struct_mock_json_document_1a89a2a652b12aea547d02b6440031912e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="db/d45/struct_mock_json_array" kindref="compound">MockJsonArray</ref> &amp;</type>
        <definition>MockJsonArray &amp; MockJsonDocument::createNestedArray</definition>
        <argsstring>(const std::string &amp;key)</argsstring>
        <name>createNestedArray</name>
        <qualifiedname>MockJsonDocument::createNestedArray</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/mock_json.h" line="47" column="19" bodyfile="include/mock_json.h" bodystart="47" bodyend="49"/>
      </memberdef>
      <memberdef kind="function" id="dc/dff/struct_mock_json_document_1a2ea6d36047f732b3a3cd2da86c9f91b0" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool MockJsonDocument::containsKey</definition>
        <argsstring>(const std::string &amp;key) const</argsstring>
        <name>containsKey</name>
        <qualifiedname>MockJsonDocument::containsKey</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/mock_json.h" line="51" column="10" bodyfile="include/mock_json.h" bodystart="51" bodyend="53"/>
      </memberdef>
      <memberdef kind="function" id="dc/dff/struct_mock_json_document_1a176ae01e30f5fc396861b84f35733e7e" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t MockJsonDocument::size</definition>
        <argsstring>(const std::string &amp;key) const</argsstring>
        <name>size</name>
        <qualifiedname>MockJsonDocument::size</qualifiedname>
        <param>
          <type>const std::string &amp;</type>
          <declname>key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/mock_json.h" line="55" column="12" bodyfile="include/mock_json.h" bodystart="55" bodyend="58"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="include/mock_json.h" line="30" column="1" bodyfile="include/mock_json.h" bodystart="30" bodyend="59"/>
    <listofallmembers>
      <member refid="dc/dff/struct_mock_json_document_1ac6132a268d826cd6fd7e3b84fd995bb3" prot="public" virt="non-virtual"><scope>MockJsonDocument</scope><name>arrays</name></member>
      <member refid="dc/dff/struct_mock_json_document_1a54ef1b4c26afbad9cf5c250eed062631" prot="public" virt="non-virtual"><scope>MockJsonDocument</scope><name>clear</name></member>
      <member refid="dc/dff/struct_mock_json_document_1a2ea6d36047f732b3a3cd2da86c9f91b0" prot="public" virt="non-virtual"><scope>MockJsonDocument</scope><name>containsKey</name></member>
      <member refid="dc/dff/struct_mock_json_document_1a89a2a652b12aea547d02b6440031912e" prot="public" virt="non-virtual"><scope>MockJsonDocument</scope><name>createNestedArray</name></member>
      <member refid="dc/dff/struct_mock_json_document_1a0696fac92492fabb9af79ac44a2e5b21" prot="public" virt="non-virtual"><scope>MockJsonDocument</scope><name>operator[]</name></member>
      <member refid="dc/dff/struct_mock_json_document_1a45b69917a5922afcd030de648201bc94" prot="public" virt="non-virtual"><scope>MockJsonDocument</scope><name>operator[]</name></member>
      <member refid="dc/dff/struct_mock_json_document_1a02d8a7c2d2b9ff56c08fbbbeb4bc4ad5" prot="public" virt="non-virtual"><scope>MockJsonDocument</scope><name>primitives</name></member>
      <member refid="dc/dff/struct_mock_json_document_1a176ae01e30f5fc396861b84f35733e7e" prot="public" virt="non-virtual"><scope>MockJsonDocument</scope><name>size</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
