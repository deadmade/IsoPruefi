//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

export class AuthenticationClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : window as any;
        this.baseUrl = baseUrl ?? "";
    }

    /**
     * Die Login-Methode.
     * @param input Login-Daten√ºbertragungsobjekt.
     * @return JWT-Token bei erfolgreichem Login.
     */
    login(input: Login): Promise<FileResponse> {
        let url_ = this.baseUrl + "/v1/Authentication/Login";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/octet-stream"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processLogin(_response);
        });
    }

    protected processLogin(response: Response): Promise<FileResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            let fileNameMatch = contentDisposition ? /filename\*=(?:(\\?['"])(.*?)\1|(?:[^\s]+'.*?')?([^;\n]*))/g.exec(contentDisposition) : undefined;
            let fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[3] || fileNameMatch[2] : undefined;
            if (fileName) {
                fileName = decodeURIComponent(fileName);
            } else {
                fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
                fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            }
            return response.blob().then(blob => { return { fileName: fileName, data: blob, status: status, headers: _headers }; });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<FileResponse>(null as any);
    }

    /**
     * Registers a new user in the system.
     * @param input The registration data containing user credentials and information.
     * @return User registered successfully.
     */
    register(input: Register): Promise<FileResponse> {
        let url_ = this.baseUrl + "/v1/Authentication/Register";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/octet-stream"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processRegister(_response);
        });
    }

    protected processRegister(response: Response): Promise<FileResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            let fileNameMatch = contentDisposition ? /filename\*=(?:(\\?['"])(.*?)\1|(?:[^\s]+'.*?')?([^;\n]*))/g.exec(contentDisposition) : undefined;
            let fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[3] || fileNameMatch[2] : undefined;
            if (fileName) {
                fileName = decodeURIComponent(fileName);
            } else {
                fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
                fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            }
            return response.blob().then(blob => { return { fileName: fileName, data: blob, status: status, headers: _headers }; });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<FileResponse>(null as any);
    }

    /**
     * Handles the refresh token request. Validates the incoming JWT token and issues a new access token if valid.
     * @param token The JWT token containing the refresh token and access token.
     * @return Returns a new access token if the refresh is successful; otherwise, returns an error response.
     */
    refresh(token: JwtToken): Promise<FileResponse> {
        let url_ = this.baseUrl + "/v1/Authentication/Refresh";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(token);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/octet-stream"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processRefresh(_response);
        });
    }

    protected processRefresh(response: Response): Promise<FileResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            let fileNameMatch = contentDisposition ? /filename\*=(?:(\\?['"])(.*?)\1|(?:[^\s]+'.*?')?([^;\n]*))/g.exec(contentDisposition) : undefined;
            let fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[3] || fileNameMatch[2] : undefined;
            if (fileName) {
                fileName = decodeURIComponent(fileName);
            } else {
                fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
                fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            }
            return response.blob().then(blob => { return { fileName: fileName, data: blob, status: status, headers: _headers }; });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<FileResponse>(null as any);
    }
}

export class TemperatureDataClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : window as any;
        this.baseUrl = baseUrl ?? "";
    }

    /**
     * Gets temperature data for the specified time range and location, with optional Fahrenheit conversion.
     * @param start (optional) Start date and time for the data range.
     * @param end (optional) End date and time for the data range.
     * @param place (optional) Location for outside temperature data.
     * @param isFahrenheit (optional) If true, converts temperatures to Fahrenheit.
     * @return Temperature data overview.
     */
    getTemperature(start?: Date | undefined, end?: Date | undefined, place?: string | undefined, isFahrenheit?: boolean | undefined): Promise<TemperatureDataOverview> {
        let url_ = this.baseUrl + "/api/v1/TemperatureData/GetTemperature?";
        if (start === null)
            throw new Error("The parameter 'start' cannot be null.");
        else if (start !== undefined)
            url_ += "start=" + encodeURIComponent(start ? "" + start.toISOString() : "") + "&";
        if (end === null)
            throw new Error("The parameter 'end' cannot be null.");
        else if (end !== undefined)
            url_ += "end=" + encodeURIComponent(end ? "" + end.toISOString() : "") + "&";
        if (place === null)
            throw new Error("The parameter 'place' cannot be null.");
        else if (place !== undefined)
            url_ += "place=" + encodeURIComponent("" + place) + "&";
        if (isFahrenheit === null)
            throw new Error("The parameter 'isFahrenheit' cannot be null.");
        else if (isFahrenheit !== undefined)
            url_ += "isFahrenheit=" + encodeURIComponent("" + isFahrenheit) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetTemperature(_response);
        });
    }

    protected processGetTemperature(response: Response): Promise<TemperatureDataOverview> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = TemperatureDataOverview.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<TemperatureDataOverview>(null as any);
    }
}

export class TopicClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : window as any;
        this.baseUrl = baseUrl ?? "";
    }

    /**
     * Gets all available topic settings
     * @return A list of all topic settings
     */
    getAllTopics(): Promise<TopicSetting[]> {
        let url_ = this.baseUrl + "/api/v1/Topic/GetAllTopics";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetAllTopics(_response);
        });
    }

    protected processGetAllTopics(response: Response): Promise<TopicSetting[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(TopicSetting.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return result200;
            });
        } else if (status === 500) {
            return response.text().then((_responseText) => {
            return throwException("A server side error occurred.", status, _responseText, _headers);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<TopicSetting[]>(null as any);
    }

    /**
     * Creates a new topic setting
     * @param topicSetting The topic setting to create
     * @return The ID of the created topic setting
     */
    createTopic(topicSetting: TopicSetting): Promise<any> {
        let url_ = this.baseUrl + "/api/v1/Topic/CreateTopic";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(topicSetting);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processCreateTopic(_response);
        });
    }

    protected processCreateTopic(response: Response): Promise<any> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 201) {
            return response.text().then((_responseText) => {
            let result201: any = null;
            let resultData201 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result201 = resultData201 !== undefined ? resultData201 : <any>null;
    
            return result201;
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("A server side error occurred.", status, _responseText, _headers, result400);
            });
        } else if (status === 500) {
            return response.text().then((_responseText) => {
            return throwException("A server side error occurred.", status, _responseText, _headers);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<any>(null as any);
    }
}

export class UserInfoClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : window as any;
        this.baseUrl = baseUrl ?? "";
    }

    /**
     * Retrieves all users from the system.
     * @return A list of all users.
     */
    getAllUsers(): Promise<FileResponse> {
        let url_ = this.baseUrl + "/api/v1/UserInfo/GetAllUsers";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/octet-stream"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetAllUsers(_response);
        });
    }

    protected processGetAllUsers(response: Response): Promise<FileResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            let fileNameMatch = contentDisposition ? /filename\*=(?:(\\?['"])(.*?)\1|(?:[^\s]+'.*?')?([^;\n]*))/g.exec(contentDisposition) : undefined;
            let fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[3] || fileNameMatch[2] : undefined;
            if (fileName) {
                fileName = decodeURIComponent(fileName);
            } else {
                fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
                fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            }
            return response.blob().then(blob => { return { fileName: fileName, data: blob, status: status, headers: _headers }; });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<FileResponse>(null as any);
    }

    /**
     * Retrieves a user by their unique identifier.
     * @param userId (optional) The unique identifier of the user.
     * @return The user information if found; otherwise, NotFound.
     */
    getUserById(userId?: string | undefined): Promise<FileResponse> {
        let url_ = this.baseUrl + "/api/v1/UserInfo/GetUserById?";
        if (userId === null)
            throw new Error("The parameter 'userId' cannot be null.");
        else if (userId !== undefined)
            url_ += "userId=" + encodeURIComponent("" + userId) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/octet-stream"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetUserById(_response);
        });
    }

    protected processGetUserById(response: Response): Promise<FileResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            let fileNameMatch = contentDisposition ? /filename\*=(?:(\\?['"])(.*?)\1|(?:[^\s]+'.*?')?([^;\n]*))/g.exec(contentDisposition) : undefined;
            let fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[3] || fileNameMatch[2] : undefined;
            if (fileName) {
                fileName = decodeURIComponent(fileName);
            } else {
                fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
                fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            }
            return response.blob().then(blob => { return { fileName: fileName, data: blob, status: status, headers: _headers }; });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<FileResponse>(null as any);
    }

    /**
     * Changes the password for a user.
     * @param input The change password request containing user ID, current password, and new password.
     * @return Ok if successful; otherwise, an error response.
     */
    changePassword(input: ChangePassword): Promise<FileResponse> {
        let url_ = this.baseUrl + "/api/v1/UserInfo/ChangePassword";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/octet-stream"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processChangePassword(_response);
        });
    }

    protected processChangePassword(response: Response): Promise<FileResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            let fileNameMatch = contentDisposition ? /filename\*=(?:(\\?['"])(.*?)\1|(?:[^\s]+'.*?')?([^;\n]*))/g.exec(contentDisposition) : undefined;
            let fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[3] || fileNameMatch[2] : undefined;
            if (fileName) {
                fileName = decodeURIComponent(fileName);
            } else {
                fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
                fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            }
            return response.blob().then(blob => { return { fileName: fileName, data: blob, status: status, headers: _headers }; });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<FileResponse>(null as any);
    }

    /**
     * Updates user information.
     * @param user The user object with updated information.
     * @return Ok if successful; otherwise, an error response.
     */
    changeUser(user: ApiUser): Promise<FileResponse> {
        let url_ = this.baseUrl + "/api/v1/UserInfo/ChangeUser";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(user);

        let options_: RequestInit = {
            body: content_,
            method: "PUT",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/octet-stream"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processChangeUser(_response);
        });
    }

    protected processChangeUser(response: Response): Promise<FileResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            let fileNameMatch = contentDisposition ? /filename\*=(?:(\\?['"])(.*?)\1|(?:[^\s]+'.*?')?([^;\n]*))/g.exec(contentDisposition) : undefined;
            let fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[3] || fileNameMatch[2] : undefined;
            if (fileName) {
                fileName = decodeURIComponent(fileName);
            } else {
                fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
                fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            }
            return response.blob().then(blob => { return { fileName: fileName, data: blob, status: status, headers: _headers }; });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<FileResponse>(null as any);
    }

    /**
     * Deletes a user by their unique identifier.
     * @param userId (optional) The unique identifier of the user to delete.
     * @return Ok if successful; otherwise, an error response.
     */
    deleteUser(userId?: string | undefined): Promise<FileResponse> {
        let url_ = this.baseUrl + "/api/v1/UserInfo/DeleteUser?";
        if (userId === null)
            throw new Error("The parameter 'userId' cannot be null.");
        else if (userId !== undefined)
            url_ += "userId=" + encodeURIComponent("" + userId) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "DELETE",
            headers: {
                "Accept": "application/octet-stream"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processDeleteUser(_response);
        });
    }

    protected processDeleteUser(response: Response): Promise<FileResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            let fileNameMatch = contentDisposition ? /filename\*=(?:(\\?['"])(.*?)\1|(?:[^\s]+'.*?')?([^;\n]*))/g.exec(contentDisposition) : undefined;
            let fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[3] || fileNameMatch[2] : undefined;
            if (fileName) {
                fileName = decodeURIComponent(fileName);
            } else {
                fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
                fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            }
            return response.blob().then(blob => { return { fileName: fileName, data: blob, status: status, headers: _headers }; });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<FileResponse>(null as any);
    }
}

/** Represents the auth credentials for a user. */
export class Login implements ILogin {
    /** Gets or sets the username of the user. */
    userName!: string;
    /** Gets or sets the password of the user. */
    password!: string;

    constructor(data?: ILogin) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.userName = _data["userName"];
            this.password = _data["password"];
        }
    }

    static fromJS(data: any): Login {
        data = typeof data === 'object' ? data : {};
        let result = new Login();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["userName"] = this.userName;
        data["password"] = this.password;
        return data;
    }
}

/** Represents the auth credentials for a user. */
export interface ILogin {
    /** Gets or sets the username of the user. */
    userName: string;
    /** Gets or sets the password of the user. */
    password: string;
}

/** Represents the registration credentials for a new user. */
export class Register implements IRegister {
    /** Gets or sets the username for the new user. */
    userName!: string;
    /** Gets or sets the password for the new user. */
    password!: string;

    constructor(data?: IRegister) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.userName = _data["userName"];
            this.password = _data["password"];
        }
    }

    static fromJS(data: any): Register {
        data = typeof data === 'object' ? data : {};
        let result = new Register();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["userName"] = this.userName;
        data["password"] = this.password;
        return data;
    }
}

/** Represents the registration credentials for a new user. */
export interface IRegister {
    /** Gets or sets the username for the new user. */
    userName: string;
    /** Gets or sets the password for the new user. */
    password: string;
}

/** Represents a JWT token and its associated refresh token and metadata. */
export class JwtToken implements IJwtToken {
    /** Gets or sets the JWT access token string. */
    token?: string;
    /** Gets or sets the refresh token string. */
    refreshToken?: string;
    /** Gets or sets the expiry date and time of the JWT token. */
    expiryDate?: Date;
    /** Gets or sets the creation date and time of the JWT token. */
    createdDate?: Date;

    constructor(data?: IJwtToken) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.token = _data["token"];
            this.refreshToken = _data["refreshToken"];
            this.expiryDate = _data["expiryDate"] ? new Date(_data["expiryDate"].toString()) : <any>undefined;
            this.createdDate = _data["createdDate"] ? new Date(_data["createdDate"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): JwtToken {
        data = typeof data === 'object' ? data : {};
        let result = new JwtToken();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["token"] = this.token;
        data["refreshToken"] = this.refreshToken;
        data["expiryDate"] = this.expiryDate ? this.expiryDate.toISOString() : <any>undefined;
        data["createdDate"] = this.createdDate ? this.createdDate.toISOString() : <any>undefined;
        return data;
    }
}

/** Represents a JWT token and its associated refresh token and metadata. */
export interface IJwtToken {
    /** Gets or sets the JWT access token string. */
    token?: string;
    /** Gets or sets the refresh token string. */
    refreshToken?: string;
    /** Gets or sets the expiry date and time of the JWT token. */
    expiryDate?: Date;
    /** Gets or sets the creation date and time of the JWT token. */
    createdDate?: Date;
}

/** Represents an overview of temperature data for different locations. */
export class TemperatureDataOverview implements ITemperatureDataOverview {
    /** Gets or sets the list of temperature data for the south location. */
    temperatureSouth?: TemperatureData[];
    /** Gets or sets the list of temperature data for the north location. */
    temperatureNord?: TemperatureData[];
    /** Gets or sets the list of temperature data for the outside location. */
    temperatureOutside?: TemperatureData[];

    constructor(data?: ITemperatureDataOverview) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["temperatureSouth"])) {
                this.temperatureSouth = [] as any;
                for (let item of _data["temperatureSouth"])
                    this.temperatureSouth!.push(TemperatureData.fromJS(item));
            }
            if (Array.isArray(_data["temperatureNord"])) {
                this.temperatureNord = [] as any;
                for (let item of _data["temperatureNord"])
                    this.temperatureNord!.push(TemperatureData.fromJS(item));
            }
            if (Array.isArray(_data["temperatureOutside"])) {
                this.temperatureOutside = [] as any;
                for (let item of _data["temperatureOutside"])
                    this.temperatureOutside!.push(TemperatureData.fromJS(item));
            }
        }
    }

    static fromJS(data: any): TemperatureDataOverview {
        data = typeof data === 'object' ? data : {};
        let result = new TemperatureDataOverview();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.temperatureSouth)) {
            data["temperatureSouth"] = [];
            for (let item of this.temperatureSouth)
                data["temperatureSouth"].push(item ? item.toJSON() : <any>undefined);
        }
        if (Array.isArray(this.temperatureNord)) {
            data["temperatureNord"] = [];
            for (let item of this.temperatureNord)
                data["temperatureNord"].push(item ? item.toJSON() : <any>undefined);
        }
        if (Array.isArray(this.temperatureOutside)) {
            data["temperatureOutside"] = [];
            for (let item of this.temperatureOutside)
                data["temperatureOutside"].push(item ? item.toJSON() : <any>undefined);
        }
        return data;
    }
}

/** Represents an overview of temperature data for different locations. */
export interface ITemperatureDataOverview {
    /** Gets or sets the list of temperature data for the south location. */
    temperatureSouth?: TemperatureData[];
    /** Gets or sets the list of temperature data for the north location. */
    temperatureNord?: TemperatureData[];
    /** Gets or sets the list of temperature data for the outside location. */
    temperatureOutside?: TemperatureData[];
}

/** Represents a single temperature data point with timestamp and value. */
export class TemperatureData implements ITemperatureData {
    /** Gets or sets the timestamp of the temperature measurement. */
    timestamp?: Date;
    /** Gets or sets the temperature value. */
    temperature?: number;

    constructor(data?: ITemperatureData) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.timestamp = _data["timestamp"] ? new Date(_data["timestamp"].toString()) : <any>undefined;
            this.temperature = _data["temperature"];
        }
    }

    static fromJS(data: any): TemperatureData {
        data = typeof data === 'object' ? data : {};
        let result = new TemperatureData();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["timestamp"] = this.timestamp ? this.timestamp.toISOString() : <any>undefined;
        data["temperature"] = this.temperature;
        return data;
    }
}

/** Represents a single temperature data point with timestamp and value. */
export interface ITemperatureData {
    /** Gets or sets the timestamp of the temperature measurement. */
    timestamp?: Date;
    /** Gets or sets the temperature value. */
    temperature?: number;
}

/** Represents the settings for a specific MQTT topic, including default path, group, and sensor information. */
export class TopicSetting implements ITopicSetting {
    /** Gets or sets the unique identifier for the TopicSetting entity. */
    topicSettingId?: number;
    /** Gets or sets the default MQTT topic path for this setting. */
    defaultTopicPath?: string;
    /** Gets or sets the group identifier associated with this topic setting. */
    groupId?: number;
    /** Gets or sets the type of sensor (e.g., temperature, humidity). */
    sensorType?: string;
    /** Gets or sets the name of the sensor. */
    sensorName?: string | undefined;
    /** Gets or sets the location of the sensor. */
    sensorLocation?: string | undefined;
    /** Gets or sets a value indicating whether this topic setting has recovery enabled. */
    hasRecovery?: boolean;

    constructor(data?: ITopicSetting) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.topicSettingId = _data["topicSettingId"];
            this.defaultTopicPath = _data["defaultTopicPath"];
            this.groupId = _data["groupId"];
            this.sensorType = _data["sensorType"];
            this.sensorName = _data["sensorName"];
            this.sensorLocation = _data["sensorLocation"];
            this.hasRecovery = _data["hasRecovery"];
        }
    }

    static fromJS(data: any): TopicSetting {
        data = typeof data === 'object' ? data : {};
        let result = new TopicSetting();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["topicSettingId"] = this.topicSettingId;
        data["defaultTopicPath"] = this.defaultTopicPath;
        data["groupId"] = this.groupId;
        data["sensorType"] = this.sensorType;
        data["sensorName"] = this.sensorName;
        data["sensorLocation"] = this.sensorLocation;
        data["hasRecovery"] = this.hasRecovery;
        return data;
    }
}

/** Represents the settings for a specific MQTT topic, including default path, group, and sensor information. */
export interface ITopicSetting {
    /** Gets or sets the unique identifier for the TopicSetting entity. */
    topicSettingId?: number;
    /** Gets or sets the default MQTT topic path for this setting. */
    defaultTopicPath?: string;
    /** Gets or sets the group identifier associated with this topic setting. */
    groupId?: number;
    /** Gets or sets the type of sensor (e.g., temperature, humidity). */
    sensorType?: string;
    /** Gets or sets the name of the sensor. */
    sensorName?: string | undefined;
    /** Gets or sets the location of the sensor. */
    sensorLocation?: string | undefined;
    /** Gets or sets a value indicating whether this topic setting has recovery enabled. */
    hasRecovery?: boolean;
}

export class ProblemDetails implements IProblemDetails {
    type?: string | undefined;
    title?: string | undefined;
    status?: number | undefined;
    detail?: string | undefined;
    instance?: string | undefined;

    [key: string]: any;

    constructor(data?: IProblemDetails) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.type = _data["type"];
            this.title = _data["title"];
            this.status = _data["status"];
            this.detail = _data["detail"];
            this.instance = _data["instance"];
        }
    }

    static fromJS(data: any): ProblemDetails {
        data = typeof data === 'object' ? data : {};
        let result = new ProblemDetails();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["type"] = this.type;
        data["title"] = this.title;
        data["status"] = this.status;
        data["detail"] = this.detail;
        data["instance"] = this.instance;
        return data;
    }
}

export interface IProblemDetails {
    type?: string | undefined;
    title?: string | undefined;
    status?: number | undefined;
    detail?: string | undefined;
    instance?: string | undefined;

    [key: string]: any;
}

/** Represents a request to change a user's password. */
export class ChangePassword implements IChangePassword {
    /** Gets or sets the unique identifier of the user whose password is to be changed. */
    userId?: string | undefined;
    /** Gets or sets the current password of the user. */
    currentPassword?: string | undefined;
    /** Gets or sets the new password to be set for the user. */
    newPassword?: string | undefined;

    constructor(data?: IChangePassword) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.userId = _data["userId"];
            this.currentPassword = _data["currentPassword"];
            this.newPassword = _data["newPassword"];
        }
    }

    static fromJS(data: any): ChangePassword {
        data = typeof data === 'object' ? data : {};
        let result = new ChangePassword();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["userId"] = this.userId;
        data["currentPassword"] = this.currentPassword;
        data["newPassword"] = this.newPassword;
        return data;
    }
}

/** Represents a request to change a user's password. */
export interface IChangePassword {
    /** Gets or sets the unique identifier of the user whose password is to be changed. */
    userId?: string | undefined;
    /** Gets or sets the current password of the user. */
    currentPassword?: string | undefined;
    /** Gets or sets the new password to be set for the user. */
    newPassword?: string | undefined;
}

/** Represents a user in the identity system */
export class IdentityUserOfString implements IIdentityUserOfString {
    /** Gets or sets the primary key for this user. */
    id?: string | undefined;
    /** Gets or sets the user name for this user. */
    userName?: string | undefined;
    /** Gets or sets the normalized user name for this user. */
    normalizedUserName?: string | undefined;
    /** Gets or sets the email address for this user. */
    email?: string | undefined;
    /** Gets or sets the normalized email address for this user. */
    normalizedEmail?: string | undefined;
    /** Gets or sets a flag indicating if a user has confirmed their email address. */
    emailConfirmed?: boolean;
    /** Gets or sets a salted and hashed representation of the password for this user. */
    passwordHash?: string | undefined;
    /** A random value that must change whenever a users credentials change (password changed, auth removed) */
    securityStamp?: string | undefined;
    /** A random value that must change whenever a user is persisted to the store */
    concurrencyStamp?: string | undefined;
    /** Gets or sets a telephone number for the user. */
    phoneNumber?: string | undefined;
    /** Gets or sets a flag indicating if a user has confirmed their telephone address. */
    phoneNumberConfirmed?: boolean;
    /** Gets or sets a flag indicating if two factor authentication is enabled for this user. */
    twoFactorEnabled?: boolean;
    /** Gets or sets the date and time, in UTC, when any user lockout ends. */
    lockoutEnd?: Date | undefined;
    /** Gets or sets a flag indicating if the user could be locked out. */
    lockoutEnabled?: boolean;
    /** Gets or sets the number of failed auth attempts for the current user. */
    accessFailedCount?: number;

    constructor(data?: IIdentityUserOfString) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.userName = _data["userName"];
            this.normalizedUserName = _data["normalizedUserName"];
            this.email = _data["email"];
            this.normalizedEmail = _data["normalizedEmail"];
            this.emailConfirmed = _data["emailConfirmed"];
            this.passwordHash = _data["passwordHash"];
            this.securityStamp = _data["securityStamp"];
            this.concurrencyStamp = _data["concurrencyStamp"];
            this.phoneNumber = _data["phoneNumber"];
            this.phoneNumberConfirmed = _data["phoneNumberConfirmed"];
            this.twoFactorEnabled = _data["twoFactorEnabled"];
            this.lockoutEnd = _data["lockoutEnd"] ? new Date(_data["lockoutEnd"].toString()) : <any>undefined;
            this.lockoutEnabled = _data["lockoutEnabled"];
            this.accessFailedCount = _data["accessFailedCount"];
        }
    }

    static fromJS(data: any): IdentityUserOfString {
        data = typeof data === 'object' ? data : {};
        let result = new IdentityUserOfString();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["userName"] = this.userName;
        data["normalizedUserName"] = this.normalizedUserName;
        data["email"] = this.email;
        data["normalizedEmail"] = this.normalizedEmail;
        data["emailConfirmed"] = this.emailConfirmed;
        data["passwordHash"] = this.passwordHash;
        data["securityStamp"] = this.securityStamp;
        data["concurrencyStamp"] = this.concurrencyStamp;
        data["phoneNumber"] = this.phoneNumber;
        data["phoneNumberConfirmed"] = this.phoneNumberConfirmed;
        data["twoFactorEnabled"] = this.twoFactorEnabled;
        data["lockoutEnd"] = this.lockoutEnd ? this.lockoutEnd.toISOString() : <any>undefined;
        data["lockoutEnabled"] = this.lockoutEnabled;
        data["accessFailedCount"] = this.accessFailedCount;
        return data;
    }
}

/** Represents a user in the identity system */
export interface IIdentityUserOfString {
    /** Gets or sets the primary key for this user. */
    id?: string | undefined;
    /** Gets or sets the user name for this user. */
    userName?: string | undefined;
    /** Gets or sets the normalized user name for this user. */
    normalizedUserName?: string | undefined;
    /** Gets or sets the email address for this user. */
    email?: string | undefined;
    /** Gets or sets the normalized email address for this user. */
    normalizedEmail?: string | undefined;
    /** Gets or sets a flag indicating if a user has confirmed their email address. */
    emailConfirmed?: boolean;
    /** Gets or sets a salted and hashed representation of the password for this user. */
    passwordHash?: string | undefined;
    /** A random value that must change whenever a users credentials change (password changed, auth removed) */
    securityStamp?: string | undefined;
    /** A random value that must change whenever a user is persisted to the store */
    concurrencyStamp?: string | undefined;
    /** Gets or sets a telephone number for the user. */
    phoneNumber?: string | undefined;
    /** Gets or sets a flag indicating if a user has confirmed their telephone address. */
    phoneNumberConfirmed?: boolean;
    /** Gets or sets a flag indicating if two factor authentication is enabled for this user. */
    twoFactorEnabled?: boolean;
    /** Gets or sets the date and time, in UTC, when any user lockout ends. */
    lockoutEnd?: Date | undefined;
    /** Gets or sets a flag indicating if the user could be locked out. */
    lockoutEnabled?: boolean;
    /** Gets or sets the number of failed auth attempts for the current user. */
    accessFailedCount?: number;
}

/** The default implementation of IdentityUser`1 which uses a string as a primary key. */
export class IdentityUser extends IdentityUserOfString implements IIdentityUser {

    constructor(data?: IIdentityUser) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
    }

    static override fromJS(data: any): IdentityUser {
        data = typeof data === 'object' ? data : {};
        let result = new IdentityUser();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data;
    }
}

/** The default implementation of IdentityUser`1 which uses a string as a primary key. */
export interface IIdentityUser extends IIdentityUserOfString {
}

/** Represents an application user in the system */
export class ApiUser extends IdentityUser implements IApiUser {

    constructor(data?: IApiUser) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
    }

    static override fromJS(data: any): ApiUser {
        data = typeof data === 'object' ? data : {};
        let result = new ApiUser();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data;
    }
}

/** Represents an application user in the system */
export interface IApiUser extends IIdentityUser {
}

export interface FileResponse {
    data: Blob;
    status: number;
    fileName?: string;
    headers?: { [name: string]: any };
}

export class ApiException extends Error {
    override message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): any {
    if (result !== null && result !== undefined)
        throw result;
    else
        throw new ApiException(message, status, response, headers, null);
}