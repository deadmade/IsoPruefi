{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to IsoPr\u00fcfi","text":"<p>We are happy that you are here \ud83e\udd73\ud83c\udf89</p> <p></p>"},{"location":"build/","title":"Contribute &amp; Build","text":""},{"location":"build/#how-do-i-contribute-as-a-developer","title":"How do I contribute as a developer?","text":"<p>READ THIS GUIDE BEFORE CONTRIBUTING</p> <p>Since our project is secured by two pre-commit hocks, it is important to set up the project correctly before contributing.</p> <p>This is done as followed:</p> <p>Clone the project</p> <p><code>git clone https://github.com/deadmade/IsoPruefi.git</code></p> <p>Make sure you have installed the following packages globally.</p> <ul> <li>Python: Needed for MkDocs</li> <li>Node Package Manager: Used to install needed dependencies for pre-commit hooks</li> <li>.NET 9.0 SDK: Used for our Rest-API</li> <li>Docker</li> </ul> <p>After you've cloned the repo make sure to install all needed packages for the hooks via:</p> <p><code>npm i</code></p> <p>and run:</p> <p><code>npm run init</code></p> <p>Now it should be configured \ud83d\ude80</p> <p>To get the development environment up and running, follow these steps:</p> <ol> <li>Open a terminal, navigate to the <code>IsoPr\u00fcfi</code> directory, and run:</li> </ol> <pre><code>docker compose up\n</code></pre> <ol> <li>Once the containers are running, create an admin token for InfluxDB:</li> </ol> <pre><code>docker exec -it influxdb influxdb3 create token --admin\n</code></pre> <ol> <li> <p>Copy the generated token string.</p> </li> <li> <p>Create a <code>config.json</code> file at the following location:</p> </li> </ol> <pre><code>IsoPruefi/isopruefi-docker/influx/explorer/config\n</code></pre> <ol> <li>Add the following content to <code>config.json</code>, replacing <code>\"your-token-here\"</code> with the copied token:</li> </ol> <pre><code>{\n  \"DEFAULT_INFLUX_SERVER\": \"http://host.docker.internal:8181\",\n  \"DEFAULT_INFLUX_DATABASE\": \"IsoPr\u00fcfi\",\n  \"DEFAULT_API_TOKEN\": \"your-token-here\",\n  \"DEFAULT_SERVER_NAME\": \"IsoPr\u00fcfi\"\n}\n</code></pre> <ol> <li> <p>Run dotnet user-secrets set \"Influx:InfluxDBToken\" \"\" --project isopruefi-backend\\MQTT-Receiver-Worker\\MQTT-Receiver-Worker.csproj  <li> <p>Restart the Containers</p> </li>"},{"location":"build/#arduino-set-up","title":"Arduino Set Up","text":""},{"location":"build/#hardware","title":"Hardware","text":"<ul> <li>MKR WiFi 1010</li> <li>Analog Devices ADT7410 Breakout</li> <li>DS3231 RTC</li> <li>SD Card Module</li> </ul>"},{"location":"build/#software","title":"Software","text":"<p><code>\u26a0\ufe0f Important: Always open the Arduino firmware folder (e.g., code/arduino/) as a PlatformIO Project (via Open Project or Pick a folder in the PlatformIO sidebar). Otherwise, dependencies from platformio.ini might not be detected and you may see false errors in the editor.</code></p> <p>To work on the Arduino/PlatformIO part of the project:</p> <ol> <li> <p>Install the PlatformIO Extension in Visual Studio Code</p> </li> <li> <p>Open the folder code/arduino/ (or wherever the firmware is located)</p> </li> <li> <p>Build and upload the firmware using the PlatformIO toolbar or PlatformIO terminal</p> </li> <li> <p>Make sure your board is connected and properly selected in platformio.ini</p> </li> </ol> <p><pre><code>[env:mkrwifi1010]\nplatform = atmelsam\nboard = mkrwifi1010\nframework = arduino\nlib_deps = \n    arduino-libraries/WiFiNINA\n    adafruit/Adafruit ADT7410 Library\n    adafruit/RTClib\n    arduino-libraries/ArduinoMqttClient\n    greiman/SdFat\n    gyverlibs/UnixTime\n    bblanchon/ArduinoJson@^7.4.2\n</code></pre> Tips:</p> <ul> <li> <p>PlatformIO installs the required libraries automatically on first build</p> </li> <li> <p>To run the programm run <code>pio run -e mkrwifi1010</code> in the PlatformIO terminal</p> </li> <li> <p>To flash the Arudion with new code run <code>pio run -e mkrwifi1010 --target upload</code> in the PlatformIO terminal</p> </li> <li> <p>The main firmware entry point is located at src/main.cpp</p> </li> <li> <p>Use the Serial Monitor (\ud83d\udd0c) to debug via USB</p> </li> <li> <p>To run the all unit tests run <code>pio test -e native</code> in the PlatformIO terminal</p> </li> </ul> <p>Happy Coding \ud83d\ude0a</p>"},{"location":"docker-dev/","title":"Documentation of the Docker development environment","text":"<p>This documentation provides an overview of the Docker containers used, as well as their function and their addresses.</p>"},{"location":"docker-dev/#overview-of-the-docker-containers","title":"Overview of the Docker containers","text":"Container Image Description Adress traefik <code>traefik:3.4.4</code> Reverse proxy and load balancer for external access to our containers (HTTPS certificates) traefik.localhost, Ports: <code>80</code>, <code>443</code>, Dashboard-Port: <code>8432</code> influxdb <code>influxdb:3.2.1-core</code> Time series database (InfluxDB 3.x) for data storage Port: <code>8181</code> influxdb-explorer <code>influxdata/influxdb3-ui:1.0.3</code> Web interface for managing and querying InfluxDB data explorer.localhost, Port: <code>8888</code> postgres <code>postgres:alpine3.21</code> PostgreSQL database for relational data storage Port: <code>5432</code> loki <code>grafana/loki:3.5.2</code> Log aggregation and management Port: <code>3100</code> prometheus <code>prom/prometheus:v3.4.2</code> Monitoring tool for collecting and evaluating metrics Port: <code>9090</code> alloy <code>grafana/alloy:v1.9.2</code> Observability platform for the integration of Loki and Prometheus Ports: <code>12345</code>, <code>4317</code>, <code>4318</code> grafana <code>grafana/grafana:12.0.2</code> Web-based visualization and dashboard for metrics and logs grafana.localhost isopruefi-frontend own Build (React) Frontend Application frontend.localhost isopruefi-backend-api own Build (.NET REST-API) Backend REST API for application logic backend.localhost"},{"location":"docker-dev/#networks","title":"Networks","text":"<p>The following Docker networks are used to logically separate the containers from each other:</p> <ul> <li><code>isopruefi-network</code>: General network, used by Traefik</li> <li><code>database-network</code>: Network for databases (InfluxDB, PostgreSQL)</li> <li><code>isopruefi-custom</code>: Network for user-defined services (frontend, backend)</li> <li><code>loki</code>: Network for observability tools (Loki, Grafana, Alloy)</li> </ul>"},{"location":"docker-dev/#details-of-important-containers","title":"Details of important containers","text":""},{"location":"docker-dev/#traefik","title":"Traefik","text":"<p>Traefik serves as a reverse proxy that receives all HTTP(S) requests and forwards them to the appropriate Docker containers. It automatically manages the TLS certificates and provides a dashboard for administration.</p>"},{"location":"docker-dev/#grafana","title":"Grafana","text":"<p>Grafana is used to visualize and analyze logs and metrics. It is connected to Loki (logs) and Prometheus (metrics).</p>"},{"location":"docker-dev/#influxdb-und-influxdb-explorer","title":"InfluxDB und InfluxDB-Explorer","text":"<p>InfluxDB stores time series data, while InfluxDB Explorer provides a convenient web interface to access this data.</p>"},{"location":"docker-dev/#postgresql","title":"PostgreSQL","text":"<p>PostgreSQL stores relational data used by the backend API.</p>"},{"location":"guidelines/","title":"Guidelines / Conventions","text":""},{"location":"guidelines/#general-formatting-guidelines","title":"General Formatting Guidelines","text":"<ul> <li>Preserve Settings: Follow the existing project formatting rules.</li> <li>Automatic Formatting: Regularly use Rider's automatic formatting function (Ctrl+Alt+L).</li> </ul>"},{"location":"guidelines/#code-layout","title":"Code Layout","text":"<ul> <li>Line Length: Maximum of 120 characters per line.</li> <li>Indented Blocks: Use tabs or 4 spaces for indentation (depending on project settings).</li> <li>Blank Lines: Use blank lines to separate logical code blocks.</li> </ul>"},{"location":"guidelines/#indentation-and-spacing","title":"Indentation and Spacing","text":"<ul> <li>Indent Blocks: Always use 4 spaces per indentation level.</li> <li>Braces: Opening braces on the same line as the statement, closing braces on a new line.</li> <li>Operator Spacing: Add spaces around operators like +, -, *, /, =, ==, etc.</li> <li>Commas and Semicolons: Add a space after commas and semicolons, not before.</li> </ul>"},{"location":"guidelines/#naming-conventions","title":"Naming Conventions","text":"<ul> <li>Classes and Methods: Use PascalCase.</li> <li>Variables and Fields: Use camelCase.</li> <li>Constants: Use SCREAMING_SNAKE_CASE.</li> </ul>"},{"location":"guidelines/#documentation-comments","title":"Documentation Comments","text":"<p>If not obvious, or the method is more than 5 lines, it should be commented.</p> <ul> <li>Single-line Comments: Use // for single-line comments</li> <li>Multi-line Comments: Use /* ... */ for multi-line comments.</li> <li>Documentation Comments: Use /// for documentation comments.</li> </ul>"},{"location":"guidelines/#documentation-comments-c","title":"Documentation Comments (C#)","text":"<p>We use the xml documentation convention by Microsoft</p> <p>In short: You can use the following tags structures in your documentation comment to specify properties of the following code:</p> <ul> <li><code>&lt;summary&gt;Your code summary&lt;/summary&gt;</code></li> <li><code>&lt;param name=\"str\"&gt;Describe parameter.&lt;/param&gt;</code>: Usage may also be nested within summary</li> <li><code>&lt;code&gt;Use a codeblock within&lt;/code&gt;</code></li> <li><code>&lt;example&gt;Put a example here&lt;/example&gt;</code></li> </ul> <p>There are plenty more tags. You can even reference other doc segments.  If you need other tags, take a look here</p>"},{"location":"guidelines/#doxygen-cc","title":"Doxygen (C/C++)","text":"<p>For Arduino and C++ code, we use Doxygen style comments:</p> <ul> <li><code>/// Brief description</code></li> <li><code>/** Detailed description */</code></li> <li><code>@param name Description of parameter</code></li> <li><code>@return Description of return value</code></li> <li><code>@code ... @endcode</code> for code blocks</li> <li><code>@example ...</code> for examples</li> </ul> <p>More tags: Doxygen documentation</p>"},{"location":"guidelines/#typedoc-typescript","title":"TypeDoc (TypeScript)","text":"<p>For TypeScript, we use TypeDoc style comments:</p> <ul> <li><code>/** Summary of the function or class */</code></li> <li><code>@param name Description of parameter</code></li> <li><code>@returns Description of return value</code></li> <li><code>@example Example usage</code></li> <li><code>@see Reference to related code or docs</code></li> </ul> <p>More tags: TypeDoc tags</p>"},{"location":"guidelines/#usings-and-namespaces","title":"Usings and Namespaces","text":"<ul> <li>Sorting: Sort usings alphabetically and group by system namespace.</li> <li>Removing: Remove unused usings.</li> <li>Namespace: A file should contain a single namespace.</li> </ul>"},{"location":"guidelines/#error-handling","title":"Error Handling","text":"<ul> <li>Exceptions: Always catch specific exceptions when possible.</li> </ul>"},{"location":"guidelines/#unit-tests","title":"Unit Tests","text":"<p>Every method should be unit testable and have a unit test for it.</p>"},{"location":"guidelines/#commit-messages","title":"Commit Messages","text":""},{"location":"guidelines/#how-should-my-commit-messages-look-like","title":"How should my commit messages look like?","text":"<p>Our repo follows the Conventional Commits guidelines.</p> <p>Allowed commit types are specified as following:</p> <ul> <li>feat -&gt; Introduces a new features</li> <li>fix -&gt; Fixes a bug</li> <li>docs -&gt; Updates on the docs</li> <li>chore -&gt; Updates a grunt task; no-production code change</li> <li>style -&gt; Formatting code style (missing semicolon, prettier execution, etc)</li> <li>refactor -&gt; Refactoring existing code e.g. renaming a variable, reworking a function</li> <li>ci -&gt; CI Tasks e.g. adding a hook</li> <li>test -&gt; Adding new tests, refactoring tests, deleting old tests</li> <li>revert -&gt; Revert old commits</li> <li>perf -&gt; Performance related refactoring, without functional changes</li> </ul>"},{"location":"guidelines/#branch-naming","title":"Branch Naming","text":"<p>Your branche names should follow this style:</p> <p>[commit-type]/[topic-of-branch-seperated-by-hyphen]</p> <p>F.e. if you want to introduce a new cool type of button your branch should have the name:</p> <p>feat/cool-new-button</p>"},{"location":"license/","title":"License","text":"<p>arc42</p> <p>Parts of this documentation are based on the arc42 architecture template, licensed under Creative Commons Attribution 4.0 International (CC BY 4.0). \u00a9 Dr. Gernot Starke, Dr. Peter Hruschka et al.</p>"},{"location":"code/Database/","title":"Assembly Database","text":""},{"location":"code/Database/#namespace-databaseentityframework","title":"Namespace Database.EntityFramework","text":"<ul> <li>ApplicationDbContext</li> </ul>"},{"location":"code/Database/#namespace-databaseentityframeworkmodels","title":"Namespace Database.EntityFramework.Models","text":"<ul> <li> <p>ApiUser</p> </li> <li> <p>CoordinateMapping</p> </li> <li> <p>GeneralSetting</p> </li> <li> <p>TokenInfo</p> </li> <li> <p>TopicSetting</p> </li> </ul>"},{"location":"code/Database/#namespace-databasemigrations","title":"Namespace Database.Migrations","text":"<ul> <li> <p>AddHasRecoveryField</p> </li> <li> <p>CoordinateMapping</p> </li> <li> <p>CoordinateMappingLocked</p> </li> <li> <p>DefaultValue</p> </li> <li> <p>Init</p> </li> <li> <p>PlausibilityCheck</p> </li> <li> <p>Recovery</p> </li> </ul>"},{"location":"code/Database/#namespace-databaserepositorycoordinaterepo","title":"Namespace Database.Repository.CoordinateRepo","text":"<ul> <li> <p>CoordinateRepo</p> </li> <li> <p>ICoordinateRepo</p> </li> </ul>"},{"location":"code/Database/#namespace-databaserepositoryinfluxrepo","title":"Namespace Database.Repository.InfluxRepo","text":"<ul> <li> <p>CachedInfluxHealthCheck</p> </li> <li> <p>CachedInfluxRepo</p> </li> <li> <p>IInfluxRepo</p> </li> <li> <p>InfluxHealthCheck</p> </li> <li> <p>InfluxRepo</p> </li> <li> <p>InfluxRetryService</p> </li> </ul>"},{"location":"code/Database/#namespace-databaserepositorysettingsrepo","title":"Namespace Database.Repository.SettingsRepo","text":"<ul> <li> <p>ISettingsRepo</p> </li> <li> <p>SettingsRepo</p> </li> </ul>"},{"location":"code/Database/#namespace-databaserepositorytokenrepo","title":"Namespace Database.Repository.TokenRepo","text":"<ul> <li> <p>ITokenRepo</p> </li> <li> <p>TokenRepo</p> </li> </ul>"},{"location":"code/Database/database.entityframework.applicationdbcontext/","title":"ApplicationDbContext","text":"<p>Namespace: Database.EntityFramework</p> <pre><code>public class ApplicationDbContext : Microsoft.AspNetCore.Identity.EntityFrameworkCore.IdentityDbContext`1[[Database.EntityFramework.Models.ApiUser, Database, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]], Microsoft.EntityFrameworkCore.Infrastructure.IInfrastructure`1[[System.IServiceProvider, System.ComponentModel, Version=9.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a]], Microsoft.EntityFrameworkCore.Internal.IDbContextDependencies, Microsoft.EntityFrameworkCore.Internal.IDbSetCache, Microsoft.EntityFrameworkCore.Internal.IDbContextPoolable, Microsoft.EntityFrameworkCore.Infrastructure.IResettableService, System.IDisposable, System.IAsyncDisposable\n</code></pre> <p>Inheritance Object \u2192 DbContext \u2192 IdentityUserContext&lt;ApiUser, String, IdentityUserClaim&lt;String&gt;, IdentityUserLogin&lt;String&gt;, IdentityUserToken&lt;String&gt;&gt; \u2192 IdentityDbContext&lt;ApiUser, IdentityRole, String, IdentityUserClaim&lt;String&gt;, IdentityUserRole&lt;String&gt;, IdentityUserLogin&lt;String&gt;, IdentityRoleClaim&lt;String&gt;, IdentityUserToken&lt;String&gt;&gt; \u2192 IdentityDbContext&lt;ApiUser, IdentityRole, String&gt; \u2192 IdentityDbContext&lt;ApiUser&gt; \u2192 ApplicationDbContext Implements IInfrastructure&lt;IServiceProvider&gt;, IDbContextDependencies, IDbSetCache, IDbContextPoolable, IResettableService, IDisposable, IAsyncDisposable</p>"},{"location":"code/Database/database.entityframework.applicationdbcontext/#properties","title":"Properties","text":""},{"location":"code/Database/database.entityframework.applicationdbcontext/#changetracker","title":"ChangeTracker","text":"<pre><code>public ChangeTracker ChangeTracker { get; }\n</code></pre>"},{"location":"code/Database/database.entityframework.applicationdbcontext/#property-value","title":"Property Value","text":"<p>ChangeTracker</p>"},{"location":"code/Database/database.entityframework.applicationdbcontext/#contextid","title":"ContextId","text":"<pre><code>public DbContextId ContextId { get; }\n</code></pre>"},{"location":"code/Database/database.entityframework.applicationdbcontext/#property-value_1","title":"Property Value","text":"<p>DbContextId</p>"},{"location":"code/Database/database.entityframework.applicationdbcontext/#coordinatemappings","title":"CoordinateMappings","text":"<p>Represents the collection of CoordinateMappings entities in the database.</p> <pre><code>public DbSet&lt;CoordinateMapping&gt; CoordinateMappings { get; set; }\n</code></pre>"},{"location":"code/Database/database.entityframework.applicationdbcontext/#property-value_2","title":"Property Value","text":"<p>DbSet&lt;CoordinateMapping&gt;</p>"},{"location":"code/Database/database.entityframework.applicationdbcontext/#database","title":"Database","text":"<pre><code>public DatabaseFacade Database { get; }\n</code></pre>"},{"location":"code/Database/database.entityframework.applicationdbcontext/#property-value_3","title":"Property Value","text":"<p>DatabaseFacade</p>"},{"location":"code/Database/database.entityframework.applicationdbcontext/#model","title":"Model","text":"<pre><code>public IModel Model { get; }\n</code></pre>"},{"location":"code/Database/database.entityframework.applicationdbcontext/#property-value_4","title":"Property Value","text":"<p>IModel</p>"},{"location":"code/Database/database.entityframework.applicationdbcontext/#roleclaims","title":"RoleClaims","text":"<pre><code>public DbSet&lt;IdentityRoleClaim&lt;String&gt;&gt; RoleClaims { get; set; }\n</code></pre>"},{"location":"code/Database/database.entityframework.applicationdbcontext/#property-value_5","title":"Property Value","text":"<p>DbSet&lt;IdentityRoleClaim&lt;String&gt;&gt;</p>"},{"location":"code/Database/database.entityframework.applicationdbcontext/#roles","title":"Roles","text":"<pre><code>public DbSet&lt;IdentityRole&gt; Roles { get; set; }\n</code></pre>"},{"location":"code/Database/database.entityframework.applicationdbcontext/#property-value_6","title":"Property Value","text":"<p>DbSet&lt;IdentityRole&gt;</p>"},{"location":"code/Database/database.entityframework.applicationdbcontext/#tokeninfos","title":"TokenInfos","text":"<p>Represents the collection of TokenInfo entities in the database.</p> <pre><code>public DbSet&lt;TokenInfo&gt; TokenInfos { get; set; }\n</code></pre>"},{"location":"code/Database/database.entityframework.applicationdbcontext/#property-value_7","title":"Property Value","text":"<p>DbSet&lt;TokenInfo&gt;</p>"},{"location":"code/Database/database.entityframework.applicationdbcontext/#topicsettings","title":"TopicSettings","text":"<p>Represents the collection of TopicSetting entities in the database.</p> <pre><code>public DbSet&lt;TopicSetting&gt; TopicSettings { get; set; }\n</code></pre>"},{"location":"code/Database/database.entityframework.applicationdbcontext/#property-value_8","title":"Property Value","text":"<p>DbSet&lt;TopicSetting&gt;</p>"},{"location":"code/Database/database.entityframework.applicationdbcontext/#userclaims","title":"UserClaims","text":"<pre><code>public DbSet&lt;IdentityUserClaim&lt;String&gt;&gt; UserClaims { get; set; }\n</code></pre>"},{"location":"code/Database/database.entityframework.applicationdbcontext/#property-value_9","title":"Property Value","text":"<p>DbSet&lt;IdentityUserClaim&lt;String&gt;&gt;</p>"},{"location":"code/Database/database.entityframework.applicationdbcontext/#userlogins","title":"UserLogins","text":"<pre><code>public DbSet&lt;IdentityUserLogin&lt;String&gt;&gt; UserLogins { get; set; }\n</code></pre>"},{"location":"code/Database/database.entityframework.applicationdbcontext/#property-value_10","title":"Property Value","text":"<p>DbSet&lt;IdentityUserLogin&lt;String&gt;&gt;</p>"},{"location":"code/Database/database.entityframework.applicationdbcontext/#userroles","title":"UserRoles","text":"<pre><code>public DbSet&lt;IdentityUserRole&lt;String&gt;&gt; UserRoles { get; set; }\n</code></pre>"},{"location":"code/Database/database.entityframework.applicationdbcontext/#property-value_11","title":"Property Value","text":"<p>DbSet&lt;IdentityUserRole&lt;String&gt;&gt;</p>"},{"location":"code/Database/database.entityframework.applicationdbcontext/#users","title":"Users","text":"<pre><code>public DbSet&lt;ApiUser&gt; Users { get; set; }\n</code></pre>"},{"location":"code/Database/database.entityframework.applicationdbcontext/#property-value_12","title":"Property Value","text":"<p>DbSet&lt;ApiUser&gt;</p>"},{"location":"code/Database/database.entityframework.applicationdbcontext/#usertokens","title":"UserTokens","text":"<pre><code>public DbSet&lt;IdentityUserToken&lt;String&gt;&gt; UserTokens { get; set; }\n</code></pre>"},{"location":"code/Database/database.entityframework.applicationdbcontext/#property-value_13","title":"Property Value","text":"<p>DbSet&lt;IdentityUserToken&lt;String&gt;&gt;</p>"},{"location":"code/Database/database.entityframework.applicationdbcontext/#constructors","title":"Constructors","text":""},{"location":"code/Database/database.entityframework.applicationdbcontext/#applicationdbcontextdbcontextoptionsapplicationdbcontext","title":"ApplicationDbContext(DbContextOptions&lt;ApplicationDbContext&gt;)","text":"<pre><code>public ApplicationDbContext(DbContextOptions&lt;ApplicationDbContext&gt; options)\n</code></pre>"},{"location":"code/Database/database.entityframework.applicationdbcontext/#parameters","title":"Parameters","text":"<p><code>options</code> DbContextOptions&lt;ApplicationDbContext&gt;</p>"},{"location":"code/Database/database.entityframework.applicationdbcontext/#methods","title":"Methods","text":""},{"location":"code/Database/database.entityframework.applicationdbcontext/#applymigrationtdbcontextiservicescope","title":"ApplyMigration&lt;TDbContext&gt;(IServiceScope)","text":"<p>Applies any pending migrations for the specified DbContext.</p> <pre><code>public static void ApplyMigration&lt;TDbContext&gt;(IServiceScope scope)\n</code></pre>"},{"location":"code/Database/database.entityframework.applicationdbcontext/#type-parameters","title":"Type Parameters","text":"<p><code>TDbContext</code></p>"},{"location":"code/Database/database.entityframework.applicationdbcontext/#parameters_1","title":"Parameters","text":"<p><code>scope</code> IServiceScope</p>"},{"location":"code/Database/database.entityframework.applicationdbcontext/#onmodelcreatingmodelbuilder","title":"OnModelCreating(ModelBuilder)","text":"<pre><code>protected void OnModelCreating(ModelBuilder modelBuilder)\n</code></pre>"},{"location":"code/Database/database.entityframework.applicationdbcontext/#parameters_2","title":"Parameters","text":"<p><code>modelBuilder</code> ModelBuilder</p>"},{"location":"code/Database/database.entityframework.applicationdbcontext/#events","title":"Events","text":""},{"location":"code/Database/database.entityframework.applicationdbcontext/#savechangesfailed","title":"SaveChangesFailed","text":"<pre><code>public event EventHandler&lt;SaveChangesFailedEventArgs&gt; SaveChangesFailed;\n</code></pre>"},{"location":"code/Database/database.entityframework.applicationdbcontext/#savedchanges","title":"SavedChanges","text":"<pre><code>public event EventHandler&lt;SavedChangesEventArgs&gt; SavedChanges;\n</code></pre>"},{"location":"code/Database/database.entityframework.applicationdbcontext/#savingchanges","title":"SavingChanges","text":"<pre><code>public event EventHandler&lt;SavingChangesEventArgs&gt; SavingChanges;\n</code></pre>"},{"location":"code/Database/database.entityframework.models.apiuser/","title":"ApiUser","text":"<p>Namespace: Database.EntityFramework.Models</p> <p>Represents an application user in the system</p> <pre><code>public class ApiUser : Microsoft.AspNetCore.Identity.IdentityUser\n</code></pre> <p>Inheritance Object \u2192 IdentityUser&lt;String&gt; \u2192 IdentityUser \u2192 ApiUser</p>"},{"location":"code/Database/database.entityframework.models.apiuser/#properties","title":"Properties","text":""},{"location":"code/Database/database.entityframework.models.apiuser/#accessfailedcount","title":"AccessFailedCount","text":"<pre><code>public int AccessFailedCount { get; set; }\n</code></pre>"},{"location":"code/Database/database.entityframework.models.apiuser/#property-value","title":"Property Value","text":"<p>Int32</p>"},{"location":"code/Database/database.entityframework.models.apiuser/#concurrencystamp","title":"ConcurrencyStamp","text":"<pre><code>public string ConcurrencyStamp { get; set; }\n</code></pre>"},{"location":"code/Database/database.entityframework.models.apiuser/#property-value_1","title":"Property Value","text":"<p>String</p>"},{"location":"code/Database/database.entityframework.models.apiuser/#email","title":"Email","text":"<pre><code>public string Email { get; set; }\n</code></pre>"},{"location":"code/Database/database.entityframework.models.apiuser/#property-value_2","title":"Property Value","text":"<p>String</p>"},{"location":"code/Database/database.entityframework.models.apiuser/#emailconfirmed","title":"EmailConfirmed","text":"<pre><code>public bool EmailConfirmed { get; set; }\n</code></pre>"},{"location":"code/Database/database.entityframework.models.apiuser/#property-value_3","title":"Property Value","text":"<p>Boolean</p>"},{"location":"code/Database/database.entityframework.models.apiuser/#id","title":"Id","text":"<pre><code>public string Id { get; set; }\n</code></pre>"},{"location":"code/Database/database.entityframework.models.apiuser/#property-value_4","title":"Property Value","text":"<p>String</p>"},{"location":"code/Database/database.entityframework.models.apiuser/#lockoutenabled","title":"LockoutEnabled","text":"<pre><code>public bool LockoutEnabled { get; set; }\n</code></pre>"},{"location":"code/Database/database.entityframework.models.apiuser/#property-value_5","title":"Property Value","text":"<p>Boolean</p>"},{"location":"code/Database/database.entityframework.models.apiuser/#lockoutend","title":"LockoutEnd","text":"<pre><code>public Nullable&lt;DateTimeOffset&gt; LockoutEnd { get; set; }\n</code></pre>"},{"location":"code/Database/database.entityframework.models.apiuser/#property-value_6","title":"Property Value","text":"<p>Nullable&lt;DateTimeOffset&gt;</p>"},{"location":"code/Database/database.entityframework.models.apiuser/#normalizedemail","title":"NormalizedEmail","text":"<pre><code>public string NormalizedEmail { get; set; }\n</code></pre>"},{"location":"code/Database/database.entityframework.models.apiuser/#property-value_7","title":"Property Value","text":"<p>String</p>"},{"location":"code/Database/database.entityframework.models.apiuser/#normalizedusername","title":"NormalizedUserName","text":"<pre><code>public string NormalizedUserName { get; set; }\n</code></pre>"},{"location":"code/Database/database.entityframework.models.apiuser/#property-value_8","title":"Property Value","text":"<p>String</p>"},{"location":"code/Database/database.entityframework.models.apiuser/#passwordhash","title":"PasswordHash","text":"<pre><code>public string PasswordHash { get; set; }\n</code></pre>"},{"location":"code/Database/database.entityframework.models.apiuser/#property-value_9","title":"Property Value","text":"<p>String</p>"},{"location":"code/Database/database.entityframework.models.apiuser/#phonenumber","title":"PhoneNumber","text":"<pre><code>public string PhoneNumber { get; set; }\n</code></pre>"},{"location":"code/Database/database.entityframework.models.apiuser/#property-value_10","title":"Property Value","text":"<p>String</p>"},{"location":"code/Database/database.entityframework.models.apiuser/#phonenumberconfirmed","title":"PhoneNumberConfirmed","text":"<pre><code>public bool PhoneNumberConfirmed { get; set; }\n</code></pre>"},{"location":"code/Database/database.entityframework.models.apiuser/#property-value_11","title":"Property Value","text":"<p>Boolean</p>"},{"location":"code/Database/database.entityframework.models.apiuser/#securitystamp","title":"SecurityStamp","text":"<pre><code>public string SecurityStamp { get; set; }\n</code></pre>"},{"location":"code/Database/database.entityframework.models.apiuser/#property-value_12","title":"Property Value","text":"<p>String</p>"},{"location":"code/Database/database.entityframework.models.apiuser/#twofactorenabled","title":"TwoFactorEnabled","text":"<pre><code>public bool TwoFactorEnabled { get; set; }\n</code></pre>"},{"location":"code/Database/database.entityframework.models.apiuser/#property-value_13","title":"Property Value","text":"<p>Boolean</p>"},{"location":"code/Database/database.entityframework.models.apiuser/#username","title":"UserName","text":"<pre><code>public string UserName { get; set; }\n</code></pre>"},{"location":"code/Database/database.entityframework.models.apiuser/#property-value_14","title":"Property Value","text":"<p>String</p>"},{"location":"code/Database/database.entityframework.models.apiuser/#constructors","title":"Constructors","text":""},{"location":"code/Database/database.entityframework.models.apiuser/#apiuser_1","title":"ApiUser()","text":"<pre><code>public ApiUser()\n</code></pre>"},{"location":"code/Database/database.entityframework.models.coordinatemapping/","title":"CoordinateMapping","text":"<p>Namespace: Database.EntityFramework.Models</p> <p>Stores geographic coordinates associated with postalcodes, including the time the mapping was used.</p> <pre><code>public class CoordinateMapping\n</code></pre> <p>Inheritance Object \u2192 CoordinateMapping</p>"},{"location":"code/Database/database.entityframework.models.coordinatemapping/#properties","title":"Properties","text":""},{"location":"code/Database/database.entityframework.models.coordinatemapping/#lastused","title":"LastUsed","text":"<p>Gets or sets the time the postalcode was last entered by the user.</p> <pre><code>public Nullable&lt;DateTime&gt; LastUsed { get; set; }\n</code></pre>"},{"location":"code/Database/database.entityframework.models.coordinatemapping/#property-value","title":"Property Value","text":"<p>Nullable&lt;DateTime&gt;</p>"},{"location":"code/Database/database.entityframework.models.coordinatemapping/#latitude","title":"Latitude","text":"<p>Gets or sets the latitude for the location.</p> <pre><code>public double Latitude { get; set; }\n</code></pre>"},{"location":"code/Database/database.entityframework.models.coordinatemapping/#property-value_1","title":"Property Value","text":"<p>Double</p>"},{"location":"code/Database/database.entityframework.models.coordinatemapping/#location","title":"Location","text":"<p>Gets or sets the name of the location.</p> <pre><code>public string Location { get; set; }\n</code></pre>"},{"location":"code/Database/database.entityframework.models.coordinatemapping/#property-value_2","title":"Property Value","text":"<p>String</p>"},{"location":"code/Database/database.entityframework.models.coordinatemapping/#lockeduntil","title":"LockedUntil","text":"<p>Gets or sets the time until which the entry is locked.</p> <pre><code>public Nullable&lt;DateTime&gt; LockedUntil { get; set; }\n</code></pre>"},{"location":"code/Database/database.entityframework.models.coordinatemapping/#property-value_3","title":"Property Value","text":"<p>Nullable&lt;DateTime&gt;</p>"},{"location":"code/Database/database.entityframework.models.coordinatemapping/#longitude","title":"Longitude","text":"<p>Gets or sets the longitude of the location.</p> <pre><code>public double Longitude { get; set; }\n</code></pre>"},{"location":"code/Database/database.entityframework.models.coordinatemapping/#property-value_4","title":"Property Value","text":"<p>Double</p>"},{"location":"code/Database/database.entityframework.models.coordinatemapping/#postalcode","title":"PostalCode","text":"<p>Gets or sets the postalcode which is also the uniqe identifier.</p> <pre><code>public int PostalCode { get; set; }\n</code></pre>"},{"location":"code/Database/database.entityframework.models.coordinatemapping/#property-value_5","title":"Property Value","text":"<p>Int32</p>"},{"location":"code/Database/database.entityframework.models.coordinatemapping/#constructors","title":"Constructors","text":""},{"location":"code/Database/database.entityframework.models.coordinatemapping/#coordinatemapping_1","title":"CoordinateMapping()","text":"<pre><code>public CoordinateMapping()\n</code></pre>"},{"location":"code/Database/database.entityframework.models.generalsetting/","title":"GeneralSetting","text":"<p>Namespace: Database.EntityFramework.Models</p> <p>Represents general application settings.</p> <pre><code>public class GeneralSetting\n</code></pre> <p>Inheritance Object \u2192 GeneralSetting</p>"},{"location":"code/Database/database.entityframework.models.generalsetting/#properties","title":"Properties","text":""},{"location":"code/Database/database.entityframework.models.generalsetting/#id","title":"Id","text":"<p>Gets or sets the unique identifier for the general setting.</p> <pre><code>public int Id { get; set; }\n</code></pre>"},{"location":"code/Database/database.entityframework.models.generalsetting/#property-value","title":"Property Value","text":"<p>Int32</p>"},{"location":"code/Database/database.entityframework.models.generalsetting/#constructors","title":"Constructors","text":""},{"location":"code/Database/database.entityframework.models.generalsetting/#generalsetting_1","title":"GeneralSetting()","text":"<pre><code>public GeneralSetting()\n</code></pre>"},{"location":"code/Database/database.entityframework.models.tokeninfo/","title":"TokenInfo","text":"<p>Namespace: Database.EntityFramework.Models</p> <p>Represents a refresh token entry for a user, including expiration and token details.</p> <pre><code>public class TokenInfo\n</code></pre> <p>Inheritance Object \u2192 TokenInfo</p>"},{"location":"code/Database/database.entityframework.models.tokeninfo/#properties","title":"Properties","text":""},{"location":"code/Database/database.entityframework.models.tokeninfo/#expiredat","title":"ExpiredAt","text":"<p>Gets or sets the expiration date and time of the refresh token.</p> <pre><code>public DateTime ExpiredAt { get; set; }\n</code></pre>"},{"location":"code/Database/database.entityframework.models.tokeninfo/#property-value","title":"Property Value","text":"<p>DateTime</p>"},{"location":"code/Database/database.entityframework.models.tokeninfo/#id","title":"Id","text":"<p>Gets or sets the unique identifier for the token entry.</p> <pre><code>public int Id { get; set; }\n</code></pre>"},{"location":"code/Database/database.entityframework.models.tokeninfo/#property-value_1","title":"Property Value","text":"<p>Int32</p>"},{"location":"code/Database/database.entityframework.models.tokeninfo/#refreshtoken","title":"RefreshToken","text":"<p>Gets or sets the refresh token string.</p> <pre><code>public string RefreshToken { get; set; }\n</code></pre>"},{"location":"code/Database/database.entityframework.models.tokeninfo/#property-value_2","title":"Property Value","text":"<p>String</p>"},{"location":"code/Database/database.entityframework.models.tokeninfo/#username","title":"Username","text":"<p>Gets or sets the username associated with the refresh token.</p> <pre><code>public string Username { get; set; }\n</code></pre>"},{"location":"code/Database/database.entityframework.models.tokeninfo/#property-value_3","title":"Property Value","text":"<p>String</p>"},{"location":"code/Database/database.entityframework.models.tokeninfo/#constructors","title":"Constructors","text":""},{"location":"code/Database/database.entityframework.models.tokeninfo/#tokeninfo_1","title":"TokenInfo()","text":"<pre><code>public TokenInfo()\n</code></pre>"},{"location":"code/Database/database.entityframework.models.topicsetting/","title":"TopicSetting","text":"<p>Namespace: Database.EntityFramework.Models</p> <p>Represents the settings for a specific MQTT topic, including default path, group, and sensor information.</p> <pre><code>public class TopicSetting\n</code></pre> <p>Inheritance Object \u2192 TopicSetting</p>"},{"location":"code/Database/database.entityframework.models.topicsetting/#properties","title":"Properties","text":""},{"location":"code/Database/database.entityframework.models.topicsetting/#defaulttopicpath","title":"DefaultTopicPath","text":"<p>Gets or sets the default MQTT topic path for this setting.</p> <pre><code>public string DefaultTopicPath { get; set; }\n</code></pre>"},{"location":"code/Database/database.entityframework.models.topicsetting/#property-value","title":"Property Value","text":"<p>String</p>"},{"location":"code/Database/database.entityframework.models.topicsetting/#groupid","title":"GroupId","text":"<p>Gets or sets the group identifier associated with this topic setting.</p> <pre><code>public int GroupId { get; set; }\n</code></pre>"},{"location":"code/Database/database.entityframework.models.topicsetting/#property-value_1","title":"Property Value","text":"<p>Int32</p>"},{"location":"code/Database/database.entityframework.models.topicsetting/#hasrecovery","title":"HasRecovery","text":"<p>Gets or sets a value indicating whether this topic setting has recovery enabled.</p> <pre><code>public bool HasRecovery { get; set; }\n</code></pre>"},{"location":"code/Database/database.entityframework.models.topicsetting/#property-value_2","title":"Property Value","text":"<p>Boolean</p>"},{"location":"code/Database/database.entityframework.models.topicsetting/#sensorlocation","title":"SensorLocation","text":"<p>Gets or sets the location of the sensor.</p> <pre><code>public string SensorLocation { get; set; }\n</code></pre>"},{"location":"code/Database/database.entityframework.models.topicsetting/#property-value_3","title":"Property Value","text":"<p>String</p>"},{"location":"code/Database/database.entityframework.models.topicsetting/#sensorname","title":"SensorName","text":"<p>Gets or sets the name of the sensor.</p> <pre><code>public string SensorName { get; set; }\n</code></pre>"},{"location":"code/Database/database.entityframework.models.topicsetting/#property-value_4","title":"Property Value","text":"<p>String</p>"},{"location":"code/Database/database.entityframework.models.topicsetting/#sensortype","title":"SensorType","text":"<p>Gets or sets the type of sensor (e.g., temperature, humidity).</p> <pre><code>public string SensorType { get; set; }\n</code></pre>"},{"location":"code/Database/database.entityframework.models.topicsetting/#property-value_5","title":"Property Value","text":"<p>String</p>"},{"location":"code/Database/database.entityframework.models.topicsetting/#topicsettingid","title":"TopicSettingId","text":"<p>Gets or sets the unique identifier for the TopicSetting entity.</p> <pre><code>public int TopicSettingId { get; set; }\n</code></pre>"},{"location":"code/Database/database.entityframework.models.topicsetting/#property-value_6","title":"Property Value","text":"<p>Int32</p>"},{"location":"code/Database/database.entityframework.models.topicsetting/#constructors","title":"Constructors","text":""},{"location":"code/Database/database.entityframework.models.topicsetting/#topicsetting_1","title":"TopicSetting()","text":"<pre><code>public TopicSetting()\n</code></pre>"},{"location":"code/Database/database.migrations.addhasrecoveryfield/","title":"AddHasRecoveryField","text":"<p>Namespace: Database.Migrations</p> <pre><code>public class AddHasRecoveryField : Microsoft.EntityFrameworkCore.Migrations.Migration\n</code></pre> <p>Inheritance Object \u2192 Migration \u2192 AddHasRecoveryField</p>"},{"location":"code/Database/database.migrations.addhasrecoveryfield/#properties","title":"Properties","text":""},{"location":"code/Database/database.migrations.addhasrecoveryfield/#activeprovider","title":"ActiveProvider","text":"<pre><code>public string ActiveProvider { get; set; }\n</code></pre>"},{"location":"code/Database/database.migrations.addhasrecoveryfield/#property-value","title":"Property Value","text":"<p>String</p>"},{"location":"code/Database/database.migrations.addhasrecoveryfield/#downoperations","title":"DownOperations","text":"<pre><code>public IReadOnlyList&lt;MigrationOperation&gt; DownOperations { get; }\n</code></pre>"},{"location":"code/Database/database.migrations.addhasrecoveryfield/#property-value_1","title":"Property Value","text":"<p>IReadOnlyList&lt;MigrationOperation&gt;</p>"},{"location":"code/Database/database.migrations.addhasrecoveryfield/#targetmodel","title":"TargetModel","text":"<pre><code>public IModel TargetModel { get; }\n</code></pre>"},{"location":"code/Database/database.migrations.addhasrecoveryfield/#property-value_2","title":"Property Value","text":"<p>IModel</p>"},{"location":"code/Database/database.migrations.addhasrecoveryfield/#upoperations","title":"UpOperations","text":"<pre><code>public IReadOnlyList&lt;MigrationOperation&gt; UpOperations { get; }\n</code></pre>"},{"location":"code/Database/database.migrations.addhasrecoveryfield/#property-value_3","title":"Property Value","text":"<p>IReadOnlyList&lt;MigrationOperation&gt;</p>"},{"location":"code/Database/database.migrations.addhasrecoveryfield/#constructors","title":"Constructors","text":""},{"location":"code/Database/database.migrations.addhasrecoveryfield/#addhasrecoveryfield_1","title":"AddHasRecoveryField()","text":"<pre><code>public AddHasRecoveryField()\n</code></pre>"},{"location":"code/Database/database.migrations.addhasrecoveryfield/#methods","title":"Methods","text":""},{"location":"code/Database/database.migrations.addhasrecoveryfield/#buildtargetmodelmodelbuilder","title":"BuildTargetModel(ModelBuilder)","text":"<pre><code>protected void BuildTargetModel(ModelBuilder modelBuilder)\n</code></pre>"},{"location":"code/Database/database.migrations.addhasrecoveryfield/#parameters","title":"Parameters","text":"<p><code>modelBuilder</code> ModelBuilder</p>"},{"location":"code/Database/database.migrations.addhasrecoveryfield/#downmigrationbuilder","title":"Down(MigrationBuilder)","text":"<pre><code>protected void Down(MigrationBuilder migrationBuilder)\n</code></pre>"},{"location":"code/Database/database.migrations.addhasrecoveryfield/#parameters_1","title":"Parameters","text":"<p><code>migrationBuilder</code> MigrationBuilder</p>"},{"location":"code/Database/database.migrations.addhasrecoveryfield/#upmigrationbuilder","title":"Up(MigrationBuilder)","text":"<pre><code>protected void Up(MigrationBuilder migrationBuilder)\n</code></pre>"},{"location":"code/Database/database.migrations.addhasrecoveryfield/#parameters_2","title":"Parameters","text":"<p><code>migrationBuilder</code> MigrationBuilder</p>"},{"location":"code/Database/database.migrations.coordinatemapping/","title":"CoordinateMapping","text":"<p>Namespace: Database.Migrations</p> <pre><code>public class CoordinateMapping : Microsoft.EntityFrameworkCore.Migrations.Migration\n</code></pre> <p>Inheritance Object \u2192 Migration \u2192 CoordinateMapping</p>"},{"location":"code/Database/database.migrations.coordinatemapping/#properties","title":"Properties","text":""},{"location":"code/Database/database.migrations.coordinatemapping/#activeprovider","title":"ActiveProvider","text":"<pre><code>public string ActiveProvider { get; set; }\n</code></pre>"},{"location":"code/Database/database.migrations.coordinatemapping/#property-value","title":"Property Value","text":"<p>String</p>"},{"location":"code/Database/database.migrations.coordinatemapping/#downoperations","title":"DownOperations","text":"<pre><code>public IReadOnlyList&lt;MigrationOperation&gt; DownOperations { get; }\n</code></pre>"},{"location":"code/Database/database.migrations.coordinatemapping/#property-value_1","title":"Property Value","text":"<p>IReadOnlyList&lt;MigrationOperation&gt;</p>"},{"location":"code/Database/database.migrations.coordinatemapping/#targetmodel","title":"TargetModel","text":"<pre><code>public IModel TargetModel { get; }\n</code></pre>"},{"location":"code/Database/database.migrations.coordinatemapping/#property-value_2","title":"Property Value","text":"<p>IModel</p>"},{"location":"code/Database/database.migrations.coordinatemapping/#upoperations","title":"UpOperations","text":"<pre><code>public IReadOnlyList&lt;MigrationOperation&gt; UpOperations { get; }\n</code></pre>"},{"location":"code/Database/database.migrations.coordinatemapping/#property-value_3","title":"Property Value","text":"<p>IReadOnlyList&lt;MigrationOperation&gt;</p>"},{"location":"code/Database/database.migrations.coordinatemapping/#constructors","title":"Constructors","text":""},{"location":"code/Database/database.migrations.coordinatemapping/#coordinatemapping_1","title":"CoordinateMapping()","text":"<pre><code>public CoordinateMapping()\n</code></pre>"},{"location":"code/Database/database.migrations.coordinatemapping/#methods","title":"Methods","text":""},{"location":"code/Database/database.migrations.coordinatemapping/#buildtargetmodelmodelbuilder","title":"BuildTargetModel(ModelBuilder)","text":"<pre><code>protected void BuildTargetModel(ModelBuilder modelBuilder)\n</code></pre>"},{"location":"code/Database/database.migrations.coordinatemapping/#parameters","title":"Parameters","text":"<p><code>modelBuilder</code> ModelBuilder</p>"},{"location":"code/Database/database.migrations.coordinatemapping/#downmigrationbuilder","title":"Down(MigrationBuilder)","text":"<pre><code>protected void Down(MigrationBuilder migrationBuilder)\n</code></pre>"},{"location":"code/Database/database.migrations.coordinatemapping/#parameters_1","title":"Parameters","text":"<p><code>migrationBuilder</code> MigrationBuilder</p>"},{"location":"code/Database/database.migrations.coordinatemapping/#upmigrationbuilder","title":"Up(MigrationBuilder)","text":"<pre><code>protected void Up(MigrationBuilder migrationBuilder)\n</code></pre>"},{"location":"code/Database/database.migrations.coordinatemapping/#parameters_2","title":"Parameters","text":"<p><code>migrationBuilder</code> MigrationBuilder</p>"},{"location":"code/Database/database.migrations.coordinatemappinglocked/","title":"CoordinateMappingLocked","text":"<p>Namespace: Database.Migrations</p> <pre><code>public class CoordinateMappingLocked : Microsoft.EntityFrameworkCore.Migrations.Migration\n</code></pre> <p>Inheritance Object \u2192 Migration \u2192 CoordinateMappingLocked</p>"},{"location":"code/Database/database.migrations.coordinatemappinglocked/#properties","title":"Properties","text":""},{"location":"code/Database/database.migrations.coordinatemappinglocked/#activeprovider","title":"ActiveProvider","text":"<pre><code>public string ActiveProvider { get; set; }\n</code></pre>"},{"location":"code/Database/database.migrations.coordinatemappinglocked/#property-value","title":"Property Value","text":"<p>String</p>"},{"location":"code/Database/database.migrations.coordinatemappinglocked/#downoperations","title":"DownOperations","text":"<pre><code>public IReadOnlyList&lt;MigrationOperation&gt; DownOperations { get; }\n</code></pre>"},{"location":"code/Database/database.migrations.coordinatemappinglocked/#property-value_1","title":"Property Value","text":"<p>IReadOnlyList&lt;MigrationOperation&gt;</p>"},{"location":"code/Database/database.migrations.coordinatemappinglocked/#targetmodel","title":"TargetModel","text":"<pre><code>public IModel TargetModel { get; }\n</code></pre>"},{"location":"code/Database/database.migrations.coordinatemappinglocked/#property-value_2","title":"Property Value","text":"<p>IModel</p>"},{"location":"code/Database/database.migrations.coordinatemappinglocked/#upoperations","title":"UpOperations","text":"<pre><code>public IReadOnlyList&lt;MigrationOperation&gt; UpOperations { get; }\n</code></pre>"},{"location":"code/Database/database.migrations.coordinatemappinglocked/#property-value_3","title":"Property Value","text":"<p>IReadOnlyList&lt;MigrationOperation&gt;</p>"},{"location":"code/Database/database.migrations.coordinatemappinglocked/#constructors","title":"Constructors","text":""},{"location":"code/Database/database.migrations.coordinatemappinglocked/#coordinatemappinglocked_1","title":"CoordinateMappingLocked()","text":"<pre><code>public CoordinateMappingLocked()\n</code></pre>"},{"location":"code/Database/database.migrations.coordinatemappinglocked/#methods","title":"Methods","text":""},{"location":"code/Database/database.migrations.coordinatemappinglocked/#buildtargetmodelmodelbuilder","title":"BuildTargetModel(ModelBuilder)","text":"<pre><code>protected void BuildTargetModel(ModelBuilder modelBuilder)\n</code></pre>"},{"location":"code/Database/database.migrations.coordinatemappinglocked/#parameters","title":"Parameters","text":"<p><code>modelBuilder</code> ModelBuilder</p>"},{"location":"code/Database/database.migrations.coordinatemappinglocked/#downmigrationbuilder","title":"Down(MigrationBuilder)","text":"<pre><code>protected void Down(MigrationBuilder migrationBuilder)\n</code></pre>"},{"location":"code/Database/database.migrations.coordinatemappinglocked/#parameters_1","title":"Parameters","text":"<p><code>migrationBuilder</code> MigrationBuilder</p>"},{"location":"code/Database/database.migrations.coordinatemappinglocked/#upmigrationbuilder","title":"Up(MigrationBuilder)","text":"<pre><code>protected void Up(MigrationBuilder migrationBuilder)\n</code></pre>"},{"location":"code/Database/database.migrations.coordinatemappinglocked/#parameters_2","title":"Parameters","text":"<p><code>migrationBuilder</code> MigrationBuilder</p>"},{"location":"code/Database/database.migrations.defaultvalue/","title":"DefaultValue","text":"<p>Namespace: Database.Migrations</p> <pre><code>public class DefaultValue : Microsoft.EntityFrameworkCore.Migrations.Migration\n</code></pre> <p>Inheritance Object \u2192 Migration \u2192 DefaultValue</p>"},{"location":"code/Database/database.migrations.defaultvalue/#properties","title":"Properties","text":""},{"location":"code/Database/database.migrations.defaultvalue/#activeprovider","title":"ActiveProvider","text":"<pre><code>public string ActiveProvider { get; set; }\n</code></pre>"},{"location":"code/Database/database.migrations.defaultvalue/#property-value","title":"Property Value","text":"<p>String</p>"},{"location":"code/Database/database.migrations.defaultvalue/#downoperations","title":"DownOperations","text":"<pre><code>public IReadOnlyList&lt;MigrationOperation&gt; DownOperations { get; }\n</code></pre>"},{"location":"code/Database/database.migrations.defaultvalue/#property-value_1","title":"Property Value","text":"<p>IReadOnlyList&lt;MigrationOperation&gt;</p>"},{"location":"code/Database/database.migrations.defaultvalue/#targetmodel","title":"TargetModel","text":"<pre><code>public IModel TargetModel { get; }\n</code></pre>"},{"location":"code/Database/database.migrations.defaultvalue/#property-value_2","title":"Property Value","text":"<p>IModel</p>"},{"location":"code/Database/database.migrations.defaultvalue/#upoperations","title":"UpOperations","text":"<pre><code>public IReadOnlyList&lt;MigrationOperation&gt; UpOperations { get; }\n</code></pre>"},{"location":"code/Database/database.migrations.defaultvalue/#property-value_3","title":"Property Value","text":"<p>IReadOnlyList&lt;MigrationOperation&gt;</p>"},{"location":"code/Database/database.migrations.defaultvalue/#constructors","title":"Constructors","text":""},{"location":"code/Database/database.migrations.defaultvalue/#defaultvalue_1","title":"DefaultValue()","text":"<pre><code>public DefaultValue()\n</code></pre>"},{"location":"code/Database/database.migrations.defaultvalue/#methods","title":"Methods","text":""},{"location":"code/Database/database.migrations.defaultvalue/#buildtargetmodelmodelbuilder","title":"BuildTargetModel(ModelBuilder)","text":"<pre><code>protected void BuildTargetModel(ModelBuilder modelBuilder)\n</code></pre>"},{"location":"code/Database/database.migrations.defaultvalue/#parameters","title":"Parameters","text":"<p><code>modelBuilder</code> ModelBuilder</p>"},{"location":"code/Database/database.migrations.defaultvalue/#downmigrationbuilder","title":"Down(MigrationBuilder)","text":"<pre><code>protected void Down(MigrationBuilder migrationBuilder)\n</code></pre>"},{"location":"code/Database/database.migrations.defaultvalue/#parameters_1","title":"Parameters","text":"<p><code>migrationBuilder</code> MigrationBuilder</p>"},{"location":"code/Database/database.migrations.defaultvalue/#upmigrationbuilder","title":"Up(MigrationBuilder)","text":"<pre><code>protected void Up(MigrationBuilder migrationBuilder)\n</code></pre>"},{"location":"code/Database/database.migrations.defaultvalue/#parameters_2","title":"Parameters","text":"<p><code>migrationBuilder</code> MigrationBuilder</p>"},{"location":"code/Database/database.migrations.init/","title":"Init","text":"<p>Namespace: Database.Migrations</p> <pre><code>public class Init : Microsoft.EntityFrameworkCore.Migrations.Migration\n</code></pre> <p>Inheritance Object \u2192 Migration \u2192 Init</p>"},{"location":"code/Database/database.migrations.init/#properties","title":"Properties","text":""},{"location":"code/Database/database.migrations.init/#activeprovider","title":"ActiveProvider","text":"<pre><code>public string ActiveProvider { get; set; }\n</code></pre>"},{"location":"code/Database/database.migrations.init/#property-value","title":"Property Value","text":"<p>String</p>"},{"location":"code/Database/database.migrations.init/#downoperations","title":"DownOperations","text":"<pre><code>public IReadOnlyList&lt;MigrationOperation&gt; DownOperations { get; }\n</code></pre>"},{"location":"code/Database/database.migrations.init/#property-value_1","title":"Property Value","text":"<p>IReadOnlyList&lt;MigrationOperation&gt;</p>"},{"location":"code/Database/database.migrations.init/#targetmodel","title":"TargetModel","text":"<pre><code>public IModel TargetModel { get; }\n</code></pre>"},{"location":"code/Database/database.migrations.init/#property-value_2","title":"Property Value","text":"<p>IModel</p>"},{"location":"code/Database/database.migrations.init/#upoperations","title":"UpOperations","text":"<pre><code>public IReadOnlyList&lt;MigrationOperation&gt; UpOperations { get; }\n</code></pre>"},{"location":"code/Database/database.migrations.init/#property-value_3","title":"Property Value","text":"<p>IReadOnlyList&lt;MigrationOperation&gt;</p>"},{"location":"code/Database/database.migrations.init/#constructors","title":"Constructors","text":""},{"location":"code/Database/database.migrations.init/#init_1","title":"Init()","text":"<pre><code>public Init()\n</code></pre>"},{"location":"code/Database/database.migrations.init/#methods","title":"Methods","text":""},{"location":"code/Database/database.migrations.init/#buildtargetmodelmodelbuilder","title":"BuildTargetModel(ModelBuilder)","text":"<pre><code>protected void BuildTargetModel(ModelBuilder modelBuilder)\n</code></pre>"},{"location":"code/Database/database.migrations.init/#parameters","title":"Parameters","text":"<p><code>modelBuilder</code> ModelBuilder</p>"},{"location":"code/Database/database.migrations.init/#downmigrationbuilder","title":"Down(MigrationBuilder)","text":"<pre><code>protected void Down(MigrationBuilder migrationBuilder)\n</code></pre>"},{"location":"code/Database/database.migrations.init/#parameters_1","title":"Parameters","text":"<p><code>migrationBuilder</code> MigrationBuilder</p>"},{"location":"code/Database/database.migrations.init/#upmigrationbuilder","title":"Up(MigrationBuilder)","text":"<pre><code>protected void Up(MigrationBuilder migrationBuilder)\n</code></pre>"},{"location":"code/Database/database.migrations.init/#parameters_2","title":"Parameters","text":"<p><code>migrationBuilder</code> MigrationBuilder</p>"},{"location":"code/Database/database.migrations.plausibilitycheck/","title":"PlausibilityCheck","text":"<p>Namespace: Database.Migrations</p> <pre><code>public class PlausibilityCheck : Microsoft.EntityFrameworkCore.Migrations.Migration\n</code></pre> <p>Inheritance Object \u2192 Migration \u2192 PlausibilityCheck</p>"},{"location":"code/Database/database.migrations.plausibilitycheck/#properties","title":"Properties","text":""},{"location":"code/Database/database.migrations.plausibilitycheck/#activeprovider","title":"ActiveProvider","text":"<pre><code>public string ActiveProvider { get; set; }\n</code></pre>"},{"location":"code/Database/database.migrations.plausibilitycheck/#property-value","title":"Property Value","text":"<p>String</p>"},{"location":"code/Database/database.migrations.plausibilitycheck/#downoperations","title":"DownOperations","text":"<pre><code>public IReadOnlyList&lt;MigrationOperation&gt; DownOperations { get; }\n</code></pre>"},{"location":"code/Database/database.migrations.plausibilitycheck/#property-value_1","title":"Property Value","text":"<p>IReadOnlyList&lt;MigrationOperation&gt;</p>"},{"location":"code/Database/database.migrations.plausibilitycheck/#targetmodel","title":"TargetModel","text":"<pre><code>public IModel TargetModel { get; }\n</code></pre>"},{"location":"code/Database/database.migrations.plausibilitycheck/#property-value_2","title":"Property Value","text":"<p>IModel</p>"},{"location":"code/Database/database.migrations.plausibilitycheck/#upoperations","title":"UpOperations","text":"<pre><code>public IReadOnlyList&lt;MigrationOperation&gt; UpOperations { get; }\n</code></pre>"},{"location":"code/Database/database.migrations.plausibilitycheck/#property-value_3","title":"Property Value","text":"<p>IReadOnlyList&lt;MigrationOperation&gt;</p>"},{"location":"code/Database/database.migrations.plausibilitycheck/#constructors","title":"Constructors","text":""},{"location":"code/Database/database.migrations.plausibilitycheck/#plausibilitycheck_1","title":"PlausibilityCheck()","text":"<pre><code>public PlausibilityCheck()\n</code></pre>"},{"location":"code/Database/database.migrations.plausibilitycheck/#methods","title":"Methods","text":""},{"location":"code/Database/database.migrations.plausibilitycheck/#buildtargetmodelmodelbuilder","title":"BuildTargetModel(ModelBuilder)","text":"<pre><code>protected void BuildTargetModel(ModelBuilder modelBuilder)\n</code></pre>"},{"location":"code/Database/database.migrations.plausibilitycheck/#parameters","title":"Parameters","text":"<p><code>modelBuilder</code> ModelBuilder</p>"},{"location":"code/Database/database.migrations.plausibilitycheck/#downmigrationbuilder","title":"Down(MigrationBuilder)","text":"<pre><code>protected void Down(MigrationBuilder migrationBuilder)\n</code></pre>"},{"location":"code/Database/database.migrations.plausibilitycheck/#parameters_1","title":"Parameters","text":"<p><code>migrationBuilder</code> MigrationBuilder</p>"},{"location":"code/Database/database.migrations.plausibilitycheck/#upmigrationbuilder","title":"Up(MigrationBuilder)","text":"<pre><code>protected void Up(MigrationBuilder migrationBuilder)\n</code></pre>"},{"location":"code/Database/database.migrations.plausibilitycheck/#parameters_2","title":"Parameters","text":"<p><code>migrationBuilder</code> MigrationBuilder</p>"},{"location":"code/Database/database.migrations.recovery/","title":"Recovery","text":"<p>Namespace: Database.Migrations</p> <pre><code>public class Recovery : Microsoft.EntityFrameworkCore.Migrations.Migration\n</code></pre> <p>Inheritance Object \u2192 Migration \u2192 Recovery</p>"},{"location":"code/Database/database.migrations.recovery/#properties","title":"Properties","text":""},{"location":"code/Database/database.migrations.recovery/#activeprovider","title":"ActiveProvider","text":"<pre><code>public string ActiveProvider { get; set; }\n</code></pre>"},{"location":"code/Database/database.migrations.recovery/#property-value","title":"Property Value","text":"<p>String</p>"},{"location":"code/Database/database.migrations.recovery/#downoperations","title":"DownOperations","text":"<pre><code>public IReadOnlyList&lt;MigrationOperation&gt; DownOperations { get; }\n</code></pre>"},{"location":"code/Database/database.migrations.recovery/#property-value_1","title":"Property Value","text":"<p>IReadOnlyList&lt;MigrationOperation&gt;</p>"},{"location":"code/Database/database.migrations.recovery/#targetmodel","title":"TargetModel","text":"<pre><code>public IModel TargetModel { get; }\n</code></pre>"},{"location":"code/Database/database.migrations.recovery/#property-value_2","title":"Property Value","text":"<p>IModel</p>"},{"location":"code/Database/database.migrations.recovery/#upoperations","title":"UpOperations","text":"<pre><code>public IReadOnlyList&lt;MigrationOperation&gt; UpOperations { get; }\n</code></pre>"},{"location":"code/Database/database.migrations.recovery/#property-value_3","title":"Property Value","text":"<p>IReadOnlyList&lt;MigrationOperation&gt;</p>"},{"location":"code/Database/database.migrations.recovery/#constructors","title":"Constructors","text":""},{"location":"code/Database/database.migrations.recovery/#recovery_1","title":"Recovery()","text":"<pre><code>public Recovery()\n</code></pre>"},{"location":"code/Database/database.migrations.recovery/#methods","title":"Methods","text":""},{"location":"code/Database/database.migrations.recovery/#buildtargetmodelmodelbuilder","title":"BuildTargetModel(ModelBuilder)","text":"<pre><code>protected void BuildTargetModel(ModelBuilder modelBuilder)\n</code></pre>"},{"location":"code/Database/database.migrations.recovery/#parameters","title":"Parameters","text":"<p><code>modelBuilder</code> ModelBuilder</p>"},{"location":"code/Database/database.migrations.recovery/#downmigrationbuilder","title":"Down(MigrationBuilder)","text":"<pre><code>protected void Down(MigrationBuilder migrationBuilder)\n</code></pre>"},{"location":"code/Database/database.migrations.recovery/#parameters_1","title":"Parameters","text":"<p><code>migrationBuilder</code> MigrationBuilder</p>"},{"location":"code/Database/database.migrations.recovery/#upmigrationbuilder","title":"Up(MigrationBuilder)","text":"<pre><code>protected void Up(MigrationBuilder migrationBuilder)\n</code></pre>"},{"location":"code/Database/database.migrations.recovery/#parameters_2","title":"Parameters","text":"<p><code>migrationBuilder</code> MigrationBuilder</p>"},{"location":"code/Database/database.repository.coordinaterepo.coordinaterepo/","title":"CoordinateRepo","text":"<p>Namespace: Database.Repository.CoordinateRepo</p> <p>Repository implementation for accessing and managing available locations.</p> <pre><code>public class CoordinateRepo : ICoordinateRepo\n</code></pre> <p>Inheritance Object \u2192 CoordinateRepo Implements ICoordinateRepo</p>"},{"location":"code/Database/database.repository.coordinaterepo.coordinaterepo/#constructors","title":"Constructors","text":""},{"location":"code/Database/database.repository.coordinaterepo.coordinaterepo/#coordinaterepoapplicationdbcontext","title":"CoordinateRepo(ApplicationDbContext)","text":"<p>Initializes a new instance of the CoordinateRepo class.</p> <pre><code>public CoordinateRepo(ApplicationDbContext applicationDbContext)\n</code></pre>"},{"location":"code/Database/database.repository.coordinaterepo.coordinaterepo/#parameters","title":"Parameters","text":"<p><code>applicationDbContext</code> ApplicationDbContext</p>"},{"location":"code/Database/database.repository.coordinaterepo.coordinaterepo/#methods","title":"Methods","text":""},{"location":"code/Database/database.repository.coordinaterepo.coordinaterepo/#deletepostalcodeint32","title":"DeletePostalCode(Int32)","text":"<pre><code>public Task DeletePostalCode(int postalcode)\n</code></pre>"},{"location":"code/Database/database.repository.coordinaterepo.coordinaterepo/#parameters_1","title":"Parameters","text":"<p><code>postalcode</code> Int32</p>"},{"location":"code/Database/database.repository.coordinaterepo.coordinaterepo/#returns","title":"Returns","text":"<p>Task</p>"},{"location":"code/Database/database.repository.coordinaterepo.coordinaterepo/#existspostalcodeint32","title":"ExistsPostalCode(Int32)","text":"<pre><code>public Task&lt;Boolean&gt; ExistsPostalCode(int postalcode)\n</code></pre>"},{"location":"code/Database/database.repository.coordinaterepo.coordinaterepo/#parameters_2","title":"Parameters","text":"<p><code>postalcode</code> Int32</p>"},{"location":"code/Database/database.repository.coordinaterepo.coordinaterepo/#returns_1","title":"Returns","text":"<p>Task&lt;Boolean&gt;</p>"},{"location":"code/Database/database.repository.coordinaterepo.coordinaterepo/#getalllocations","title":"GetAllLocations()","text":"<pre><code>public Task&lt;List&lt;Tuple&lt;Int32, String&gt;&gt;&gt; GetAllLocations()\n</code></pre>"},{"location":"code/Database/database.repository.coordinaterepo.coordinaterepo/#returns_2","title":"Returns","text":"<p>Task&lt;List&lt;Tuple&lt;Int32, String&gt;&gt;&gt;</p>"},{"location":"code/Database/database.repository.coordinaterepo.coordinaterepo/#getlocation","title":"GetLocation()","text":"<pre><code>public Task&lt;CoordinateMapping&gt; GetLocation()\n</code></pre>"},{"location":"code/Database/database.repository.coordinaterepo.coordinaterepo/#returns_3","title":"Returns","text":"<p>Task&lt;CoordinateMapping&gt;</p>"},{"location":"code/Database/database.repository.coordinaterepo.coordinaterepo/#getunlockedlocation","title":"GetUnlockedLocation()","text":"<pre><code>public Task&lt;CoordinateMapping&gt; GetUnlockedLocation()\n</code></pre>"},{"location":"code/Database/database.repository.coordinaterepo.coordinaterepo/#returns_4","title":"Returns","text":"<p>Task&lt;CoordinateMapping&gt;</p>"},{"location":"code/Database/database.repository.coordinaterepo.coordinaterepo/#insertnewpostalcodecoordinatemapping","title":"InsertNewPostalCode(CoordinateMapping)","text":"<pre><code>public Task InsertNewPostalCode(CoordinateMapping postalcodeLocation)\n</code></pre>"},{"location":"code/Database/database.repository.coordinaterepo.coordinaterepo/#parameters_3","title":"Parameters","text":"<p><code>postalcodeLocation</code> CoordinateMapping</p>"},{"location":"code/Database/database.repository.coordinaterepo.coordinaterepo/#returns_5","title":"Returns","text":"<p>Task</p>"},{"location":"code/Database/database.repository.coordinaterepo.coordinaterepo/#updatetimeint32-datetime","title":"UpdateTime(Int32, DateTime)","text":"<pre><code>public Task UpdateTime(int postalCode, DateTime newTime)\n</code></pre>"},{"location":"code/Database/database.repository.coordinaterepo.coordinaterepo/#parameters_4","title":"Parameters","text":"<p><code>postalCode</code> Int32</p> <p><code>newTime</code> DateTime</p>"},{"location":"code/Database/database.repository.coordinaterepo.coordinaterepo/#returns_6","title":"Returns","text":"<p>Task</p>"},{"location":"code/Database/database.repository.coordinaterepo.icoordinaterepo/","title":"ICoordinateRepo","text":"<p>Namespace: Database.Repository.CoordinateRepo</p> <p>Repository interface for sccessing and managing locations.</p> <pre><code>public interface ICoordinateRepo\n</code></pre>"},{"location":"code/Database/database.repository.coordinaterepo.icoordinaterepo/#methods","title":"Methods","text":""},{"location":"code/Database/database.repository.coordinaterepo.icoordinaterepo/#deletepostalcodeint32","title":"DeletePostalCode(Int32)","text":"<p>Deletes postalcode from the database.</p> <pre><code>Task DeletePostalCode(int postalCode)\n</code></pre>"},{"location":"code/Database/database.repository.coordinaterepo.icoordinaterepo/#parameters","title":"Parameters","text":"<p><code>postalCode</code> Int32 postalcode</p>"},{"location":"code/Database/database.repository.coordinaterepo.icoordinaterepo/#returns","title":"Returns","text":"<p>Task</p>"},{"location":"code/Database/database.repository.coordinaterepo.icoordinaterepo/#existspostalcodeint32","title":"ExistsPostalCode(Int32)","text":"<p>Checks if there is an entry for that opstal code in the database.</p> <pre><code>Task&lt;Boolean&gt; ExistsPostalCode(int postalcode)\n</code></pre>"},{"location":"code/Database/database.repository.coordinaterepo.icoordinaterepo/#parameters_1","title":"Parameters","text":"<p><code>postalcode</code> Int32 Defines which entry will be checked.</p>"},{"location":"code/Database/database.repository.coordinaterepo.icoordinaterepo/#returns_1","title":"Returns","text":"<p>Returns a boolean values for the existence of an entry in the database associated with the postalcode.</p>"},{"location":"code/Database/database.repository.coordinaterepo.icoordinaterepo/#getalllocations","title":"GetAllLocations()","text":"<p>Gets all postalcodes that are saved in the database.</p> <pre><code>Task&lt;List&lt;Tuple&lt;Int32, String&gt;&gt;&gt; GetAllLocations()\n</code></pre>"},{"location":"code/Database/database.repository.coordinaterepo.icoordinaterepo/#returns_2","title":"Returns","text":"<p>List with all postalcodes.</p>"},{"location":"code/Database/database.repository.coordinaterepo.icoordinaterepo/#getlocation","title":"GetLocation()","text":"<p>Retrieves the coordinates of the postalcode that was inserted last.</p> <pre><code>Task&lt;CoordinateMapping&gt; GetLocation()\n</code></pre>"},{"location":"code/Database/database.repository.coordinaterepo.icoordinaterepo/#returns_3","title":"Returns","text":"<p>Returns coordinates of the location that was last chosen by the User.</p>"},{"location":"code/Database/database.repository.coordinaterepo.icoordinaterepo/#getunlockedlocation","title":"GetUnlockedLocation()","text":"<p>Gets the next unlocked entry in CoordinateMappings and locks it for the next minute.</p> <pre><code>Task&lt;CoordinateMapping&gt; GetUnlockedLocation()\n</code></pre>"},{"location":"code/Database/database.repository.coordinaterepo.icoordinaterepo/#returns_4","title":"Returns","text":"<p>Task&lt;CoordinateMapping&gt;</p>"},{"location":"code/Database/database.repository.coordinaterepo.icoordinaterepo/#insertnewpostalcodecoordinatemapping","title":"InsertNewPostalCode(CoordinateMapping)","text":"<p>Inserts a new combination of postalcode and coordinates.</p> <pre><code>Task InsertNewPostalCode(CoordinateMapping postalCodeLocation)\n</code></pre>"},{"location":"code/Database/database.repository.coordinaterepo.icoordinaterepo/#parameters_2","title":"Parameters","text":"<p><code>postalCodeLocation</code> CoordinateMapping A CoordinateMapping instance that will be saved in the database.</p>"},{"location":"code/Database/database.repository.coordinaterepo.icoordinaterepo/#returns_5","title":"Returns","text":"<p>Task</p>"},{"location":"code/Database/database.repository.coordinaterepo.icoordinaterepo/#updatetimeint32-datetime","title":"UpdateTime(Int32, DateTime)","text":"<p>Updates the timestamp of an entry in the Coordinates Database.</p> <pre><code>Task UpdateTime(int postalcode, DateTime newTime)\n</code></pre>"},{"location":"code/Database/database.repository.coordinaterepo.icoordinaterepo/#parameters_3","title":"Parameters","text":"<p><code>postalcode</code> Int32 Defines which entry will be updated.</p> <p><code>newTime</code> DateTime Defines the new time for that entry.</p>"},{"location":"code/Database/database.repository.coordinaterepo.icoordinaterepo/#returns_6","title":"Returns","text":"<p>Task</p>"},{"location":"code/Database/database.repository.influxrepo.cachedinfluxhealthcheck/","title":"CachedInfluxHealthCheck","text":"<p>Namespace: Database.Repository.InfluxRepo</p> <p>Enhanced health check for InfluxDB connectivity and cache status.  Provides information about both InfluxDB connectivity and cached writes.</p> <pre><code>public class CachedInfluxHealthCheck : Microsoft.Extensions.Diagnostics.HealthChecks.IHealthCheck\n</code></pre> <p>Inheritance Object \u2192 CachedInfluxHealthCheck Implements IHealthCheck</p>"},{"location":"code/Database/database.repository.influxrepo.cachedinfluxhealthcheck/#constructors","title":"Constructors","text":""},{"location":"code/Database/database.repository.influxrepo.cachedinfluxhealthcheck/#cachedinfluxhealthcheckcachedinfluxrepo-iloggercachedinfluxhealthcheck","title":"CachedInfluxHealthCheck(CachedInfluxRepo, ILogger&lt;CachedInfluxHealthCheck&gt;)","text":"<p>Constructor for the CachedInfluxHealthCheck class.</p> <pre><code>public CachedInfluxHealthCheck(CachedInfluxRepo cachedInfluxRepo, ILogger&lt;CachedInfluxHealthCheck&gt; logger)\n</code></pre>"},{"location":"code/Database/database.repository.influxrepo.cachedinfluxhealthcheck/#parameters","title":"Parameters","text":"<p><code>cachedInfluxRepo</code> CachedInfluxRepo The cached InfluxDB repository.</p> <p><code>logger</code> ILogger&lt;CachedInfluxHealthCheck&gt; The logger instance.</p>"},{"location":"code/Database/database.repository.influxrepo.cachedinfluxhealthcheck/#methods","title":"Methods","text":""},{"location":"code/Database/database.repository.influxrepo.cachedinfluxhealthcheck/#checkhealthasynchealthcheckcontext-cancellationtoken","title":"CheckHealthAsync(HealthCheckContext, CancellationToken)","text":"<p>Checks the health of the InfluxDB connection and cache status.</p> <pre><code>public Task&lt;HealthCheckResult&gt; CheckHealthAsync(HealthCheckContext context, CancellationToken cancellationToken)\n</code></pre>"},{"location":"code/Database/database.repository.influxrepo.cachedinfluxhealthcheck/#parameters_1","title":"Parameters","text":"<p><code>context</code> HealthCheckContext The health check context.</p> <p><code>cancellationToken</code> CancellationToken The cancellation token.</p>"},{"location":"code/Database/database.repository.influxrepo.cachedinfluxhealthcheck/#returns","title":"Returns","text":"<p>A health check result indicating the status of InfluxDB and cache.</p>"},{"location":"code/Database/database.repository.influxrepo.cachedinfluxrepo/","title":"CachedInfluxRepo","text":"<p>Namespace: Database.Repository.InfluxRepo</p> <p>Cached implementation of InfluxDB repository that buffers writes when InfluxDB is unavailable.  Decorates the base InfluxRepo with write-through caching for data resilience.</p> <pre><code>public class CachedInfluxRepo : IInfluxRepo\n</code></pre> <p>Inheritance Object \u2192 CachedInfluxRepo Implements IInfluxRepo</p>"},{"location":"code/Database/database.repository.influxrepo.cachedinfluxrepo/#constructors","title":"Constructors","text":""},{"location":"code/Database/database.repository.influxrepo.cachedinfluxrepo/#cachedinfluxrepoiconfiguration-imemorycache-iloggercachedinfluxrepo","title":"CachedInfluxRepo(IConfiguration, IMemoryCache, ILogger&lt;CachedInfluxRepo&gt;)","text":"<p>Constructor for the CachedInfluxRepo class.</p> <pre><code>public CachedInfluxRepo(IConfiguration configuration, IMemoryCache memoryCache, ILogger&lt;CachedInfluxRepo&gt; logger)\n</code></pre>"},{"location":"code/Database/database.repository.influxrepo.cachedinfluxrepo/#parameters","title":"Parameters","text":"<p><code>configuration</code> IConfiguration Configuration for InfluxDB connection</p> <p><code>memoryCache</code> IMemoryCache Memory cache for buffering failed writes</p> <p><code>logger</code> ILogger&lt;CachedInfluxRepo&gt; Logger instance</p>"},{"location":"code/Database/database.repository.influxrepo.cachedinfluxrepo/#exceptions","title":"Exceptions","text":"<p>ArgumentException Thrown when InfluxDB configuration is missing</p>"},{"location":"code/Database/database.repository.influxrepo.cachedinfluxrepo/#methods","title":"Methods","text":""},{"location":"code/Database/database.repository.influxrepo.cachedinfluxrepo/#getcachedpoints","title":"GetCachedPoints()","text":"<p>Gets all cached PointData objects that failed to write to InfluxDB.  Used by background service for retry operations.</p> <pre><code>public Dictionary&lt;Object, PointData&gt; GetCachedPoints()\n</code></pre>"},{"location":"code/Database/database.repository.influxrepo.cachedinfluxrepo/#returns","title":"Returns","text":"<p>Dictionary of cache keys and their corresponding PointData objects</p>"},{"location":"code/Database/database.repository.influxrepo.cachedinfluxrepo/#getoutsideweatherdatadatetime-datetime-string","title":"GetOutsideWeatherData(DateTime, DateTime, String)","text":"<pre><code>public IAsyncEnumerable&lt;Object[]&gt; GetOutsideWeatherData(DateTime start, DateTime end, string place)\n</code></pre>"},{"location":"code/Database/database.repository.influxrepo.cachedinfluxrepo/#parameters_1","title":"Parameters","text":"<p><code>start</code> DateTime</p> <p><code>end</code> DateTime</p> <p><code>place</code> String</p>"},{"location":"code/Database/database.repository.influxrepo.cachedinfluxrepo/#returns_1","title":"Returns","text":"<p>IAsyncEnumerable&lt;Object[]&gt;</p>"},{"location":"code/Database/database.repository.influxrepo.cachedinfluxrepo/#getsensorweatherdatadatetime-datetime-string","title":"GetSensorWeatherData(DateTime, DateTime, String)","text":"<pre><code>public IAsyncEnumerable&lt;Object[]&gt; GetSensorWeatherData(DateTime start, DateTime end, string sensor)\n</code></pre>"},{"location":"code/Database/database.repository.influxrepo.cachedinfluxrepo/#parameters_2","title":"Parameters","text":"<p><code>start</code> DateTime</p> <p><code>end</code> DateTime</p> <p><code>sensor</code> String</p>"},{"location":"code/Database/database.repository.influxrepo.cachedinfluxrepo/#returns_2","title":"Returns","text":"<p>IAsyncEnumerable&lt;Object[]&gt;</p>"},{"location":"code/Database/database.repository.influxrepo.cachedinfluxrepo/#removecachedpointobject","title":"RemoveCachedPoint(Object)","text":"<p>Removes a cached point after successful retry.</p> <pre><code>public void RemoveCachedPoint(object cacheKey)\n</code></pre>"},{"location":"code/Database/database.repository.influxrepo.cachedinfluxrepo/#parameters_3","title":"Parameters","text":"<p><code>cacheKey</code> Object The cache key to remove</p>"},{"location":"code/Database/database.repository.influxrepo.cachedinfluxrepo/#writeoutsideweatherdatastring-string-double-datetime-int32","title":"WriteOutsideWeatherData(String, String, Double, DateTime, Int32)","text":"<pre><code>public Task WriteOutsideWeatherData(string place, string website, double temperature, DateTime timestamp, int postalcode)\n</code></pre>"},{"location":"code/Database/database.repository.influxrepo.cachedinfluxrepo/#parameters_4","title":"Parameters","text":"<p><code>place</code> String</p> <p><code>website</code> String</p> <p><code>temperature</code> Double</p> <p><code>timestamp</code> DateTime</p> <p><code>postalcode</code> Int32</p>"},{"location":"code/Database/database.repository.influxrepo.cachedinfluxrepo/#returns_3","title":"Returns","text":"<p>Task</p>"},{"location":"code/Database/database.repository.influxrepo.cachedinfluxrepo/#writesensordatadouble-string-int64-int32","title":"WriteSensorData(Double, String, Int64, Int32)","text":"<pre><code>public Task WriteSensorData(double measurement, string sensor, long timestamp, int sequence)\n</code></pre>"},{"location":"code/Database/database.repository.influxrepo.cachedinfluxrepo/#parameters_5","title":"Parameters","text":"<p><code>measurement</code> Double</p> <p><code>sensor</code> String</p> <p><code>timestamp</code> Int64</p> <p><code>sequence</code> Int32</p>"},{"location":"code/Database/database.repository.influxrepo.cachedinfluxrepo/#returns_4","title":"Returns","text":"<p>Task</p>"},{"location":"code/Database/database.repository.influxrepo.cachedinfluxrepo/#writeuptimestring-int64","title":"WriteUptime(String, Int64)","text":"<pre><code>public Task WriteUptime(string sensor, long timestamp)\n</code></pre>"},{"location":"code/Database/database.repository.influxrepo.cachedinfluxrepo/#parameters_6","title":"Parameters","text":"<p><code>sensor</code> String</p> <p><code>timestamp</code> Int64</p>"},{"location":"code/Database/database.repository.influxrepo.cachedinfluxrepo/#returns_5","title":"Returns","text":"<p>Task</p>"},{"location":"code/Database/database.repository.influxrepo.iinfluxrepo/","title":"IInfluxRepo","text":"<p>Namespace: Database.Repository.InfluxRepo</p> <p>Interface for the InfluxDB repository.</p> <pre><code>public interface IInfluxRepo\n</code></pre>"},{"location":"code/Database/database.repository.influxrepo.iinfluxrepo/#methods","title":"Methods","text":""},{"location":"code/Database/database.repository.influxrepo.iinfluxrepo/#getoutsideweatherdatadatetime-datetime-string","title":"GetOutsideWeatherData(DateTime, DateTime, String)","text":"<p>Retrieves outside weather data for a given place and time range.</p> <pre><code>IAsyncEnumerable&lt;Object[]&gt; GetOutsideWeatherData(DateTime start, DateTime end, string place)\n</code></pre>"},{"location":"code/Database/database.repository.influxrepo.iinfluxrepo/#parameters","title":"Parameters","text":"<p><code>start</code> DateTime The start of the time range.</p> <p><code>end</code> DateTime The end of the time range.</p> <p><code>place</code> String The location for which to retrieve data.</p>"},{"location":"code/Database/database.repository.influxrepo.iinfluxrepo/#returns","title":"Returns","text":"<p>An async enumerable of weather data points.</p>"},{"location":"code/Database/database.repository.influxrepo.iinfluxrepo/#getsensorweatherdatadatetime-datetime-string","title":"GetSensorWeatherData(DateTime, DateTime, String)","text":"<p>Retrieves sensor weather data for a given time range.</p> <pre><code>IAsyncEnumerable&lt;Object[]&gt; GetSensorWeatherData(DateTime start, DateTime end, string sensor)\n</code></pre>"},{"location":"code/Database/database.repository.influxrepo.iinfluxrepo/#parameters_1","title":"Parameters","text":"<p><code>start</code> DateTime The start of the time range.</p> <p><code>end</code> DateTime The end of the time range.</p> <p><code>sensor</code> String</p>"},{"location":"code/Database/database.repository.influxrepo.iinfluxrepo/#returns_1","title":"Returns","text":"<p>An async enumerable of sensor weather data points.</p>"},{"location":"code/Database/database.repository.influxrepo.iinfluxrepo/#writeoutsideweatherdatastring-string-double-datetime-int32","title":"WriteOutsideWeatherData(String, String, Double, DateTime, Int32)","text":"<p>Generates a point in the InfluxDB database with the given outside weather data.</p> <pre><code>Task WriteOutsideWeatherData(string place, string website, double temperature, DateTime timestamp, int postalcode)\n</code></pre>"},{"location":"code/Database/database.repository.influxrepo.iinfluxrepo/#parameters_2","title":"Parameters","text":"<p><code>place</code> String</p> <p><code>website</code> String</p> <p><code>temperature</code> Double</p> <p><code>timestamp</code> DateTime</p> <p><code>postalcode</code> Int32</p>"},{"location":"code/Database/database.repository.influxrepo.iinfluxrepo/#returns_2","title":"Returns","text":"<p>Task</p>"},{"location":"code/Database/database.repository.influxrepo.iinfluxrepo/#writesensordatadouble-string-int64-int32","title":"WriteSensorData(Double, String, Int64, Int32)","text":"<p>Generates a point in the InfluxDB database with the given sensor data for the temperature measurement.</p> <pre><code>Task WriteSensorData(double measurement, string sensor, long timestamp, int sequence)\n</code></pre>"},{"location":"code/Database/database.repository.influxrepo.iinfluxrepo/#parameters_3","title":"Parameters","text":"<p><code>measurement</code> Double Temperature Value</p> <p><code>sensor</code> String SensorId</p> <p><code>timestamp</code> Int64 Unix Timestamp</p> <p><code>sequence</code> Int32</p>"},{"location":"code/Database/database.repository.influxrepo.iinfluxrepo/#returns_3","title":"Returns","text":"<p>Task</p>"},{"location":"code/Database/database.repository.influxrepo.iinfluxrepo/#writeuptimestring-int64","title":"WriteUptime(String, Int64)","text":"<pre><code>Task WriteUptime(string sensor, long timestamp)\n</code></pre>"},{"location":"code/Database/database.repository.influxrepo.iinfluxrepo/#parameters_4","title":"Parameters","text":"<p><code>sensor</code> String</p> <p><code>timestamp</code> Int64</p>"},{"location":"code/Database/database.repository.influxrepo.iinfluxrepo/#returns_4","title":"Returns","text":"<p>Task</p>"},{"location":"code/Database/database.repository.influxrepo.influxhealthcheck/","title":"InfluxHealthCheck","text":"<p>Namespace: Database.Repository.InfluxRepo</p> <p>Health check for InfluxDB connectivity.</p> <pre><code>public class InfluxHealthCheck : Microsoft.Extensions.Diagnostics.HealthChecks.IHealthCheck\n</code></pre> <p>Inheritance Object \u2192 InfluxHealthCheck Implements IHealthCheck</p>"},{"location":"code/Database/database.repository.influxrepo.influxhealthcheck/#constructors","title":"Constructors","text":""},{"location":"code/Database/database.repository.influxrepo.influxhealthcheck/#influxhealthcheckiinfluxrepo-iloggerinfluxhealthcheck","title":"InfluxHealthCheck(IInfluxRepo, ILogger&lt;InfluxHealthCheck&gt;)","text":"<p>Constructor for the InfluxHealthCheck class.</p> <pre><code>public InfluxHealthCheck(IInfluxRepo influxRepo, ILogger&lt;InfluxHealthCheck&gt; logger)\n</code></pre>"},{"location":"code/Database/database.repository.influxrepo.influxhealthcheck/#parameters","title":"Parameters","text":"<p><code>influxRepo</code> IInfluxRepo The InfluxDB repository.</p> <p><code>logger</code> ILogger&lt;InfluxHealthCheck&gt; The logger instance.</p>"},{"location":"code/Database/database.repository.influxrepo.influxhealthcheck/#methods","title":"Methods","text":""},{"location":"code/Database/database.repository.influxrepo.influxhealthcheck/#checkhealthasynchealthcheckcontext-cancellationtoken","title":"CheckHealthAsync(HealthCheckContext, CancellationToken)","text":"<p>Checks the health of the InfluxDB connection.</p> <pre><code>public Task&lt;HealthCheckResult&gt; CheckHealthAsync(HealthCheckContext context, CancellationToken cancellationToken)\n</code></pre>"},{"location":"code/Database/database.repository.influxrepo.influxhealthcheck/#parameters_1","title":"Parameters","text":"<p><code>context</code> HealthCheckContext The health check context.</p> <p><code>cancellationToken</code> CancellationToken The cancellation token.</p>"},{"location":"code/Database/database.repository.influxrepo.influxhealthcheck/#returns","title":"Returns","text":"<p>A health check result indicating the status of InfluxDB.</p>"},{"location":"code/Database/database.repository.influxrepo.influxrepo/","title":"InfluxRepo","text":"<p>Namespace: Database.Repository.InfluxRepo</p> <pre><code>public class InfluxRepo : IInfluxRepo\n</code></pre> <p>Inheritance Object \u2192 InfluxRepo Implements IInfluxRepo</p>"},{"location":"code/Database/database.repository.influxrepo.influxrepo/#constructors","title":"Constructors","text":""},{"location":"code/Database/database.repository.influxrepo.influxrepo/#influxrepoiconfiguration-iloggerinfluxrepo","title":"InfluxRepo(IConfiguration, ILogger&lt;InfluxRepo&gt;)","text":"<p>Constructor for the InfluxRepo class.</p> <pre><code>public InfluxRepo(IConfiguration configuration, ILogger&lt;InfluxRepo&gt; logger)\n</code></pre>"},{"location":"code/Database/database.repository.influxrepo.influxrepo/#parameters","title":"Parameters","text":"<p><code>configuration</code> IConfiguration</p> <p><code>logger</code> ILogger&lt;InfluxRepo&gt;</p>"},{"location":"code/Database/database.repository.influxrepo.influxrepo/#exceptions","title":"Exceptions","text":"<p>ArgumentException</p>"},{"location":"code/Database/database.repository.influxrepo.influxrepo/#methods","title":"Methods","text":""},{"location":"code/Database/database.repository.influxrepo.influxrepo/#getoutsideweatherdatadatetime-datetime-string","title":"GetOutsideWeatherData(DateTime, DateTime, String)","text":"<pre><code>public IAsyncEnumerable&lt;Object[]&gt; GetOutsideWeatherData(DateTime start, DateTime end, string place)\n</code></pre>"},{"location":"code/Database/database.repository.influxrepo.influxrepo/#parameters_1","title":"Parameters","text":"<p><code>start</code> DateTime</p> <p><code>end</code> DateTime</p> <p><code>place</code> String</p>"},{"location":"code/Database/database.repository.influxrepo.influxrepo/#returns","title":"Returns","text":"<p>IAsyncEnumerable&lt;Object[]&gt;</p>"},{"location":"code/Database/database.repository.influxrepo.influxrepo/#getsensorweatherdatadatetime-datetime-string","title":"GetSensorWeatherData(DateTime, DateTime, String)","text":"<pre><code>public IAsyncEnumerable&lt;Object[]&gt; GetSensorWeatherData(DateTime start, DateTime end, string sensor)\n</code></pre>"},{"location":"code/Database/database.repository.influxrepo.influxrepo/#parameters_2","title":"Parameters","text":"<p><code>start</code> DateTime</p> <p><code>end</code> DateTime</p> <p><code>sensor</code> String</p>"},{"location":"code/Database/database.repository.influxrepo.influxrepo/#returns_1","title":"Returns","text":"<p>IAsyncEnumerable&lt;Object[]&gt;</p>"},{"location":"code/Database/database.repository.influxrepo.influxrepo/#getuptimestring","title":"GetUptime(String)","text":"<pre><code>public IAsyncEnumerable&lt;PointDataValues&gt; GetUptime(string sensor)\n</code></pre>"},{"location":"code/Database/database.repository.influxrepo.influxrepo/#parameters_3","title":"Parameters","text":"<p><code>sensor</code> String</p>"},{"location":"code/Database/database.repository.influxrepo.influxrepo/#returns_2","title":"Returns","text":"<p>IAsyncEnumerable&lt;PointDataValues&gt;</p>"},{"location":"code/Database/database.repository.influxrepo.influxrepo/#writeoutsideweatherdatastring-string-double-datetime-int32","title":"WriteOutsideWeatherData(String, String, Double, DateTime, Int32)","text":"<pre><code>public Task WriteOutsideWeatherData(string place, string website, double temperature, DateTime timestamp, int postalcode)\n</code></pre>"},{"location":"code/Database/database.repository.influxrepo.influxrepo/#parameters_4","title":"Parameters","text":"<p><code>place</code> String</p> <p><code>website</code> String</p> <p><code>temperature</code> Double</p> <p><code>timestamp</code> DateTime</p> <p><code>postalcode</code> Int32</p>"},{"location":"code/Database/database.repository.influxrepo.influxrepo/#returns_3","title":"Returns","text":"<p>Task</p>"},{"location":"code/Database/database.repository.influxrepo.influxrepo/#writesensordatadouble-string-int64-int32","title":"WriteSensorData(Double, String, Int64, Int32)","text":"<pre><code>public Task WriteSensorData(double measurement, string sensor, long timestamp, int sequence)\n</code></pre>"},{"location":"code/Database/database.repository.influxrepo.influxrepo/#parameters_5","title":"Parameters","text":"<p><code>measurement</code> Double</p> <p><code>sensor</code> String</p> <p><code>timestamp</code> Int64</p> <p><code>sequence</code> Int32</p>"},{"location":"code/Database/database.repository.influxrepo.influxrepo/#returns_4","title":"Returns","text":"<p>Task</p>"},{"location":"code/Database/database.repository.influxrepo.influxrepo/#writeuptimestring-int64","title":"WriteUptime(String, Int64)","text":"<pre><code>public Task WriteUptime(string sensor, long timestamp)\n</code></pre>"},{"location":"code/Database/database.repository.influxrepo.influxrepo/#parameters_6","title":"Parameters","text":"<p><code>sensor</code> String</p> <p><code>timestamp</code> Int64</p>"},{"location":"code/Database/database.repository.influxrepo.influxrepo/#returns_5","title":"Returns","text":"<p>Task</p>"},{"location":"code/Database/database.repository.influxrepo.influxretryservice/","title":"InfluxRetryService","text":"<p>Namespace: Database.Repository.InfluxRepo</p> <p>Background service that periodically retries failed InfluxDB writes from the memory cache.  Runs every 5 minutes to attempt flushing cached PointData objects to InfluxDB.</p> <pre><code>public class InfluxRetryService : Microsoft.Extensions.Hosting.BackgroundService, Microsoft.Extensions.Hosting.IHostedService, System.IDisposable\n</code></pre> <p>Inheritance Object \u2192 BackgroundService \u2192 InfluxRetryService Implements IHostedService, IDisposable</p>"},{"location":"code/Database/database.repository.influxrepo.influxretryservice/#properties","title":"Properties","text":""},{"location":"code/Database/database.repository.influxrepo.influxretryservice/#executetask","title":"ExecuteTask","text":"<pre><code>public Task ExecuteTask { get; }\n</code></pre>"},{"location":"code/Database/database.repository.influxrepo.influxretryservice/#property-value","title":"Property Value","text":"<p>Task</p>"},{"location":"code/Database/database.repository.influxrepo.influxretryservice/#constructors","title":"Constructors","text":""},{"location":"code/Database/database.repository.influxrepo.influxretryservice/#influxretryserviceiservicescopefactory-iloggerinfluxretryservice","title":"InfluxRetryService(IServiceScopeFactory, ILogger&lt;InfluxRetryService&gt;)","text":"<p>Constructor for the InfluxRetryService.</p> <pre><code>public InfluxRetryService(IServiceScopeFactory serviceScopeFactory, ILogger&lt;InfluxRetryService&gt; logger)\n</code></pre>"},{"location":"code/Database/database.repository.influxrepo.influxretryservice/#parameters","title":"Parameters","text":"<p><code>serviceScopeFactory</code> IServiceScopeFactory Factory for creating service scopes</p> <p><code>logger</code> ILogger&lt;InfluxRetryService&gt; Logger instance</p>"},{"location":"code/Database/database.repository.influxrepo.influxretryservice/#methods","title":"Methods","text":""},{"location":"code/Database/database.repository.influxrepo.influxretryservice/#executeasynccancellationtoken","title":"ExecuteAsync(CancellationToken)","text":"<p>Main execution loop for the background service.</p> <pre><code>protected Task ExecuteAsync(CancellationToken stoppingToken)\n</code></pre>"},{"location":"code/Database/database.repository.influxrepo.influxretryservice/#parameters_1","title":"Parameters","text":"<p><code>stoppingToken</code> CancellationToken Cancellation token</p>"},{"location":"code/Database/database.repository.influxrepo.influxretryservice/#returns","title":"Returns","text":"<p>Task</p>"},{"location":"code/Database/database.repository.settingsrepo.isettingsrepo/","title":"ISettingsRepo","text":"<p>Namespace: Database.Repository.SettingsRepo</p> <p>Repository interface for accessing and managing topic settings.</p> <pre><code>public interface ISettingsRepo\n</code></pre>"},{"location":"code/Database/database.repository.settingsrepo.isettingsrepo/#methods","title":"Methods","text":""},{"location":"code/Database/database.repository.settingsrepo.isettingsrepo/#addtopicsettingasynctopicsetting","title":"AddTopicSettingAsync(TopicSetting)","text":"<p>Asynchronously adds a new topic setting to the repository.</p> <pre><code>Task&lt;Int32&gt; AddTopicSettingAsync(TopicSetting topicSetting)\n</code></pre>"},{"location":"code/Database/database.repository.settingsrepo.isettingsrepo/#parameters","title":"Parameters","text":"<p><code>topicSetting</code> TopicSetting The topic setting to add to the repository.</p>"},{"location":"code/Database/database.repository.settingsrepo.isettingsrepo/#returns","title":"Returns","text":"<p>A task that represents the asynchronous operation. The task result contains the number of entities affected by the operation.</p>"},{"location":"code/Database/database.repository.settingsrepo.isettingsrepo/#exceptions","title":"Exceptions","text":"<p>ArgumentNullException Thrown when topicSetting is null.</p> <p>InvalidOperationException Thrown when the add operation fails.</p>"},{"location":"code/Database/database.repository.settingsrepo.isettingsrepo/#gettopicsettingsasync","title":"GetTopicSettingsAsync()","text":"<p>Asynchronously retrieves a list of all topic settings.</p> <pre><code>Task&lt;List&lt;TopicSetting&gt;&gt; GetTopicSettingsAsync()\n</code></pre>"},{"location":"code/Database/database.repository.settingsrepo.isettingsrepo/#returns_1","title":"Returns","text":"<p>A task that represents the asynchronous operation. The task result contains a list of TopicSetting objects.</p>"},{"location":"code/Database/database.repository.settingsrepo.isettingsrepo/#removetopicsettingasynctopicsetting","title":"RemoveTopicSettingAsync(TopicSetting)","text":"<p>Asynchronously removes a topic setting</p> <pre><code>Task&lt;Int32&gt; RemoveTopicSettingAsync(TopicSetting topicSetting)\n</code></pre>"},{"location":"code/Database/database.repository.settingsrepo.isettingsrepo/#parameters_1","title":"Parameters","text":"<p><code>topicSetting</code> TopicSetting The topic setting to remove</p>"},{"location":"code/Database/database.repository.settingsrepo.isettingsrepo/#returns_2","title":"Returns","text":"<p>A task that represents the asynchronous operation. The task result contains the number of entities affected by the operation.</p>"},{"location":"code/Database/database.repository.settingsrepo.isettingsrepo/#exceptions_1","title":"Exceptions","text":"<p>ArgumentNullException Thrown when topicSetting is null.</p> <p>InvalidOperationException Thrown when the add operation fails.</p>"},{"location":"code/Database/database.repository.settingsrepo.isettingsrepo/#updatetopicsettingasynctopicsetting","title":"UpdateTopicSettingAsync(TopicSetting)","text":"<p>Asynchronously updates a topic setting</p> <pre><code>Task&lt;Int32&gt; UpdateTopicSettingAsync(TopicSetting topicSetting)\n</code></pre>"},{"location":"code/Database/database.repository.settingsrepo.isettingsrepo/#parameters_2","title":"Parameters","text":"<p><code>topicSetting</code> TopicSetting The topic setting to update</p>"},{"location":"code/Database/database.repository.settingsrepo.isettingsrepo/#returns_3","title":"Returns","text":"<p>A task that represents the asynchronous operation. The task result contains the number of entities affected by the operation.</p>"},{"location":"code/Database/database.repository.settingsrepo.isettingsrepo/#exceptions_2","title":"Exceptions","text":"<p>ArgumentNullException Thrown when topicSetting is null.</p> <p>InvalidOperationException Thrown when the add operation fails.</p>"},{"location":"code/Database/database.repository.settingsrepo.settingsrepo/","title":"SettingsRepo","text":"<p>Namespace: Database.Repository.SettingsRepo</p> <p>Repository implementation for accessing and managing topic settings in the database.</p> <pre><code>public class SettingsRepo : ISettingsRepo\n</code></pre> <p>Inheritance Object \u2192 SettingsRepo Implements ISettingsRepo</p>"},{"location":"code/Database/database.repository.settingsrepo.settingsrepo/#constructors","title":"Constructors","text":""},{"location":"code/Database/database.repository.settingsrepo.settingsrepo/#settingsrepoapplicationdbcontext","title":"SettingsRepo(ApplicationDbContext)","text":"<p>Initializes a new instance of the SettingsRepo class with the specified settings context.</p> <pre><code>public SettingsRepo(ApplicationDbContext applicationDbContext)\n</code></pre>"},{"location":"code/Database/database.repository.settingsrepo.settingsrepo/#parameters","title":"Parameters","text":"<p><code>applicationDbContext</code> ApplicationDbContext The database context for settings.</p>"},{"location":"code/Database/database.repository.settingsrepo.settingsrepo/#methods","title":"Methods","text":""},{"location":"code/Database/database.repository.settingsrepo.settingsrepo/#addtopicsettingasynctopicsetting","title":"AddTopicSettingAsync(TopicSetting)","text":"<pre><code>public Task&lt;Int32&gt; AddTopicSettingAsync(TopicSetting topicSetting)\n</code></pre>"},{"location":"code/Database/database.repository.settingsrepo.settingsrepo/#parameters_1","title":"Parameters","text":"<p><code>topicSetting</code> TopicSetting</p>"},{"location":"code/Database/database.repository.settingsrepo.settingsrepo/#returns","title":"Returns","text":"<p>Task&lt;Int32&gt;</p>"},{"location":"code/Database/database.repository.settingsrepo.settingsrepo/#gettopicsettingsasync","title":"GetTopicSettingsAsync()","text":"<pre><code>public Task&lt;List&lt;TopicSetting&gt;&gt; GetTopicSettingsAsync()\n</code></pre>"},{"location":"code/Database/database.repository.settingsrepo.settingsrepo/#returns_1","title":"Returns","text":"<p>Task&lt;List&lt;TopicSetting&gt;&gt;</p>"},{"location":"code/Database/database.repository.settingsrepo.settingsrepo/#removetopicsettingasynctopicsetting","title":"RemoveTopicSettingAsync(TopicSetting)","text":"<pre><code>public Task&lt;Int32&gt; RemoveTopicSettingAsync(TopicSetting topicSetting)\n</code></pre>"},{"location":"code/Database/database.repository.settingsrepo.settingsrepo/#parameters_2","title":"Parameters","text":"<p><code>topicSetting</code> TopicSetting</p>"},{"location":"code/Database/database.repository.settingsrepo.settingsrepo/#returns_2","title":"Returns","text":"<p>Task&lt;Int32&gt;</p>"},{"location":"code/Database/database.repository.settingsrepo.settingsrepo/#updatetopicsettingasynctopicsetting","title":"UpdateTopicSettingAsync(TopicSetting)","text":"<pre><code>public Task&lt;Int32&gt; UpdateTopicSettingAsync(TopicSetting topicSetting)\n</code></pre>"},{"location":"code/Database/database.repository.settingsrepo.settingsrepo/#parameters_3","title":"Parameters","text":"<p><code>topicSetting</code> TopicSetting</p>"},{"location":"code/Database/database.repository.settingsrepo.settingsrepo/#returns_3","title":"Returns","text":"<p>Task&lt;Int32&gt;</p>"},{"location":"code/Database/database.repository.tokenrepo.itokenrepo/","title":"ITokenRepo","text":"<p>Namespace: Database.Repository.TokenRepo</p> <p>Repository interface for managing TokenInfo entities.</p> <pre><code>public interface ITokenRepo\n</code></pre>"},{"location":"code/Database/database.repository.tokenrepo.itokenrepo/#methods","title":"Methods","text":""},{"location":"code/Database/database.repository.tokenrepo.itokenrepo/#addtokeninfoasynctokeninfo","title":"AddTokenInfoAsync(TokenInfo)","text":"<p>Adds a new token info.</p> <pre><code>Task AddTokenInfoAsync(TokenInfo tokenInfo)\n</code></pre>"},{"location":"code/Database/database.repository.tokenrepo.itokenrepo/#parameters","title":"Parameters","text":"<p><code>tokenInfo</code> TokenInfo The token info to add.</p>"},{"location":"code/Database/database.repository.tokenrepo.itokenrepo/#returns","title":"Returns","text":"<p>A task representing the asynchronous operation.</p>"},{"location":"code/Database/database.repository.tokenrepo.itokenrepo/#gettokeninfobyrefreshtokenasyncstring","title":"GetTokenInfoByRefreshTokenAsync(String)","text":"<p>Gets a token info by refresh token.</p> <pre><code>Task&lt;TokenInfo&gt; GetTokenInfoByRefreshTokenAsync(string refreshToken)\n</code></pre>"},{"location":"code/Database/database.repository.tokenrepo.itokenrepo/#parameters_1","title":"Parameters","text":"<p><code>refreshToken</code> String The refresh token to search for.</p>"},{"location":"code/Database/database.repository.tokenrepo.itokenrepo/#returns_1","title":"Returns","text":"<p>The token info if found; otherwise, null.</p>"},{"location":"code/Database/database.repository.tokenrepo.itokenrepo/#gettokeninfobyusernameasyncstring","title":"GetTokenInfoByUsernameAsync(String)","text":"<p>Gets a token info by username.</p> <pre><code>Task&lt;TokenInfo&gt; GetTokenInfoByUsernameAsync(string username)\n</code></pre>"},{"location":"code/Database/database.repository.tokenrepo.itokenrepo/#parameters_2","title":"Parameters","text":"<p><code>username</code> String The username to search for.</p>"},{"location":"code/Database/database.repository.tokenrepo.itokenrepo/#returns_2","title":"Returns","text":"<p>The token info if found; otherwise, null.</p>"},{"location":"code/Database/database.repository.tokenrepo.itokenrepo/#gettokeninfobyusernamesyncstring","title":"GetTokenInfoByUsernameSync(String)","text":"<p>Gets the first token info for a user by username.</p> <pre><code>TokenInfo GetTokenInfoByUsernameSync(string username)\n</code></pre>"},{"location":"code/Database/database.repository.tokenrepo.itokenrepo/#parameters_3","title":"Parameters","text":"<p><code>username</code> String The username to search for.</p>"},{"location":"code/Database/database.repository.tokenrepo.itokenrepo/#returns_3","title":"Returns","text":"<p>The first token info if found; otherwise, null.</p>"},{"location":"code/Database/database.repository.tokenrepo.itokenrepo/#savechangesasync","title":"SaveChangesAsync()","text":"<p>Saves changes to the database.</p> <pre><code>Task SaveChangesAsync()\n</code></pre>"},{"location":"code/Database/database.repository.tokenrepo.itokenrepo/#returns_4","title":"Returns","text":"<p>A task representing the asynchronous operation.</p>"},{"location":"code/Database/database.repository.tokenrepo.itokenrepo/#updatetokeninfoasynctokeninfo","title":"UpdateTokenInfoAsync(TokenInfo)","text":"<p>Updates an existing token info.</p> <pre><code>Task UpdateTokenInfoAsync(TokenInfo tokenInfo)\n</code></pre>"},{"location":"code/Database/database.repository.tokenrepo.itokenrepo/#parameters_4","title":"Parameters","text":"<p><code>tokenInfo</code> TokenInfo The token info to update.</p>"},{"location":"code/Database/database.repository.tokenrepo.itokenrepo/#returns_5","title":"Returns","text":"<p>A task representing the asynchronous operation.</p>"},{"location":"code/Database/database.repository.tokenrepo.tokenrepo/","title":"TokenRepo","text":"<p>Namespace: Database.Repository.TokenRepo</p> <p>Repository implementation for managing TokenInfo entities.</p> <pre><code>public class TokenRepo : ITokenRepo\n</code></pre> <p>Inheritance Object \u2192 TokenRepo Implements ITokenRepo</p>"},{"location":"code/Database/database.repository.tokenrepo.tokenrepo/#constructors","title":"Constructors","text":""},{"location":"code/Database/database.repository.tokenrepo.tokenrepo/#tokenrepoapplicationdbcontext","title":"TokenRepo(ApplicationDbContext)","text":"<p>Initializes a new instance of the TokenRepo class.</p> <pre><code>public TokenRepo(ApplicationDbContext context)\n</code></pre>"},{"location":"code/Database/database.repository.tokenrepo.tokenrepo/#parameters","title":"Parameters","text":"<p><code>context</code> ApplicationDbContext The database context.</p>"},{"location":"code/Database/database.repository.tokenrepo.tokenrepo/#exceptions","title":"Exceptions","text":"<p>ArgumentNullException Thrown when context is null.</p>"},{"location":"code/Database/database.repository.tokenrepo.tokenrepo/#methods","title":"Methods","text":""},{"location":"code/Database/database.repository.tokenrepo.tokenrepo/#addtokeninfoasynctokeninfo","title":"AddTokenInfoAsync(TokenInfo)","text":"<p>Adds a new token info.</p> <pre><code>public Task AddTokenInfoAsync(TokenInfo tokenInfo)\n</code></pre>"},{"location":"code/Database/database.repository.tokenrepo.tokenrepo/#parameters_1","title":"Parameters","text":"<p><code>tokenInfo</code> TokenInfo The token info to add.</p>"},{"location":"code/Database/database.repository.tokenrepo.tokenrepo/#returns","title":"Returns","text":"<p>A task representing the asynchronous operation.</p>"},{"location":"code/Database/database.repository.tokenrepo.tokenrepo/#gettokeninfobyrefreshtokenasyncstring","title":"GetTokenInfoByRefreshTokenAsync(String)","text":"<p>Gets a token info by refresh token.</p> <pre><code>public Task&lt;TokenInfo&gt; GetTokenInfoByRefreshTokenAsync(string refreshToken)\n</code></pre>"},{"location":"code/Database/database.repository.tokenrepo.tokenrepo/#parameters_2","title":"Parameters","text":"<p><code>refreshToken</code> String The refresh token to search for.</p>"},{"location":"code/Database/database.repository.tokenrepo.tokenrepo/#returns_1","title":"Returns","text":"<p>The token info if found; otherwise, null.</p>"},{"location":"code/Database/database.repository.tokenrepo.tokenrepo/#gettokeninfobyusernameasyncstring","title":"GetTokenInfoByUsernameAsync(String)","text":"<p>Gets a token info by username.</p> <pre><code>public Task&lt;TokenInfo&gt; GetTokenInfoByUsernameAsync(string username)\n</code></pre>"},{"location":"code/Database/database.repository.tokenrepo.tokenrepo/#parameters_3","title":"Parameters","text":"<p><code>username</code> String The username to search for.</p>"},{"location":"code/Database/database.repository.tokenrepo.tokenrepo/#returns_2","title":"Returns","text":"<p>The token info if found; otherwise, null.</p>"},{"location":"code/Database/database.repository.tokenrepo.tokenrepo/#gettokeninfobyusernamesyncstring","title":"GetTokenInfoByUsernameSync(String)","text":"<p>Gets the first token info for a user by username.</p> <pre><code>public TokenInfo GetTokenInfoByUsernameSync(string username)\n</code></pre>"},{"location":"code/Database/database.repository.tokenrepo.tokenrepo/#parameters_4","title":"Parameters","text":"<p><code>username</code> String The username to search for.</p>"},{"location":"code/Database/database.repository.tokenrepo.tokenrepo/#returns_3","title":"Returns","text":"<p>The first token info if found; otherwise, null.</p>"},{"location":"code/Database/database.repository.tokenrepo.tokenrepo/#savechangesasync","title":"SaveChangesAsync()","text":"<p>Saves changes to the database.</p> <pre><code>public Task SaveChangesAsync()\n</code></pre>"},{"location":"code/Database/database.repository.tokenrepo.tokenrepo/#returns_4","title":"Returns","text":"<p>A task representing the asynchronous operation.</p>"},{"location":"code/Database/database.repository.tokenrepo.tokenrepo/#updatetokeninfoasynctokeninfo","title":"UpdateTokenInfoAsync(TokenInfo)","text":"<p>Updates an existing token info.</p> <pre><code>public Task UpdateTokenInfoAsync(TokenInfo tokenInfo)\n</code></pre>"},{"location":"code/Database/database.repository.tokenrepo.tokenrepo/#parameters_5","title":"Parameters","text":"<p><code>tokenInfo</code> TokenInfo The token info to update.</p>"},{"location":"code/Database/database.repository.tokenrepo.tokenrepo/#returns_5","title":"Returns","text":"<p>A task representing the asynchronous operation.</p>"},{"location":"code/MQTT-Receiver-Worker/","title":"Assembly MQTT-Receiver-Worker","text":""},{"location":"code/MQTT-Receiver-Worker/#namespace-mqtt_receiver_worker","title":"Namespace MQTT_Receiver_Worker","text":"<ul> <li> <p>HealthCheck</p> </li> <li> <p>NullMetaListConverter</p> </li> <li> <p>Program</p> </li> <li> <p>Worker</p> </li> </ul>"},{"location":"code/MQTT-Receiver-Worker/#namespace-mqtt_receiver_workermqtt","title":"Namespace MQTT_Receiver_Worker.MQTT","text":"<ul> <li> <p>Connection</p> </li> <li> <p>MqttHealthCheck</p> </li> <li> <p>Receiver</p> </li> </ul>"},{"location":"code/MQTT-Receiver-Worker/#namespace-mqtt_receiver_workermqttinterfaces","title":"Namespace MQTT_Receiver_Worker.MQTT.Interfaces","text":"<ul> <li> <p>IConnection</p> </li> <li> <p>IReceiver</p> </li> </ul>"},{"location":"code/MQTT-Receiver-Worker/#namespace-mqtt_receiver_workermqttmodels","title":"Namespace MQTT_Receiver_Worker.MQTT.Models","text":"<ul> <li> <p>TempSensorMeta</p> </li> <li> <p>TempSensorReading</p> </li> </ul>"},{"location":"code/MQTT-Receiver-Worker/mqtt_receiver_worker.healthcheck/","title":"HealthCheck","text":"<p>Namespace: MQTT_Receiver_Worker</p> <pre><code>public static class HealthCheck\n</code></pre> <p>Inheritance Object \u2192 HealthCheck</p>"},{"location":"code/MQTT-Receiver-Worker/mqtt_receiver_worker.healthcheck/#methods","title":"Methods","text":""},{"location":"code/MQTT-Receiver-Worker/mqtt_receiver_worker.healthcheck/#configurehealthcheckswebapplicationbuilder","title":"ConfigureHealthChecks(WebApplicationBuilder)","text":"<pre><code>public static void ConfigureHealthChecks(WebApplicationBuilder builder)\n</code></pre>"},{"location":"code/MQTT-Receiver-Worker/mqtt_receiver_worker.healthcheck/#parameters","title":"Parameters","text":"<p><code>builder</code> WebApplicationBuilder</p>"},{"location":"code/MQTT-Receiver-Worker/mqtt_receiver_worker.mqtt.connection/","title":"Connection","text":"<p>Namespace: MQTT_Receiver_Worker.MQTT</p> <p>Handles MQTT broker connection and message processing.  Establishes a connection to the MQTT broker, subscribes to topics,  and processes incoming temperature sensor messages.</p> <pre><code>public class Connection : MQTT_Receiver_Worker.MQTT.Interfaces.IConnection\n</code></pre> <p>Inheritance Object \u2192 Connection Implements IConnection</p>"},{"location":"code/MQTT-Receiver-Worker/mqtt_receiver_worker.mqtt.connection/#properties","title":"Properties","text":""},{"location":"code/MQTT-Receiver-Worker/mqtt_receiver_worker.mqtt.connection/#isconnected","title":"IsConnected","text":"<p>Gets a value indicating whether the MQTT client is currently connected.</p> <pre><code>public bool IsConnected { get; }\n</code></pre>"},{"location":"code/MQTT-Receiver-Worker/mqtt_receiver_worker.mqtt.connection/#property-value","title":"Property Value","text":"<p>Boolean</p>"},{"location":"code/MQTT-Receiver-Worker/mqtt_receiver_worker.mqtt.connection/#constructors","title":"Constructors","text":""},{"location":"code/MQTT-Receiver-Worker/mqtt_receiver_worker.mqtt.connection/#connectioniloggerconnection-iserviceprovider-iconfiguration","title":"Connection(ILogger&lt;Connection&gt;, IServiceProvider, IConfiguration)","text":"<p>Initializes a new instance of the Connection class.</p> <pre><code>public Connection(ILogger&lt;Connection&gt; logger, IServiceProvider serviceProvider, IConfiguration configuration)\n</code></pre>"},{"location":"code/MQTT-Receiver-Worker/mqtt_receiver_worker.mqtt.connection/#parameters","title":"Parameters","text":"<p><code>logger</code> ILogger&lt;Connection&gt; Logger for recording connection events</p> <p><code>serviceProvider</code> IServiceProvider</p> <p><code>configuration</code> IConfiguration Configuration for MQTT settings</p>"},{"location":"code/MQTT-Receiver-Worker/mqtt_receiver_worker.mqtt.connection/#methods","title":"Methods","text":""},{"location":"code/MQTT-Receiver-Worker/mqtt_receiver_worker.mqtt.connection/#disconnectasync","title":"DisconnectAsync()","text":"<p>Disconnects from the MQTT broker.</p> <pre><code>public Task DisconnectAsync()\n</code></pre>"},{"location":"code/MQTT-Receiver-Worker/mqtt_receiver_worker.mqtt.connection/#returns","title":"Returns","text":"<p>A task that represents the asynchronous operation.</p>"},{"location":"code/MQTT-Receiver-Worker/mqtt_receiver_worker.mqtt.connection/#getconnectionasync","title":"GetConnectionAsync()","text":"<p>Establishes a connection to the MQTT broker and configures message handlers.</p> <pre><code>public Task&lt;IMqttClient&gt; GetConnectionAsync()\n</code></pre>"},{"location":"code/MQTT-Receiver-Worker/mqtt_receiver_worker.mqtt.connection/#returns_1","title":"Returns","text":"<p>A task that represents the asynchronous operation. The task result contains the connected MQTT client, or null if connection failed.</p>"},{"location":"code/MQTT-Receiver-Worker/mqtt_receiver_worker.mqtt.connection/#tryconnectasync","title":"TryConnectAsync()","text":"<p>Attempts to connect to the MQTT broker.</p> <pre><code>public Task&lt;Boolean&gt; TryConnectAsync()\n</code></pre>"},{"location":"code/MQTT-Receiver-Worker/mqtt_receiver_worker.mqtt.connection/#returns_2","title":"Returns","text":"<p>A task that represents the asynchronous operation. The task result indicates whether the connection was successful.</p>"},{"location":"code/MQTT-Receiver-Worker/mqtt_receiver_worker.mqtt.interfaces.iconnection/","title":"IConnection","text":"<p>Namespace: MQTT_Receiver_Worker.MQTT.Interfaces</p> <p>Interface for MQTT broker connection management.  Provides abstraction for establishing MQTT connections and handling message processing.</p> <pre><code>public interface IConnection\n</code></pre>"},{"location":"code/MQTT-Receiver-Worker/mqtt_receiver_worker.mqtt.interfaces.iconnection/#properties","title":"Properties","text":""},{"location":"code/MQTT-Receiver-Worker/mqtt_receiver_worker.mqtt.interfaces.iconnection/#isconnected","title":"IsConnected","text":"<p>Gets a value indicating whether the MQTT client is currently connected.</p> <pre><code>public abstract bool IsConnected { get; }\n</code></pre>"},{"location":"code/MQTT-Receiver-Worker/mqtt_receiver_worker.mqtt.interfaces.iconnection/#property-value","title":"Property Value","text":"<p>Boolean</p>"},{"location":"code/MQTT-Receiver-Worker/mqtt_receiver_worker.mqtt.interfaces.iconnection/#methods","title":"Methods","text":""},{"location":"code/MQTT-Receiver-Worker/mqtt_receiver_worker.mqtt.interfaces.iconnection/#disconnectasync","title":"DisconnectAsync()","text":"<p>Disconnects from the MQTT broker.</p> <pre><code>Task DisconnectAsync()\n</code></pre>"},{"location":"code/MQTT-Receiver-Worker/mqtt_receiver_worker.mqtt.interfaces.iconnection/#returns","title":"Returns","text":"<p>A task that represents the asynchronous operation.</p>"},{"location":"code/MQTT-Receiver-Worker/mqtt_receiver_worker.mqtt.interfaces.iconnection/#getconnectionasync","title":"GetConnectionAsync()","text":"<p>Establishes a connection to the MQTT broker and configures message handlers.</p> <pre><code>Task&lt;IMqttClient&gt; GetConnectionAsync()\n</code></pre>"},{"location":"code/MQTT-Receiver-Worker/mqtt_receiver_worker.mqtt.interfaces.iconnection/#returns_1","title":"Returns","text":"<p>A task that represents the asynchronous operation. The task result contains the connected MQTT client, or null if connection failed.</p>"},{"location":"code/MQTT-Receiver-Worker/mqtt_receiver_worker.mqtt.interfaces.iconnection/#tryconnectasync","title":"TryConnectAsync()","text":"<p>Attempts to connect to the MQTT broker.</p> <pre><code>Task&lt;Boolean&gt; TryConnectAsync()\n</code></pre>"},{"location":"code/MQTT-Receiver-Worker/mqtt_receiver_worker.mqtt.interfaces.iconnection/#returns_2","title":"Returns","text":"<p>A task that represents the asynchronous operation. The task result indicates whether the connection was successful.</p>"},{"location":"code/MQTT-Receiver-Worker/mqtt_receiver_worker.mqtt.interfaces.ireceiver/","title":"IReceiver","text":"<p>Namespace: MQTT_Receiver_Worker.MQTT.Interfaces</p> <p>Interface for MQTT topic subscription management.  Provides abstraction for subscribing to configured MQTT topics.</p> <pre><code>public interface IReceiver\n</code></pre>"},{"location":"code/MQTT-Receiver-Worker/mqtt_receiver_worker.mqtt.interfaces.ireceiver/#methods","title":"Methods","text":""},{"location":"code/MQTT-Receiver-Worker/mqtt_receiver_worker.mqtt.interfaces.ireceiver/#subscribetotopics","title":"SubscribeToTopics()","text":"<p>Subscribes to configured MQTT topics using shared subscriptions.  Retrieves topic settings from the repository and establishes subscriptions</p> <pre><code>Task SubscribeToTopics()\n</code></pre>"},{"location":"code/MQTT-Receiver-Worker/mqtt_receiver_worker.mqtt.interfaces.ireceiver/#returns","title":"Returns","text":"<p>A task that represents the asynchronous subscribe operation.</p>"},{"location":"code/MQTT-Receiver-Worker/mqtt_receiver_worker.mqtt.models.tempsensormeta/","title":"TempSensorMeta","text":"<p>Namespace: MQTT_Receiver_Worker.MQTT.Models</p> <p>Represents a recovered temperature sensor reading from a MQTT device.</p> <pre><code>public class TempSensorMeta\n</code></pre> <p>Inheritance Object \u2192 TempSensorMeta</p>"},{"location":"code/MQTT-Receiver-Worker/mqtt_receiver_worker.mqtt.models.tempsensormeta/#properties","title":"Properties","text":""},{"location":"code/MQTT-Receiver-Worker/mqtt_receiver_worker.mqtt.models.tempsensormeta/#sequence","title":"Sequence","text":"<p>Gets or sets the sequence number of the reading.</p> <pre><code>public Int32[] Sequence { get; set; }\n</code></pre>"},{"location":"code/MQTT-Receiver-Worker/mqtt_receiver_worker.mqtt.models.tempsensormeta/#property-value","title":"Property Value","text":"<p>Int32[]</p>"},{"location":"code/MQTT-Receiver-Worker/mqtt_receiver_worker.mqtt.models.tempsensormeta/#timestamp","title":"Timestamp","text":"<p>Gets or sets the timestamp when the data was recorded.</p> <pre><code>public Int64[] Timestamp { get; set; }\n</code></pre>"},{"location":"code/MQTT-Receiver-Worker/mqtt_receiver_worker.mqtt.models.tempsensormeta/#property-value_1","title":"Property Value","text":"<p>Int64[]</p>"},{"location":"code/MQTT-Receiver-Worker/mqtt_receiver_worker.mqtt.models.tempsensormeta/#value","title":"Value","text":"<p>Gets or sets the temperature values from the Sensor.</p> <pre><code>public Double[] Value { get; set; }\n</code></pre>"},{"location":"code/MQTT-Receiver-Worker/mqtt_receiver_worker.mqtt.models.tempsensormeta/#property-value_2","title":"Property Value","text":"<p>Double[]</p>"},{"location":"code/MQTT-Receiver-Worker/mqtt_receiver_worker.mqtt.models.tempsensormeta/#constructors","title":"Constructors","text":""},{"location":"code/MQTT-Receiver-Worker/mqtt_receiver_worker.mqtt.models.tempsensormeta/#tempsensormeta_1","title":"TempSensorMeta()","text":"<pre><code>public TempSensorMeta()\n</code></pre>"},{"location":"code/MQTT-Receiver-Worker/mqtt_receiver_worker.mqtt.models.tempsensorreading/","title":"TempSensorReading","text":"<p>Namespace: MQTT_Receiver_Worker.MQTT.Models</p> <p>Represents a temperature sensor reading from an MQTT device.</p> <pre><code>public class TempSensorReading\n</code></pre> <p>Inheritance Object \u2192 TempSensorReading</p>"},{"location":"code/MQTT-Receiver-Worker/mqtt_receiver_worker.mqtt.models.tempsensorreading/#properties","title":"Properties","text":""},{"location":"code/MQTT-Receiver-Worker/mqtt_receiver_worker.mqtt.models.tempsensorreading/#meta","title":"Meta","text":"<p>Gets or sets additional metadata associated with the sensor reading.  This includes information for the bulk insert</p> <pre><code>public TempSensorMeta Meta { get; set; }\n</code></pre>"},{"location":"code/MQTT-Receiver-Worker/mqtt_receiver_worker.mqtt.models.tempsensorreading/#property-value","title":"Property Value","text":"<p>TempSensorMeta</p>"},{"location":"code/MQTT-Receiver-Worker/mqtt_receiver_worker.mqtt.models.tempsensorreading/#sequence","title":"Sequence","text":"<p>Gets or sets the sequence number of the reading.  Used to track the order of readings and detect missing data.</p> <pre><code>public Nullable&lt;Int32&gt; Sequence { get; set; }\n</code></pre>"},{"location":"code/MQTT-Receiver-Worker/mqtt_receiver_worker.mqtt.models.tempsensorreading/#property-value_1","title":"Property Value","text":"<p>Nullable&lt;Int32&gt;</p>"},{"location":"code/MQTT-Receiver-Worker/mqtt_receiver_worker.mqtt.models.tempsensorreading/#timestamp","title":"Timestamp","text":"<p>Gets or sets the timestamp when the reading was taken.  The value represents Unix time (seconds since epoch).</p> <pre><code>public long Timestamp { get; set; }\n</code></pre>"},{"location":"code/MQTT-Receiver-Worker/mqtt_receiver_worker.mqtt.models.tempsensorreading/#property-value_2","title":"Property Value","text":"<p>Int64</p>"},{"location":"code/MQTT-Receiver-Worker/mqtt_receiver_worker.mqtt.models.tempsensorreading/#value","title":"Value","text":"<p>Gets or sets the temperature values from the sensor.  An array is used as the sensor might provide multiple reading points.</p> <pre><code>public Nullable&lt;Double&gt;[] Value { get; set; }\n</code></pre>"},{"location":"code/MQTT-Receiver-Worker/mqtt_receiver_worker.mqtt.models.tempsensorreading/#property-value_3","title":"Property Value","text":"<p>Nullable&lt;Double&gt;[]</p>"},{"location":"code/MQTT-Receiver-Worker/mqtt_receiver_worker.mqtt.models.tempsensorreading/#constructors","title":"Constructors","text":""},{"location":"code/MQTT-Receiver-Worker/mqtt_receiver_worker.mqtt.models.tempsensorreading/#tempsensorreading_1","title":"TempSensorReading()","text":"<pre><code>public TempSensorReading()\n</code></pre>"},{"location":"code/MQTT-Receiver-Worker/mqtt_receiver_worker.mqtt.mqtthealthcheck/","title":"MqttHealthCheck","text":"<p>Namespace: MQTT_Receiver_Worker.MQTT</p> <pre><code>public class MqttHealthCheck : Microsoft.Extensions.Diagnostics.HealthChecks.IHealthCheck\n</code></pre> <p>Inheritance Object \u2192 MqttHealthCheck Implements IHealthCheck</p>"},{"location":"code/MQTT-Receiver-Worker/mqtt_receiver_worker.mqtt.mqtthealthcheck/#constructors","title":"Constructors","text":""},{"location":"code/MQTT-Receiver-Worker/mqtt_receiver_worker.mqtt.mqtthealthcheck/#mqtthealthcheckiconnection","title":"MqttHealthCheck(IConnection)","text":"<pre><code>public MqttHealthCheck(IConnection connection)\n</code></pre>"},{"location":"code/MQTT-Receiver-Worker/mqtt_receiver_worker.mqtt.mqtthealthcheck/#parameters","title":"Parameters","text":"<p><code>connection</code> IConnection</p>"},{"location":"code/MQTT-Receiver-Worker/mqtt_receiver_worker.mqtt.mqtthealthcheck/#methods","title":"Methods","text":""},{"location":"code/MQTT-Receiver-Worker/mqtt_receiver_worker.mqtt.mqtthealthcheck/#checkhealthasynchealthcheckcontext-cancellationtoken","title":"CheckHealthAsync(HealthCheckContext, CancellationToken)","text":"<pre><code>public Task&lt;HealthCheckResult&gt; CheckHealthAsync(HealthCheckContext context, CancellationToken cancellationToken)\n</code></pre>"},{"location":"code/MQTT-Receiver-Worker/mqtt_receiver_worker.mqtt.mqtthealthcheck/#parameters_1","title":"Parameters","text":"<p><code>context</code> HealthCheckContext</p> <p><code>cancellationToken</code> CancellationToken</p>"},{"location":"code/MQTT-Receiver-Worker/mqtt_receiver_worker.mqtt.mqtthealthcheck/#returns","title":"Returns","text":"<p>Task&lt;HealthCheckResult&gt;</p>"},{"location":"code/MQTT-Receiver-Worker/mqtt_receiver_worker.mqtt.receiver/","title":"Receiver","text":"<p>Namespace: MQTT_Receiver_Worker.MQTT</p> <p>Handles MQTT topic subscription and message receiving functionality.  This class is responsible for subscribing to configured topics from the settings repository  and managing the connection to the MQTT broker.</p> <pre><code>public class Receiver : MQTT_Receiver_Worker.MQTT.Interfaces.IReceiver\n</code></pre> <p>Inheritance Object \u2192 Receiver Implements IReceiver</p>"},{"location":"code/MQTT-Receiver-Worker/mqtt_receiver_worker.mqtt.receiver/#constructors","title":"Constructors","text":""},{"location":"code/MQTT-Receiver-Worker/mqtt_receiver_worker.mqtt.receiver/#receiveriserviceprovider-iconnection-iloggerreceiver","title":"Receiver(IServiceProvider, IConnection, ILogger&lt;Receiver&gt;)","text":"<p>Initializes a new instance of the Receiver class.</p> <pre><code>public Receiver(IServiceProvider serviceProvider, IConnection connection, ILogger&lt;Receiver&gt; logger)\n</code></pre>"},{"location":"code/MQTT-Receiver-Worker/mqtt_receiver_worker.mqtt.receiver/#parameters","title":"Parameters","text":"<p><code>serviceProvider</code> IServiceProvider Service provider for dependency injection.</p> <p><code>connection</code> IConnection Connection manager for the MQTT client.</p> <p><code>logger</code> ILogger&lt;Receiver&gt; Logger for diagnostic information.</p>"},{"location":"code/MQTT-Receiver-Worker/mqtt_receiver_worker.mqtt.receiver/#methods","title":"Methods","text":""},{"location":"code/MQTT-Receiver-Worker/mqtt_receiver_worker.mqtt.receiver/#subscribetotopics","title":"SubscribeToTopics()","text":"<p>Subscribes to configured MQTT topics using shared subscriptions.  Retrieves topic settings from the repository and establishes subscriptions</p> <pre><code>public Task SubscribeToTopics()\n</code></pre>"},{"location":"code/MQTT-Receiver-Worker/mqtt_receiver_worker.mqtt.receiver/#returns","title":"Returns","text":"<p>A task that represents the asynchronous subscribe operation.</p>"},{"location":"code/MQTT-Receiver-Worker/mqtt_receiver_worker.nullmetalistconverter/","title":"NullMetaListConverter","text":"<p>Namespace: MQTT_Receiver_Worker</p> <p>Custom JSON converter for List&lt;TempSensorReading&gt; that converts lists containing only null values to null.  This converter ensures that during JSON deserialization, if a meta list contains only null entries,  the entire list is set to null instead of maintaining a list of null objects.</p> <pre><code>public class NullMetaListConverter : System.Text.Json.Serialization.JsonConverter`1[[System.Collections.Generic.List`1[[MQTT_Receiver_Worker.MQTT.Models.TempSensorReading, MQTT-Receiver-Worker, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null]], System.Private.CoreLib, Version=9.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]\n</code></pre> <p>Inheritance Object \u2192 JsonConverter \u2192 JsonConverter&lt;List&lt;TempSensorReading&gt;&gt; \u2192 NullMetaListConverter</p>"},{"location":"code/MQTT-Receiver-Worker/mqtt_receiver_worker.nullmetalistconverter/#properties","title":"Properties","text":""},{"location":"code/MQTT-Receiver-Worker/mqtt_receiver_worker.nullmetalistconverter/#handlenull","title":"HandleNull","text":"<pre><code>public bool HandleNull { get; }\n</code></pre>"},{"location":"code/MQTT-Receiver-Worker/mqtt_receiver_worker.nullmetalistconverter/#property-value","title":"Property Value","text":"<p>Boolean</p>"},{"location":"code/MQTT-Receiver-Worker/mqtt_receiver_worker.nullmetalistconverter/#type","title":"Type","text":"<pre><code>public Type Type { get; }\n</code></pre>"},{"location":"code/MQTT-Receiver-Worker/mqtt_receiver_worker.nullmetalistconverter/#property-value_1","title":"Property Value","text":"<p>Type</p>"},{"location":"code/MQTT-Receiver-Worker/mqtt_receiver_worker.nullmetalistconverter/#constructors","title":"Constructors","text":""},{"location":"code/MQTT-Receiver-Worker/mqtt_receiver_worker.nullmetalistconverter/#nullmetalistconverter_1","title":"NullMetaListConverter()","text":"<pre><code>public NullMetaListConverter()\n</code></pre>"},{"location":"code/MQTT-Receiver-Worker/mqtt_receiver_worker.nullmetalistconverter/#methods","title":"Methods","text":""},{"location":"code/MQTT-Receiver-Worker/mqtt_receiver_worker.nullmetalistconverter/#readref-utf8jsonreader-type-jsonserializeroptions","title":"Read(ref Utf8JsonReader, Type, JsonSerializerOptions)","text":"<p>Reads and converts the JSON to a List&lt;TempSensorReading&gt;.  If the resulting list contains only null values, returns null instead of the list.</p> <pre><code>public List&lt;TempSensorReading&gt; Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)\n</code></pre>"},{"location":"code/MQTT-Receiver-Worker/mqtt_receiver_worker.nullmetalistconverter/#parameters","title":"Parameters","text":"<p><code>reader</code> Utf8JsonReader&amp; The Utf8JsonReader to read from</p> <p><code>typeToConvert</code> Type The type to convert (List&lt;TempSensorReading&gt;?)</p> <p><code>options</code> JsonSerializerOptions The JsonSerializerOptions to use during deserialization</p>"},{"location":"code/MQTT-Receiver-Worker/mqtt_receiver_worker.nullmetalistconverter/#returns","title":"Returns","text":"<p>A List&lt;TempSensorReading&gt; containing the deserialized values, or null if the list  was empty, null, or contained only null values</p>"},{"location":"code/MQTT-Receiver-Worker/mqtt_receiver_worker.nullmetalistconverter/#writeutf8jsonwriter-listtempsensorreading-jsonserializeroptions","title":"Write(Utf8JsonWriter, List&lt;TempSensorReading&gt;, JsonSerializerOptions)","text":"<p>Writes the List&lt;TempSensorReading&gt; to JSON.  Uses the default serialization behavior without any custom logic.</p> <pre><code>public void Write(Utf8JsonWriter writer, List&lt;TempSensorReading&gt; value, JsonSerializerOptions options)\n</code></pre>"},{"location":"code/MQTT-Receiver-Worker/mqtt_receiver_worker.nullmetalistconverter/#parameters_1","title":"Parameters","text":"<p><code>writer</code> Utf8JsonWriter The Utf8JsonWriter to write to</p> <p><code>value</code> List&lt;TempSensorReading&gt; The List&lt;TempSensorReading&gt; value to serialize</p> <p><code>options</code> JsonSerializerOptions The JsonSerializerOptions to use during serialization</p>"},{"location":"code/MQTT-Receiver-Worker/mqtt_receiver_worker.program/","title":"Program","text":"<p>Namespace: MQTT_Receiver_Worker</p> <p>This class is the entry point for the MQTT Receiver Worker application.</p> <pre><code>public class Program\n</code></pre> <p>Inheritance Object \u2192 Program</p>"},{"location":"code/MQTT-Receiver-Worker/mqtt_receiver_worker.program/#constructors","title":"Constructors","text":""},{"location":"code/MQTT-Receiver-Worker/mqtt_receiver_worker.program/#program_1","title":"Program()","text":"<pre><code>public Program()\n</code></pre>"},{"location":"code/MQTT-Receiver-Worker/mqtt_receiver_worker.program/#methods","title":"Methods","text":""},{"location":"code/MQTT-Receiver-Worker/mqtt_receiver_worker.program/#mainstring","title":"Main(String[])","text":"<p>Entry point for the MQTT Receiver Worker application.</p> <pre><code>public static void Main(String[] args)\n</code></pre>"},{"location":"code/MQTT-Receiver-Worker/mqtt_receiver_worker.program/#parameters","title":"Parameters","text":"<p><code>args</code> String[]</p>"},{"location":"code/MQTT-Receiver-Worker/mqtt_receiver_worker.worker/","title":"Worker","text":"<p>Namespace: MQTT_Receiver_Worker</p> <p>Background worker service for handling MQTT message receiving operations.  Implements a long-running service that subscribes to MQTT topics and processes messages.</p> <pre><code>public class Worker : Microsoft.Extensions.Hosting.BackgroundService, Microsoft.Extensions.Hosting.IHostedService, System.IDisposable\n</code></pre> <p>Inheritance Object \u2192 BackgroundService \u2192 Worker Implements IHostedService, IDisposable</p>"},{"location":"code/MQTT-Receiver-Worker/mqtt_receiver_worker.worker/#properties","title":"Properties","text":""},{"location":"code/MQTT-Receiver-Worker/mqtt_receiver_worker.worker/#executetask","title":"ExecuteTask","text":"<pre><code>public Task ExecuteTask { get; }\n</code></pre>"},{"location":"code/MQTT-Receiver-Worker/mqtt_receiver_worker.worker/#property-value","title":"Property Value","text":"<p>Task</p>"},{"location":"code/MQTT-Receiver-Worker/mqtt_receiver_worker.worker/#constructors","title":"Constructors","text":""},{"location":"code/MQTT-Receiver-Worker/mqtt_receiver_worker.worker/#workeriloggerworker-ireceiver-iconnection","title":"Worker(ILogger&lt;Worker&gt;, IReceiver, IConnection)","text":"<p>Initializes a new instance of the Worker class.</p> <pre><code>public Worker(ILogger&lt;Worker&gt; logger, IReceiver receiver, IConnection connection)\n</code></pre>"},{"location":"code/MQTT-Receiver-Worker/mqtt_receiver_worker.worker/#parameters","title":"Parameters","text":"<p><code>logger</code> ILogger&lt;Worker&gt; Logger for recording service events.</p> <p><code>receiver</code> IReceiver MQTT receiver for subscribing to topics.</p> <p><code>connection</code> IConnection</p>"},{"location":"code/MQTT-Receiver-Worker/mqtt_receiver_worker.worker/#methods","title":"Methods","text":""},{"location":"code/MQTT-Receiver-Worker/mqtt_receiver_worker.worker/#executeasynccancellationtoken","title":"ExecuteAsync(CancellationToken)","text":"<p>Executes the worker process, maintaining MQTT connection and subscribing to topics.  This is the main entry point for the background service execution.</p> <pre><code>protected Task ExecuteAsync(CancellationToken stoppingToken)\n</code></pre>"},{"location":"code/MQTT-Receiver-Worker/mqtt_receiver_worker.worker/#parameters_1","title":"Parameters","text":"<p><code>stoppingToken</code> CancellationToken Token that can be used to request cancellation of the operation.</p>"},{"location":"code/MQTT-Receiver-Worker/mqtt_receiver_worker.worker/#returns","title":"Returns","text":"<p>A task representing the asynchronous operation.</p>"},{"location":"code/MQTT-Sender/","title":"Assembly MQTT-Sender","text":""},{"location":"code/MQTT-Sender/#namespace-mqtt_sender","title":"Namespace MQTT_Sender","text":"<ul> <li>Connection</li> </ul>"},{"location":"code/MQTT-Sender/mqtt_sender.connection/","title":"Connection","text":"<p>Namespace: MQTT_Sender</p> <p>This class provides a method to establish a connection to an MQTT broker.</p> <pre><code>public static class Connection\n</code></pre> <p>Inheritance Object \u2192 Connection</p>"},{"location":"code/MQTT-Sender/mqtt_sender.connection/#methods","title":"Methods","text":""},{"location":"code/MQTT-Sender/mqtt_sender.connection/#getconnection","title":"GetConnection()","text":"<p>Gets a connection to the MQTT broker.</p> <pre><code>public static Task&lt;IMqttClient&gt; GetConnection()\n</code></pre>"},{"location":"code/MQTT-Sender/mqtt_sender.connection/#returns","title":"Returns","text":"<p>Task&lt;IMqttClient&gt;</p>"},{"location":"code/Rest-API/","title":"Assembly Rest-API","text":""},{"location":"code/Rest-API/#namespace-rest_api","title":"Namespace Rest_API","text":"<ul> <li>Program</li> </ul>"},{"location":"code/Rest-API/#namespace-rest_apicontrollers","title":"Namespace Rest_API.Controllers","text":"<ul> <li> <p>AuthenticationController</p> </li> <li> <p>TempController</p> </li> <li> <p>TemperatureDataController</p> </li> <li> <p>TopicController</p> </li> <li> <p>UserInfoController</p> </li> </ul>"},{"location":"code/Rest-API/#namespace-rest_apihelper","title":"Namespace Rest_API.Helper","text":"<ul> <li> <p>HealthCheck</p> </li> <li> <p>StringTools</p> </li> </ul>"},{"location":"code/Rest-API/#namespace-rest_apimodels","title":"Namespace Rest_API.Models","text":"<ul> <li> <p>ChangePassword</p> </li> <li> <p>JwtToken</p> </li> <li> <p>Login</p> </li> <li> <p>Register</p> </li> <li> <p>Roles</p> </li> <li> <p>TemperatureData</p> </li> <li> <p>TemperatureDataOverview</p> </li> </ul>"},{"location":"code/Rest-API/#namespace-rest_apiseeder","title":"Namespace Rest_API.Seeder","text":"<ul> <li>SeedUser</li> </ul>"},{"location":"code/Rest-API/#namespace-rest_apiservicesauth","title":"Namespace Rest_API.Services.Auth","text":"<ul> <li> <p>AuthenticationService</p> </li> <li> <p>IAuthenticationService</p> </li> </ul>"},{"location":"code/Rest-API/#namespace-rest_apiservicestemp","title":"Namespace Rest_API.Services.Temp","text":"<ul> <li> <p>ITempService</p> </li> <li> <p>TempService</p> </li> </ul>"},{"location":"code/Rest-API/#namespace-rest_apiservicestoken","title":"Namespace Rest_API.Services.Token","text":"<ul> <li> <p>ITokenService</p> </li> <li> <p>TokenService</p> </li> </ul>"},{"location":"code/Rest-API/#namespace-rest_apiservicesuser","title":"Namespace Rest_API.Services.User","text":"<ul> <li> <p>IUserService</p> </li> <li> <p>UserService</p> </li> </ul>"},{"location":"code/Rest-API/rest_api.helper.healthcheck/","title":"HealthCheck","text":"<p>Namespace: Rest_API.Helper</p> <pre><code>public static class HealthCheck\n</code></pre> <p>Inheritance Object \u2192 HealthCheck</p>"},{"location":"code/Rest-API/rest_api.helper.healthcheck/#methods","title":"Methods","text":""},{"location":"code/Rest-API/rest_api.helper.healthcheck/#configurehealthcheckswebapplicationbuilder","title":"ConfigureHealthChecks(WebApplicationBuilder)","text":"<pre><code>public static void ConfigureHealthChecks(WebApplicationBuilder builder)\n</code></pre>"},{"location":"code/Rest-API/rest_api.helper.healthcheck/#parameters","title":"Parameters","text":"<p><code>builder</code> WebApplicationBuilder</p>"},{"location":"code/Rest-API/rest_api.helper.stringtools/","title":"StringTools","text":"<p>Namespace: Rest_API.Helper</p> <p>This class provides utility methods for string manipulation.</p> <pre><code>public static class StringTools\n</code></pre> <p>Inheritance Object \u2192 StringTools</p>"},{"location":"code/Rest-API/rest_api.helper.stringtools/#methods","title":"Methods","text":""},{"location":"code/Rest-API/rest_api.helper.stringtools/#sanitizestringstring","title":"SanitizeString(String)","text":"<p>Takes a string input and sanitizes it by removing any characters that are not alphanumeric, spaces, or underscores.</p> <pre><code>public static string SanitizeString(string input)\n</code></pre>"},{"location":"code/Rest-API/rest_api.helper.stringtools/#parameters","title":"Parameters","text":"<p><code>input</code> String</p>"},{"location":"code/Rest-API/rest_api.helper.stringtools/#returns","title":"Returns","text":"<p>String</p>"},{"location":"code/Rest-API/rest_api.models.changepassword/","title":"ChangePassword","text":"<p>Namespace: Rest_API.Models</p> <p>Represents a request to change a user's password.</p> <pre><code>public class ChangePassword\n</code></pre> <p>Inheritance Object \u2192 ChangePassword</p>"},{"location":"code/Rest-API/rest_api.models.changepassword/#properties","title":"Properties","text":""},{"location":"code/Rest-API/rest_api.models.changepassword/#currentpassword","title":"CurrentPassword","text":"<p>Gets or sets the current password of the user.</p> <pre><code>public string CurrentPassword { get; set; }\n</code></pre>"},{"location":"code/Rest-API/rest_api.models.changepassword/#property-value","title":"Property Value","text":"<p>String</p>"},{"location":"code/Rest-API/rest_api.models.changepassword/#newpassword","title":"NewPassword","text":"<p>Gets or sets the new password to be set for the user.</p> <pre><code>public string NewPassword { get; set; }\n</code></pre>"},{"location":"code/Rest-API/rest_api.models.changepassword/#property-value_1","title":"Property Value","text":"<p>String</p>"},{"location":"code/Rest-API/rest_api.models.changepassword/#userid","title":"UserId","text":"<p>Gets or sets the unique identifier of the user whose password is to be changed.</p> <pre><code>public string UserId { get; set; }\n</code></pre>"},{"location":"code/Rest-API/rest_api.models.changepassword/#property-value_2","title":"Property Value","text":"<p>String</p>"},{"location":"code/Rest-API/rest_api.models.changepassword/#constructors","title":"Constructors","text":""},{"location":"code/Rest-API/rest_api.models.changepassword/#changepassword_1","title":"ChangePassword()","text":"<pre><code>public ChangePassword()\n</code></pre>"},{"location":"code/Rest-API/rest_api.models.jwttoken/","title":"JwtToken","text":"<p>Namespace: Rest_API.Models</p> <p>Represents a JWT token and its associated refresh token and metadata.</p> <pre><code>public class JwtToken\n</code></pre> <p>Inheritance Object \u2192 JwtToken</p>"},{"location":"code/Rest-API/rest_api.models.jwttoken/#properties","title":"Properties","text":""},{"location":"code/Rest-API/rest_api.models.jwttoken/#createddate","title":"CreatedDate","text":"<p>Gets or sets the creation date and time of the JWT token.</p> <pre><code>public DateTime CreatedDate { get; set; }\n</code></pre>"},{"location":"code/Rest-API/rest_api.models.jwttoken/#property-value","title":"Property Value","text":"<p>DateTime</p>"},{"location":"code/Rest-API/rest_api.models.jwttoken/#expirydate","title":"ExpiryDate","text":"<p>Gets or sets the expiry date and time of the JWT token.</p> <pre><code>public DateTime ExpiryDate { get; set; }\n</code></pre>"},{"location":"code/Rest-API/rest_api.models.jwttoken/#property-value_1","title":"Property Value","text":"<p>DateTime</p>"},{"location":"code/Rest-API/rest_api.models.jwttoken/#refreshtoken","title":"RefreshToken","text":"<p>Gets or sets the refresh token string.</p> <pre><code>public string RefreshToken { get; set; }\n</code></pre>"},{"location":"code/Rest-API/rest_api.models.jwttoken/#property-value_2","title":"Property Value","text":"<p>String</p>"},{"location":"code/Rest-API/rest_api.models.jwttoken/#roles","title":"Roles","text":"<p>Gets or sets the user roles associated with the JWT token.</p> <pre><code>public IList&lt;String&gt; Roles { get; set; }\n</code></pre>"},{"location":"code/Rest-API/rest_api.models.jwttoken/#property-value_3","title":"Property Value","text":"<p>IList&lt;String&gt;</p>"},{"location":"code/Rest-API/rest_api.models.jwttoken/#token","title":"Token","text":"<p>Gets or sets the JWT access token string.</p> <pre><code>public string Token { get; set; }\n</code></pre>"},{"location":"code/Rest-API/rest_api.models.jwttoken/#property-value_4","title":"Property Value","text":"<p>String</p>"},{"location":"code/Rest-API/rest_api.models.jwttoken/#constructors","title":"Constructors","text":""},{"location":"code/Rest-API/rest_api.models.jwttoken/#jwttoken_1","title":"JwtToken()","text":""},{"location":"code/Rest-API/rest_api.models.jwttoken/#caution","title":"Caution","text":"<p>Constructors of types with required members are not supported in this version of your compiler.</p> <pre><code>public JwtToken()\n</code></pre>"},{"location":"code/Rest-API/rest_api.models.login/","title":"Login","text":"<p>Namespace: Rest_API.Models</p> <p>Represents the login credentials for a user.</p> <pre><code>public class Login\n</code></pre> <p>Inheritance Object \u2192 Login</p>"},{"location":"code/Rest-API/rest_api.models.login/#properties","title":"Properties","text":""},{"location":"code/Rest-API/rest_api.models.login/#password","title":"Password","text":"<p>Gets or sets the password of the user.</p> <pre><code>public string Password { get; set; }\n</code></pre>"},{"location":"code/Rest-API/rest_api.models.login/#property-value","title":"Property Value","text":"<p>String</p>"},{"location":"code/Rest-API/rest_api.models.login/#username","title":"UserName","text":"<p>Gets or sets the username of the user.</p> <pre><code>public string UserName { get; set; }\n</code></pre>"},{"location":"code/Rest-API/rest_api.models.login/#property-value_1","title":"Property Value","text":"<p>String</p>"},{"location":"code/Rest-API/rest_api.models.login/#constructors","title":"Constructors","text":""},{"location":"code/Rest-API/rest_api.models.login/#login_1","title":"Login()","text":""},{"location":"code/Rest-API/rest_api.models.login/#caution","title":"Caution","text":"<p>Constructors of types with required members are not supported in this version of your compiler.</p> <pre><code>public Login()\n</code></pre>"},{"location":"code/Rest-API/rest_api.models.register/","title":"Register","text":"<p>Namespace: Rest_API.Models</p> <p>Represents the registration credentials for a new user.</p> <pre><code>public class Register\n</code></pre> <p>Inheritance Object \u2192 Register</p>"},{"location":"code/Rest-API/rest_api.models.register/#properties","title":"Properties","text":""},{"location":"code/Rest-API/rest_api.models.register/#password","title":"Password","text":"<p>Gets or sets the password for the new user.</p> <pre><code>public string Password { get; set; }\n</code></pre>"},{"location":"code/Rest-API/rest_api.models.register/#property-value","title":"Property Value","text":"<p>String</p>"},{"location":"code/Rest-API/rest_api.models.register/#username","title":"UserName","text":"<p>Gets or sets the username for the new user.</p> <pre><code>public string UserName { get; set; }\n</code></pre>"},{"location":"code/Rest-API/rest_api.models.register/#property-value_1","title":"Property Value","text":"<p>String</p>"},{"location":"code/Rest-API/rest_api.models.register/#constructors","title":"Constructors","text":""},{"location":"code/Rest-API/rest_api.models.register/#register_1","title":"Register()","text":""},{"location":"code/Rest-API/rest_api.models.register/#caution","title":"Caution","text":"<p>Constructors of types with required members are not supported in this version of your compiler.</p> <pre><code>public Register()\n</code></pre>"},{"location":"code/Rest-API/rest_api.models.roles/","title":"Roles","text":"<p>Namespace: Rest_API.Models</p> <p>Provides constant role names for user authorization.</p> <pre><code>public class Roles\n</code></pre> <p>Inheritance Object \u2192 Roles</p>"},{"location":"code/Rest-API/rest_api.models.roles/#fields","title":"Fields","text":""},{"location":"code/Rest-API/rest_api.models.roles/#admin","title":"Admin","text":"<p>The administrator role name.</p> <pre><code>public static string Admin;\n</code></pre>"},{"location":"code/Rest-API/rest_api.models.roles/#user","title":"User","text":"<p>The standard user role name.</p> <pre><code>public static string User;\n</code></pre>"},{"location":"code/Rest-API/rest_api.models.roles/#constructors","title":"Constructors","text":""},{"location":"code/Rest-API/rest_api.models.roles/#roles_1","title":"Roles()","text":"<pre><code>public Roles()\n</code></pre>"},{"location":"code/Rest-API/rest_api.models.temperaturedata/","title":"TemperatureData","text":"<p>Namespace: Rest_API.Models</p> <p>Represents a single temperature data point with timestamp and value.</p> <pre><code>public class TemperatureData\n</code></pre> <p>Inheritance Object \u2192 TemperatureData</p>"},{"location":"code/Rest-API/rest_api.models.temperaturedata/#properties","title":"Properties","text":""},{"location":"code/Rest-API/rest_api.models.temperaturedata/#temperature","title":"Temperature","text":"<p>Gets or sets the temperature value.</p> <pre><code>public double Temperature { get; set; }\n</code></pre>"},{"location":"code/Rest-API/rest_api.models.temperaturedata/#property-value","title":"Property Value","text":"<p>Double</p>"},{"location":"code/Rest-API/rest_api.models.temperaturedata/#timestamp","title":"Timestamp","text":"<p>Gets or sets the timestamp of the temperature measurement.</p> <pre><code>public DateTime Timestamp { get; set; }\n</code></pre>"},{"location":"code/Rest-API/rest_api.models.temperaturedata/#property-value_1","title":"Property Value","text":"<p>DateTime</p>"},{"location":"code/Rest-API/rest_api.models.temperaturedata/#constructors","title":"Constructors","text":""},{"location":"code/Rest-API/rest_api.models.temperaturedata/#temperaturedata_1","title":"TemperatureData()","text":"<pre><code>public TemperatureData()\n</code></pre>"},{"location":"code/Rest-API/rest_api.models.temperaturedataoverview/","title":"TemperatureDataOverview","text":"<p>Namespace: Rest_API.Models</p> <p>Represents an overview of temperature data for different locations.</p> <pre><code>public class TemperatureDataOverview\n</code></pre> <p>Inheritance Object \u2192 TemperatureDataOverview</p>"},{"location":"code/Rest-API/rest_api.models.temperaturedataoverview/#properties","title":"Properties","text":""},{"location":"code/Rest-API/rest_api.models.temperaturedataoverview/#temperaturenord","title":"TemperatureNord","text":"<p>Gets or sets the list of temperature data for the north location.</p> <pre><code>public List&lt;TemperatureData&gt; TemperatureNord { get; set; }\n</code></pre>"},{"location":"code/Rest-API/rest_api.models.temperaturedataoverview/#property-value","title":"Property Value","text":"<p>List&lt;TemperatureData&gt;</p>"},{"location":"code/Rest-API/rest_api.models.temperaturedataoverview/#temperatureoutside","title":"TemperatureOutside","text":"<p>Gets or sets the list of temperature data for the outside location.</p> <pre><code>public List&lt;TemperatureData&gt; TemperatureOutside { get; set; }\n</code></pre>"},{"location":"code/Rest-API/rest_api.models.temperaturedataoverview/#property-value_1","title":"Property Value","text":"<p>List&lt;TemperatureData&gt;</p>"},{"location":"code/Rest-API/rest_api.models.temperaturedataoverview/#temperaturesouth","title":"TemperatureSouth","text":"<p>Gets or sets the list of temperature data for the south location.</p> <pre><code>public List&lt;TemperatureData&gt; TemperatureSouth { get; set; }\n</code></pre>"},{"location":"code/Rest-API/rest_api.models.temperaturedataoverview/#property-value_2","title":"Property Value","text":"<p>List&lt;TemperatureData&gt;</p>"},{"location":"code/Rest-API/rest_api.models.temperaturedataoverview/#constructors","title":"Constructors","text":""},{"location":"code/Rest-API/rest_api.models.temperaturedataoverview/#temperaturedataoverview_1","title":"TemperatureDataOverview()","text":""},{"location":"code/Rest-API/rest_api.models.temperaturedataoverview/#caution","title":"Caution","text":"<p>Constructors of types with required members are not supported in this version of your compiler.</p> <pre><code>public TemperatureDataOverview()\n</code></pre>"},{"location":"code/Rest-API/rest_api.program/","title":"Program","text":"<p>Namespace: Rest_API</p> <p>Main entry point for the application.</p> <pre><code>public class Program\n</code></pre> <p>Inheritance Object \u2192 Program</p>"},{"location":"code/Rest-API/rest_api.program/#constructors","title":"Constructors","text":""},{"location":"code/Rest-API/rest_api.program/#program_1","title":"Program()","text":"<pre><code>public Program()\n</code></pre>"},{"location":"code/Rest-API/rest_api.program/#methods","title":"Methods","text":""},{"location":"code/Rest-API/rest_api.program/#mainstring","title":"Main(String[])","text":"<p>Entry point for the Rest API application.</p> <pre><code>public static Task Main(String[] args)\n</code></pre>"},{"location":"code/Rest-API/rest_api.program/#parameters","title":"Parameters","text":"<p><code>args</code> String[]</p>"},{"location":"code/Rest-API/rest_api.program/#returns","title":"Returns","text":"<p>Task</p>"},{"location":"code/Rest-API/rest_api.services.auth.authenticationservice/","title":"AuthenticationService","text":"<p>Namespace: Rest_API.Services.Auth</p> <pre><code>public class AuthenticationService : IAuthenticationService\n</code></pre> <p>Inheritance Object \u2192 AuthenticationService Implements IAuthenticationService</p>"},{"location":"code/Rest-API/rest_api.services.auth.authenticationservice/#constructors","title":"Constructors","text":""},{"location":"code/Rest-API/rest_api.services.auth.authenticationservice/#authenticationserviceiloggerauthenticationservice-usermanagerapiuser-rolemanageridentityrole-itokenservice-itokenrepo","title":"AuthenticationService(ILogger&lt;AuthenticationService&gt;, UserManager&lt;ApiUser&gt;, RoleManager&lt;IdentityRole&gt;, ITokenService, ITokenRepo)","text":"<pre><code>public AuthenticationService(ILogger&lt;AuthenticationService&gt; logger, UserManager&lt;ApiUser&gt; userManager, RoleManager&lt;IdentityRole&gt; roleManager, ITokenService tokenService, ITokenRepo tokenRepo)\n</code></pre>"},{"location":"code/Rest-API/rest_api.services.auth.authenticationservice/#parameters","title":"Parameters","text":"<p><code>logger</code> ILogger&lt;AuthenticationService&gt;</p> <p><code>userManager</code> UserManager&lt;ApiUser&gt;</p> <p><code>roleManager</code> RoleManager&lt;IdentityRole&gt;</p> <p><code>tokenService</code> ITokenService</p> <p><code>tokenRepo</code> ITokenRepo</p>"},{"location":"code/Rest-API/rest_api.services.auth.authenticationservice/#methods","title":"Methods","text":""},{"location":"code/Rest-API/rest_api.services.auth.authenticationservice/#changepasswordapiuser-string-string","title":"ChangePassword(ApiUser, String, String)","text":"<p>Changes the password of a user.</p> <pre><code>public Task ChangePassword(ApiUser user, string currentPassword, string newPassword)\n</code></pre>"},{"location":"code/Rest-API/rest_api.services.auth.authenticationservice/#parameters_1","title":"Parameters","text":"<p><code>user</code> ApiUser The Object of the user.</p> <p><code>currentPassword</code> String The current password of the user.</p> <p><code>newPassword</code> String The new password to set.</p>"},{"location":"code/Rest-API/rest_api.services.auth.authenticationservice/#returns","title":"Returns","text":"<p>A task that represents the asynchronous operation. The task result contains a message  indicating the result of the password change.</p>"},{"location":"code/Rest-API/rest_api.services.auth.authenticationservice/#exceptions","title":"Exceptions","text":"<p>Exception Thrown when the password change fails.</p>"},{"location":"code/Rest-API/rest_api.services.auth.authenticationservice/#changeuserapiuser","title":"ChangeUser(ApiUser)","text":"<p>Changes the username of a user.</p> <pre><code>public Task ChangeUser(ApiUser user)\n</code></pre>"},{"location":"code/Rest-API/rest_api.services.auth.authenticationservice/#parameters_2","title":"Parameters","text":"<p><code>user</code> ApiUser The User Object of the user.</p>"},{"location":"code/Rest-API/rest_api.services.auth.authenticationservice/#returns_1","title":"Returns","text":"<p>A task that represents the asynchronous operation. The task result contains a message  indicating the result of the username change.</p>"},{"location":"code/Rest-API/rest_api.services.auth.authenticationservice/#exceptions_1","title":"Exceptions","text":"<p>Exception Thrown when the username change fails.</p>"},{"location":"code/Rest-API/rest_api.services.auth.authenticationservice/#deleteuserapiuser","title":"DeleteUser(ApiUser)","text":"<pre><code>public Task&lt;Boolean&gt; DeleteUser(ApiUser user)\n</code></pre>"},{"location":"code/Rest-API/rest_api.services.auth.authenticationservice/#parameters_3","title":"Parameters","text":"<p><code>user</code> ApiUser</p>"},{"location":"code/Rest-API/rest_api.services.auth.authenticationservice/#returns_2","title":"Returns","text":"<p>Task&lt;Boolean&gt;</p>"},{"location":"code/Rest-API/rest_api.services.auth.authenticationservice/#getuserbyidstring","title":"GetUserById(String)","text":"<pre><code>public Task&lt;ApiUser&gt; GetUserById(string userId)\n</code></pre>"},{"location":"code/Rest-API/rest_api.services.auth.authenticationservice/#parameters_4","title":"Parameters","text":"<p><code>userId</code> String</p>"},{"location":"code/Rest-API/rest_api.services.auth.authenticationservice/#returns_3","title":"Returns","text":"<p>Task&lt;ApiUser&gt;</p>"},{"location":"code/Rest-API/rest_api.services.auth.authenticationservice/#getuserinformations","title":"GetUserInformations()","text":"<pre><code>public Task&lt;List&lt;ApiUser&gt;&gt; GetUserInformations()\n</code></pre>"},{"location":"code/Rest-API/rest_api.services.auth.authenticationservice/#returns_4","title":"Returns","text":"<p>Task&lt;List&lt;ApiUser&gt;&gt;</p>"},{"location":"code/Rest-API/rest_api.services.auth.authenticationservice/#loginlogin","title":"Login(Login)","text":"<pre><code>public Task&lt;JwtToken&gt; Login(Login input)\n</code></pre>"},{"location":"code/Rest-API/rest_api.services.auth.authenticationservice/#parameters_5","title":"Parameters","text":"<p><code>input</code> Login</p>"},{"location":"code/Rest-API/rest_api.services.auth.authenticationservice/#returns_5","title":"Returns","text":"<p>Task&lt;JwtToken&gt;</p>"},{"location":"code/Rest-API/rest_api.services.auth.authenticationservice/#refreshtokenjwttoken","title":"RefreshToken(JwtToken)","text":"<pre><code>public Task&lt;JwtToken&gt; RefreshToken(JwtToken tokenModel)\n</code></pre>"},{"location":"code/Rest-API/rest_api.services.auth.authenticationservice/#parameters_6","title":"Parameters","text":"<p><code>tokenModel</code> JwtToken</p>"},{"location":"code/Rest-API/rest_api.services.auth.authenticationservice/#returns_6","title":"Returns","text":"<p>Task&lt;JwtToken&gt;</p>"},{"location":"code/Rest-API/rest_api.services.auth.authenticationservice/#registerregister","title":"Register(Register)","text":"<pre><code>public Task Register(Register input)\n</code></pre>"},{"location":"code/Rest-API/rest_api.services.auth.authenticationservice/#parameters_7","title":"Parameters","text":"<p><code>input</code> Register</p>"},{"location":"code/Rest-API/rest_api.services.auth.authenticationservice/#returns_7","title":"Returns","text":"<p>Task</p>"},{"location":"code/Rest-API/rest_api.services.auth.iauthenticationservice/","title":"IAuthenticationService","text":"<p>Namespace: Rest_API.Services.Auth</p> <p>Service interface for handling user authentication, registration, and user management operations.</p> <pre><code>public interface IAuthenticationService\n</code></pre>"},{"location":"code/Rest-API/rest_api.services.auth.iauthenticationservice/#methods","title":"Methods","text":""},{"location":"code/Rest-API/rest_api.services.auth.iauthenticationservice/#changepasswordapiuser-string-string","title":"ChangePassword(ApiUser, String, String)","text":"<p>Changes a user's password after validating the current password.</p> <pre><code>Task ChangePassword(ApiUser user, string currentPassword, string newPassword)\n</code></pre>"},{"location":"code/Rest-API/rest_api.services.auth.iauthenticationservice/#parameters","title":"Parameters","text":"<p><code>user</code> ApiUser The user whose password will be changed.</p> <p><code>currentPassword</code> String The user's current password for validation.</p> <p><code>newPassword</code> String The new password to set.</p>"},{"location":"code/Rest-API/rest_api.services.auth.iauthenticationservice/#returns","title":"Returns","text":"<p>A task representing the asynchronous password change operation.</p>"},{"location":"code/Rest-API/rest_api.services.auth.iauthenticationservice/#exceptions","title":"Exceptions","text":"<p>ArgumentException Thrown when parameters are null or invalid.</p> <p>UnauthorizedAccessException Thrown when current password is incorrect.</p>"},{"location":"code/Rest-API/rest_api.services.auth.iauthenticationservice/#changeuserapiuser","title":"ChangeUser(ApiUser)","text":"<p>Updates user information in the system.</p> <pre><code>Task ChangeUser(ApiUser user)\n</code></pre>"},{"location":"code/Rest-API/rest_api.services.auth.iauthenticationservice/#parameters_1","title":"Parameters","text":"<p><code>user</code> ApiUser The user object with updated information.</p>"},{"location":"code/Rest-API/rest_api.services.auth.iauthenticationservice/#returns_1","title":"Returns","text":"<p>A task representing the asynchronous user update operation.</p>"},{"location":"code/Rest-API/rest_api.services.auth.iauthenticationservice/#exceptions_1","title":"Exceptions","text":"<p>ArgumentException Thrown when user is null or contains invalid data.</p> <p>InvalidOperationException Thrown when user update fails.</p>"},{"location":"code/Rest-API/rest_api.services.auth.iauthenticationservice/#deleteuserapiuser","title":"DeleteUser(ApiUser)","text":"<p>Deletes a user from the system.</p> <pre><code>Task&lt;Boolean&gt; DeleteUser(ApiUser user)\n</code></pre>"},{"location":"code/Rest-API/rest_api.services.auth.iauthenticationservice/#parameters_2","title":"Parameters","text":"<p><code>user</code> ApiUser The user to delete from the system.</p>"},{"location":"code/Rest-API/rest_api.services.auth.iauthenticationservice/#returns_2","title":"Returns","text":"<p>A task containing true if deletion was successful, false otherwise.</p>"},{"location":"code/Rest-API/rest_api.services.auth.iauthenticationservice/#exceptions_2","title":"Exceptions","text":"<p>ArgumentException Thrown when user is null.</p> <p>InvalidOperationException Thrown when user deletion fails.</p>"},{"location":"code/Rest-API/rest_api.services.auth.iauthenticationservice/#getuserbyidstring","title":"GetUserById(String)","text":"<p>Retrieves a specific user by their unique identifier.</p> <pre><code>Task&lt;ApiUser&gt; GetUserById(string userId)\n</code></pre>"},{"location":"code/Rest-API/rest_api.services.auth.iauthenticationservice/#parameters_3","title":"Parameters","text":"<p><code>userId</code> String The unique identifier of the user to retrieve.</p>"},{"location":"code/Rest-API/rest_api.services.auth.iauthenticationservice/#returns_3","title":"Returns","text":"<p>A task containing the user if found, or null if not found.</p>"},{"location":"code/Rest-API/rest_api.services.auth.iauthenticationservice/#exceptions_3","title":"Exceptions","text":"<p>ArgumentException Thrown when userId is null or empty.</p>"},{"location":"code/Rest-API/rest_api.services.auth.iauthenticationservice/#getuserinformations","title":"GetUserInformations()","text":"<p>Retrieves a list of all users in the system.</p> <pre><code>Task&lt;List&lt;ApiUser&gt;&gt; GetUserInformations()\n</code></pre>"},{"location":"code/Rest-API/rest_api.services.auth.iauthenticationservice/#returns_4","title":"Returns","text":"<p>A task containing a list of all API users.</p>"},{"location":"code/Rest-API/rest_api.services.auth.iauthenticationservice/#exceptions_4","title":"Exceptions","text":"<p>UnauthorizedAccessException Thrown when user lacks sufficient permissions.</p>"},{"location":"code/Rest-API/rest_api.services.auth.iauthenticationservice/#loginlogin","title":"Login(Login)","text":"<p>Authenticates a user and returns JWT tokens for session management.</p> <pre><code>Task&lt;JwtToken&gt; Login(Login input)\n</code></pre>"},{"location":"code/Rest-API/rest_api.services.auth.iauthenticationservice/#parameters_4","title":"Parameters","text":"<p><code>input</code> Login Login credentials containing username and password.</p>"},{"location":"code/Rest-API/rest_api.services.auth.iauthenticationservice/#returns_5","title":"Returns","text":"<p>A task containing JWT access and refresh tokens.</p>"},{"location":"code/Rest-API/rest_api.services.auth.iauthenticationservice/#exceptions_5","title":"Exceptions","text":"<p>UnauthorizedAccessException Thrown when credentials are invalid.</p> <p>ArgumentException Thrown when login data is invalid.</p>"},{"location":"code/Rest-API/rest_api.services.auth.iauthenticationservice/#refreshtokenjwttoken","title":"RefreshToken(JwtToken)","text":"<p>Refreshes an expired access token using a valid refresh token.</p> <pre><code>Task&lt;JwtToken&gt; RefreshToken(JwtToken tokenModel)\n</code></pre>"},{"location":"code/Rest-API/rest_api.services.auth.iauthenticationservice/#parameters_5","title":"Parameters","text":"<p><code>tokenModel</code> JwtToken JWT token model containing the refresh token.</p>"},{"location":"code/Rest-API/rest_api.services.auth.iauthenticationservice/#returns_6","title":"Returns","text":"<p>A task containing new JWT access and refresh tokens.</p>"},{"location":"code/Rest-API/rest_api.services.auth.iauthenticationservice/#exceptions_6","title":"Exceptions","text":"<p>UnauthorizedAccessException Thrown when refresh token is invalid or expired.</p> <p>ArgumentException Thrown when token model is null or invalid.</p>"},{"location":"code/Rest-API/rest_api.services.auth.iauthenticationservice/#registerregister","title":"Register(Register)","text":"<p>Registers a new user in the system.</p> <pre><code>Task Register(Register input)\n</code></pre>"},{"location":"code/Rest-API/rest_api.services.auth.iauthenticationservice/#parameters_6","title":"Parameters","text":"<p><code>input</code> Register Registration data containing user credentials and information.</p>"},{"location":"code/Rest-API/rest_api.services.auth.iauthenticationservice/#returns_7","title":"Returns","text":"<p>A task representing the asynchronous registration operation.</p>"},{"location":"code/Rest-API/rest_api.services.auth.iauthenticationservice/#exceptions_7","title":"Exceptions","text":"<p>ArgumentException Thrown when registration data is invalid.</p> <p>InvalidOperationException Thrown when user already exists or registration fails.</p>"},{"location":"code/Rest-API/rest_api.services.temp.itempservice/","title":"ITempService","text":"<p>Namespace: Rest_API.Services.Temp</p> <pre><code>public interface ITempService\n</code></pre>"},{"location":"code/Rest-API/rest_api.services.temp.itempservice/#methods","title":"Methods","text":""},{"location":"code/Rest-API/rest_api.services.temp.itempservice/#getcoordinatesint32","title":"GetCoordinates(Int32)","text":"<p>Retrieves the coordinates for the postalcode chosen by the admin if there is no entry in the database already.</p> <pre><code>Task GetCoordinates(int postalCode)\n</code></pre>"},{"location":"code/Rest-API/rest_api.services.temp.itempservice/#parameters","title":"Parameters","text":"<p><code>postalCode</code> Int32 The postalcode of the city that was chosen by the admin.</p>"},{"location":"code/Rest-API/rest_api.services.temp.itempservice/#returns","title":"Returns","text":"<p>Task</p>"},{"location":"code/Rest-API/rest_api.services.temp.itempservice/#showavailablelocations","title":"ShowAvailableLocations()","text":"<p>Retrieves all postalcodes that are saved in the database for the user to chose from.</p> <pre><code>Task&lt;List&lt;Tuple&lt;Int32, String&gt;&gt;&gt; ShowAvailableLocations()\n</code></pre>"},{"location":"code/Rest-API/rest_api.services.temp.itempservice/#returns_1","title":"Returns","text":"<p>A list containing all postalcodes.</p>"},{"location":"code/Rest-API/rest_api.services.temp.tempservice/","title":"TempService","text":"<p>Namespace: Rest_API.Services.Temp</p> <p>Provides operations related to the location for the outside temperature data, for example getting the right coordinates for the postalcode.</p> <pre><code>public class TempService : ITempService\n</code></pre> <p>Inheritance Object \u2192 TempService Implements ITempService</p>"},{"location":"code/Rest-API/rest_api.services.temp.tempservice/#constructors","title":"Constructors","text":""},{"location":"code/Rest-API/rest_api.services.temp.tempservice/#tempserviceiloggertempservice-ihttpclientfactory-icoordinaterepo-iconfiguration","title":"TempService(ILogger&lt;TempService&gt;, IHttpClientFactory, ICoordinateRepo, IConfiguration)","text":"<p>Initializes a new instance of the TempService class.</p> <pre><code>public TempService(ILogger&lt;TempService&gt; logger, IHttpClientFactory httpClientFactory, ICoordinateRepo coordinateRepo, IConfiguration configuration)\n</code></pre>"},{"location":"code/Rest-API/rest_api.services.temp.tempservice/#parameters","title":"Parameters","text":"<p><code>logger</code> ILogger&lt;TempService&gt; The logger instance for logging actions and errors.</p> <p><code>httpClientFactory</code> IHttpClientFactory The httpClient for API calls.</p> <p><code>coordinateRepo</code> ICoordinateRepo The settingsRepo instance for connection with the postgres database.</p> <p><code>configuration</code> IConfiguration</p>"},{"location":"code/Rest-API/rest_api.services.temp.tempservice/#methods","title":"Methods","text":""},{"location":"code/Rest-API/rest_api.services.temp.tempservice/#getcoordinatesint32","title":"GetCoordinates(Int32)","text":"<pre><code>public Task GetCoordinates(int postalCode)\n</code></pre>"},{"location":"code/Rest-API/rest_api.services.temp.tempservice/#parameters_1","title":"Parameters","text":"<p><code>postalCode</code> Int32</p>"},{"location":"code/Rest-API/rest_api.services.temp.tempservice/#returns","title":"Returns","text":"<p>Task</p>"},{"location":"code/Rest-API/rest_api.services.temp.tempservice/#showavailablelocations","title":"ShowAvailableLocations()","text":"<pre><code>public Task&lt;List&lt;Tuple&lt;Int32, String&gt;&gt;&gt; ShowAvailableLocations()\n</code></pre>"},{"location":"code/Rest-API/rest_api.services.temp.tempservice/#returns_1","title":"Returns","text":"<p>Task&lt;List&lt;Tuple&lt;Int32, String&gt;&gt;&gt;</p>"},{"location":"code/Rest-API/rest_api.services.token.itokenservice/","title":"ITokenService","text":"<p>Namespace: Rest_API.Services.Token</p> <p>Service responsible for generating JWT access and refresh tokens.</p> <pre><code>public interface ITokenService\n</code></pre>"},{"location":"code/Rest-API/rest_api.services.token.itokenservice/#methods","title":"Methods","text":""},{"location":"code/Rest-API/rest_api.services.token.itokenservice/#generateaccesstokenienumerableclaim","title":"GenerateAccessToken(IEnumerable&lt;Claim&gt;)","text":"<p>Generates a JWT access token containing the specified claims.</p> <pre><code>string GenerateAccessToken(IEnumerable&lt;Claim&gt; claims)\n</code></pre>"},{"location":"code/Rest-API/rest_api.services.token.itokenservice/#parameters","title":"Parameters","text":"<p><code>claims</code> IEnumerable&lt;Claim&gt; Claims to include in the token.</p>"},{"location":"code/Rest-API/rest_api.services.token.itokenservice/#returns","title":"Returns","text":"<p>JWT access token as a string.</p>"},{"location":"code/Rest-API/rest_api.services.token.itokenservice/#generaterefreshtoken","title":"GenerateRefreshToken()","text":"<p>Generates a secure random refresh token.</p> <pre><code>string GenerateRefreshToken()\n</code></pre>"},{"location":"code/Rest-API/rest_api.services.token.itokenservice/#returns_1","title":"Returns","text":"<p>Refresh token as a base64 string.</p>"},{"location":"code/Rest-API/rest_api.services.token.itokenservice/#getprincipalfromexpiredtokenstring","title":"GetPrincipalFromExpiredToken(String)","text":"<p>Retrieves the claims principal from an expired access token.</p> <pre><code>ClaimsPrincipal GetPrincipalFromExpiredToken(string accessToken)\n</code></pre>"},{"location":"code/Rest-API/rest_api.services.token.itokenservice/#parameters_1","title":"Parameters","text":"<p><code>accessToken</code> String The expired access token.</p>"},{"location":"code/Rest-API/rest_api.services.token.itokenservice/#returns_2","title":"Returns","text":"<p>Claims principal containing the token's claims.</p>"},{"location":"code/Rest-API/rest_api.services.token.tokenservice/","title":"TokenService","text":"<p>Namespace: Rest_API.Services.Token</p> <pre><code>public class TokenService : ITokenService\n</code></pre> <p>Inheritance Object \u2192 TokenService Implements ITokenService</p>"},{"location":"code/Rest-API/rest_api.services.token.tokenservice/#constructors","title":"Constructors","text":""},{"location":"code/Rest-API/rest_api.services.token.tokenservice/#tokenserviceiconfiguration-iloggertokenservice","title":"TokenService(IConfiguration, ILogger&lt;TokenService&gt;)","text":"<p>Initializes a new instance of the TokenService class.</p> <pre><code>public TokenService(IConfiguration configuration, ILogger&lt;TokenService&gt; logger)\n</code></pre>"},{"location":"code/Rest-API/rest_api.services.token.tokenservice/#parameters","title":"Parameters","text":"<p><code>configuration</code> IConfiguration Application configuration for JWT settings.</p> <p><code>logger</code> ILogger&lt;TokenService&gt; Logger instance for logging operations.</p>"},{"location":"code/Rest-API/rest_api.services.token.tokenservice/#methods","title":"Methods","text":""},{"location":"code/Rest-API/rest_api.services.token.tokenservice/#generateaccesstokenienumerableclaim","title":"GenerateAccessToken(IEnumerable&lt;Claim&gt;)","text":"<pre><code>public string GenerateAccessToken(IEnumerable&lt;Claim&gt; claims)\n</code></pre>"},{"location":"code/Rest-API/rest_api.services.token.tokenservice/#parameters_1","title":"Parameters","text":"<p><code>claims</code> IEnumerable&lt;Claim&gt;</p>"},{"location":"code/Rest-API/rest_api.services.token.tokenservice/#returns","title":"Returns","text":"<p>String</p>"},{"location":"code/Rest-API/rest_api.services.token.tokenservice/#generaterefreshtoken","title":"GenerateRefreshToken()","text":"<pre><code>public string GenerateRefreshToken()\n</code></pre>"},{"location":"code/Rest-API/rest_api.services.token.tokenservice/#returns_1","title":"Returns","text":"<p>String</p>"},{"location":"code/Rest-API/rest_api.services.token.tokenservice/#getprincipalfromexpiredtokenstring","title":"GetPrincipalFromExpiredToken(String)","text":"<pre><code>public ClaimsPrincipal GetPrincipalFromExpiredToken(string accessToken)\n</code></pre>"},{"location":"code/Rest-API/rest_api.services.token.tokenservice/#parameters_2","title":"Parameters","text":"<p><code>accessToken</code> String</p>"},{"location":"code/Rest-API/rest_api.services.token.tokenservice/#returns_2","title":"Returns","text":"<p>ClaimsPrincipal</p>"},{"location":"code/Rest-API/rest_api.services.user.iuserservice/","title":"IUserService","text":"<p>Namespace: Rest_API.Services.User</p> <p>Service interface for user management operations including user retrieval, updates, and deletion.</p> <pre><code>public interface IUserService\n</code></pre>"},{"location":"code/Rest-API/rest_api.services.user.iuserservice/#methods","title":"Methods","text":""},{"location":"code/Rest-API/rest_api.services.user.iuserservice/#changepasswordapiuser-string-string","title":"ChangePassword(ApiUser, String, String)","text":"<p>Changes a user's password after validating the current password.</p> <pre><code>Task ChangePassword(ApiUser user, string currentPassword, string newPassword)\n</code></pre>"},{"location":"code/Rest-API/rest_api.services.user.iuserservice/#parameters","title":"Parameters","text":"<p><code>user</code> ApiUser The user whose password will be changed.</p> <p><code>currentPassword</code> String The user's current password for validation.</p> <p><code>newPassword</code> String The new password to set.</p>"},{"location":"code/Rest-API/rest_api.services.user.iuserservice/#returns","title":"Returns","text":"<p>A task representing the asynchronous password change operation.</p>"},{"location":"code/Rest-API/rest_api.services.user.iuserservice/#exceptions","title":"Exceptions","text":"<p>ArgumentException Thrown when parameters are null or invalid.</p> <p>UnauthorizedAccessException Thrown when current password is incorrect.</p>"},{"location":"code/Rest-API/rest_api.services.user.iuserservice/#changeuserapiuser","title":"ChangeUser(ApiUser)","text":"<p>Updates user information in the system.</p> <pre><code>Task ChangeUser(ApiUser user)\n</code></pre>"},{"location":"code/Rest-API/rest_api.services.user.iuserservice/#parameters_1","title":"Parameters","text":"<p><code>user</code> ApiUser The user object with updated information.</p>"},{"location":"code/Rest-API/rest_api.services.user.iuserservice/#returns_1","title":"Returns","text":"<p>A task representing the asynchronous user update operation.</p>"},{"location":"code/Rest-API/rest_api.services.user.iuserservice/#exceptions_1","title":"Exceptions","text":"<p>ArgumentException Thrown when user is null or contains invalid data.</p> <p>InvalidOperationException Thrown when user update fails.</p>"},{"location":"code/Rest-API/rest_api.services.user.iuserservice/#deleteuserapiuser","title":"DeleteUser(ApiUser)","text":"<p>Deletes a user from the system.</p> <pre><code>Task&lt;Boolean&gt; DeleteUser(ApiUser user)\n</code></pre>"},{"location":"code/Rest-API/rest_api.services.user.iuserservice/#parameters_2","title":"Parameters","text":"<p><code>user</code> ApiUser The user to delete from the system.</p>"},{"location":"code/Rest-API/rest_api.services.user.iuserservice/#returns_2","title":"Returns","text":"<p>A task containing true if deletion was successful, false otherwise.</p>"},{"location":"code/Rest-API/rest_api.services.user.iuserservice/#exceptions_2","title":"Exceptions","text":"<p>ArgumentException Thrown when user is null.</p> <p>InvalidOperationException Thrown when user deletion fails.</p>"},{"location":"code/Rest-API/rest_api.services.user.iuserservice/#getuserbyidstring","title":"GetUserById(String)","text":"<p>Retrieves a specific user by their unique identifier.</p> <pre><code>Task&lt;ApiUser&gt; GetUserById(string userId)\n</code></pre>"},{"location":"code/Rest-API/rest_api.services.user.iuserservice/#parameters_3","title":"Parameters","text":"<p><code>userId</code> String The unique identifier of the user to retrieve.</p>"},{"location":"code/Rest-API/rest_api.services.user.iuserservice/#returns_3","title":"Returns","text":"<p>A task containing the user if found, or null if not found.</p>"},{"location":"code/Rest-API/rest_api.services.user.iuserservice/#exceptions_3","title":"Exceptions","text":"<p>ArgumentException Thrown when userId is null or empty.</p>"},{"location":"code/Rest-API/rest_api.services.user.iuserservice/#getuserinformations","title":"GetUserInformations()","text":"<p>Retrieves a list of all users in the system.</p> <pre><code>Task&lt;List&lt;ApiUser&gt;&gt; GetUserInformations()\n</code></pre>"},{"location":"code/Rest-API/rest_api.services.user.iuserservice/#returns_4","title":"Returns","text":"<p>A task containing a list of all API users.</p>"},{"location":"code/Rest-API/rest_api.services.user.iuserservice/#exceptions_4","title":"Exceptions","text":"<p>UnauthorizedAccessException Thrown when user lacks sufficient permissions.</p>"},{"location":"code/Rest-API/rest_api.services.user.userservice/","title":"UserService","text":"<p>Namespace: Rest_API.Services.User</p> <p>Provides user-related operations such as retrieving, updating, deleting users, and changing passwords.</p> <pre><code>public class UserService : IUserService\n</code></pre> <p>Inheritance Object \u2192 UserService Implements IUserService</p>"},{"location":"code/Rest-API/rest_api.services.user.userservice/#constructors","title":"Constructors","text":""},{"location":"code/Rest-API/rest_api.services.user.userservice/#userserviceiloggeruserservice-usermanagerapiuser","title":"UserService(ILogger&lt;UserService&gt;, UserManager&lt;ApiUser&gt;)","text":"<p>Initializes a new instance of the UserService class.</p> <pre><code>public UserService(ILogger&lt;UserService&gt; logger, UserManager&lt;ApiUser&gt; userManager)\n</code></pre>"},{"location":"code/Rest-API/rest_api.services.user.userservice/#parameters","title":"Parameters","text":"<p><code>logger</code> ILogger&lt;UserService&gt; The logger instance for logging actions and errors.</p> <p><code>userManager</code> UserManager&lt;ApiUser&gt; The user manager for user operations.</p>"},{"location":"code/Rest-API/rest_api.services.user.userservice/#methods","title":"Methods","text":""},{"location":"code/Rest-API/rest_api.services.user.userservice/#changepasswordapiuser-string-string","title":"ChangePassword(ApiUser, String, String)","text":"<p>Changes the password of a user.</p> <pre><code>public Task ChangePassword(ApiUser user, string currentPassword, string newPassword)\n</code></pre>"},{"location":"code/Rest-API/rest_api.services.user.userservice/#parameters_1","title":"Parameters","text":"<p><code>user</code> ApiUser</p> <p><code>currentPassword</code> String</p> <p><code>newPassword</code> String</p>"},{"location":"code/Rest-API/rest_api.services.user.userservice/#returns","title":"Returns","text":"<p>Task</p>"},{"location":"code/Rest-API/rest_api.services.user.userservice/#changeuserapiuser","title":"ChangeUser(ApiUser)","text":"<pre><code>public Task ChangeUser(ApiUser user)\n</code></pre>"},{"location":"code/Rest-API/rest_api.services.user.userservice/#parameters_2","title":"Parameters","text":"<p><code>user</code> ApiUser</p>"},{"location":"code/Rest-API/rest_api.services.user.userservice/#returns_1","title":"Returns","text":"<p>Task</p>"},{"location":"code/Rest-API/rest_api.services.user.userservice/#deleteuserapiuser","title":"DeleteUser(ApiUser)","text":"<pre><code>public Task&lt;Boolean&gt; DeleteUser(ApiUser user)\n</code></pre>"},{"location":"code/Rest-API/rest_api.services.user.userservice/#parameters_3","title":"Parameters","text":"<p><code>user</code> ApiUser</p>"},{"location":"code/Rest-API/rest_api.services.user.userservice/#returns_2","title":"Returns","text":"<p>Task&lt;Boolean&gt;</p>"},{"location":"code/Rest-API/rest_api.services.user.userservice/#getuserbyidstring","title":"GetUserById(String)","text":"<pre><code>public Task&lt;ApiUser&gt; GetUserById(string userId)\n</code></pre>"},{"location":"code/Rest-API/rest_api.services.user.userservice/#parameters_4","title":"Parameters","text":"<p><code>userId</code> String</p>"},{"location":"code/Rest-API/rest_api.services.user.userservice/#returns_3","title":"Returns","text":"<p>Task&lt;ApiUser&gt;</p>"},{"location":"code/Rest-API/rest_api.services.user.userservice/#getuserinformations","title":"GetUserInformations()","text":"<pre><code>public Task&lt;List&lt;ApiUser&gt;&gt; GetUserInformations()\n</code></pre>"},{"location":"code/Rest-API/rest_api.services.user.userservice/#returns_4","title":"Returns","text":"<p>Task&lt;List&lt;ApiUser&gt;&gt;</p>"},{"location":"code/UnitTests/","title":"Assembly UnitTests","text":""},{"location":"code/UnitTests/#namespace-unittestscontrollers","title":"Namespace UnitTests.Controllers","text":"<ul> <li> <p>AuthenticationControllerTests</p> </li> <li> <p>TempControllerTests</p> </li> <li> <p>TemperatureDataControllerTests</p> </li> <li> <p>TopicControllerTests</p> </li> <li> <p>UserInfoControllerTests</p> </li> </ul>"},{"location":"code/UnitTests/#namespace-unittestsmqttreceiver","title":"Namespace UnitTests.MqttReceiver","text":"<ul> <li> <p>ConnectionTests</p> </li> <li> <p>NullMetaListConverterTests</p> </li> <li> <p>ReceiverTests</p> </li> <li> <p>TempSensorReadingTests</p> </li> <li> <p>WorkerTests</p> </li> </ul>"},{"location":"code/UnitTests/#namespace-unittestsrepositories","title":"Namespace UnitTests.Repositories","text":"<ul> <li> <p>InfluxRepoTests</p> </li> <li> <p>SettingsRepoTests</p> </li> </ul>"},{"location":"code/UnitTests/#namespace-unittestsservices","title":"Namespace UnitTests.Services","text":"<ul> <li> <p>AuthenticationServiceTests</p> </li> <li> <p>TempServiceTests</p> </li> <li> <p>TokenServiceTests</p> </li> <li> <p>UserServiceTests</p> </li> </ul>"},{"location":"code/UnitTests/unittests.controllers.authenticationcontrollertests/","title":"AuthenticationControllerTests","text":"<p>Namespace: UnitTests.Controllers</p> <p>Unit tests for the AuthenticationController class, verifying authentication operations including login, registration, and token refresh functionality.</p> <pre><code>public class AuthenticationControllerTests\n</code></pre> <p>Inheritance Object \u2192 AuthenticationControllerTests</p>"},{"location":"code/UnitTests/unittests.controllers.authenticationcontrollertests/#constructors","title":"Constructors","text":""},{"location":"code/UnitTests/unittests.controllers.authenticationcontrollertests/#authenticationcontrollertests_1","title":"AuthenticationControllerTests()","text":"<pre><code>public AuthenticationControllerTests()\n</code></pre>"},{"location":"code/UnitTests/unittests.controllers.authenticationcontrollertests/#methods","title":"Methods","text":""},{"location":"code/UnitTests/unittests.controllers.authenticationcontrollertests/#login_shouldloginformationmessages","title":"Login_ShouldLogInformationMessages()","text":"<p>Tests that login operation logs appropriate information messages during execution.</p> <pre><code>public Task Login_ShouldLogInformationMessages()\n</code></pre>"},{"location":"code/UnitTests/unittests.controllers.authenticationcontrollertests/#returns","title":"Returns","text":"<p>Task</p>"},{"location":"code/UnitTests/unittests.controllers.authenticationcontrollertests/#login_withauthenticationexception_shouldreturnunauthorizedwithproblemdetails","title":"Login_WithAuthenticationException_ShouldReturnUnauthorizedWithProblemDetails()","text":"<p>Tests that login with authentication exception returns an Unauthorized result with problem details.</p> <pre><code>public Task Login_WithAuthenticationException_ShouldReturnUnauthorizedWithProblemDetails()\n</code></pre>"},{"location":"code/UnitTests/unittests.controllers.authenticationcontrollertests/#returns_1","title":"Returns","text":"<p>Task</p>"},{"location":"code/UnitTests/unittests.controllers.authenticationcontrollertests/#login_withgenericexception_shouldreturninternalservererrorwithproblemdetails","title":"Login_WithGenericException_ShouldReturnInternalServerErrorWithProblemDetails()","text":"<p>Tests that login with generic exception returns an InternalServerError result with problem details.</p> <pre><code>public Task Login_WithGenericException_ShouldReturnInternalServerErrorWithProblemDetails()\n</code></pre>"},{"location":"code/UnitTests/unittests.controllers.authenticationcontrollertests/#returns_2","title":"Returns","text":"<p>Task</p>"},{"location":"code/UnitTests/unittests.controllers.authenticationcontrollertests/#login_withinvalidmodelstate_shouldreturnbadrequestwithvalidationproblemdetails","title":"Login_WithInvalidModelState_ShouldReturnBadRequestWithValidationProblemDetails()","text":"<p>Tests that login with invalid model state returns a BadRequest result with validation problem details.</p> <pre><code>public Task Login_WithInvalidModelState_ShouldReturnBadRequestWithValidationProblemDetails()\n</code></pre>"},{"location":"code/UnitTests/unittests.controllers.authenticationcontrollertests/#returns_3","title":"Returns","text":"<p>Task</p>"},{"location":"code/UnitTests/unittests.controllers.authenticationcontrollertests/#login_withinvalidoperationexception_shouldreturninternalservererrorwithproblemdetails","title":"Login_WithInvalidOperationException_ShouldReturnInternalServerErrorWithProblemDetails()","text":"<p>Tests that login with InvalidOperationException returns an InternalServerError result with problem details.</p> <pre><code>public Task Login_WithInvalidOperationException_ShouldReturnInternalServerErrorWithProblemDetails()\n</code></pre>"},{"location":"code/UnitTests/unittests.controllers.authenticationcontrollertests/#returns_4","title":"Returns","text":"<p>Task</p>"},{"location":"code/UnitTests/unittests.controllers.authenticationcontrollertests/#login_withvalidcredentials_shouldreturnokwithjwttoken","title":"Login_WithValidCredentials_ShouldReturnOkWithJwtToken()","text":"<p>Tests that login with valid credentials returns an OK result with a JWT token.</p> <pre><code>public Task Login_WithValidCredentials_ShouldReturnOkWithJwtToken()\n</code></pre>"},{"location":"code/UnitTests/unittests.controllers.authenticationcontrollertests/#returns_5","title":"Returns","text":"<p>Task</p>"},{"location":"code/UnitTests/unittests.controllers.authenticationcontrollertests/#refresh_withexception_shouldreturninternalservererrorwithproblemdetails","title":"Refresh_WithException_ShouldReturnInternalServerErrorWithProblemDetails()","text":"<p>Tests that token refresh with exception returns an InternalServerError result with problem details.</p> <pre><code>public Task Refresh_WithException_ShouldReturnInternalServerErrorWithProblemDetails()\n</code></pre>"},{"location":"code/UnitTests/unittests.controllers.authenticationcontrollertests/#returns_6","title":"Returns","text":"<p>Task</p>"},{"location":"code/UnitTests/unittests.controllers.authenticationcontrollertests/#refresh_withinvalidmodelstate_shouldreturnbadrequestwithvalidationproblemdetails","title":"Refresh_WithInvalidModelState_ShouldReturnBadRequestWithValidationProblemDetails()","text":"<p>Tests that token refresh with invalid model state returns a BadRequest result with validation problem details.</p> <pre><code>public Task Refresh_WithInvalidModelState_ShouldReturnBadRequestWithValidationProblemDetails()\n</code></pre>"},{"location":"code/UnitTests/unittests.controllers.authenticationcontrollertests/#returns_7","title":"Returns","text":"<p>Task</p>"},{"location":"code/UnitTests/unittests.controllers.authenticationcontrollertests/#refresh_withvalidtoken_shouldreturnokwithnewjwttoken","title":"Refresh_WithValidToken_ShouldReturnOkWithNewJwtToken()","text":"<p>Tests that token refresh with valid token returns an OK result with new JWT token.</p> <pre><code>public Task Refresh_WithValidToken_ShouldReturnOkWithNewJwtToken()\n</code></pre>"},{"location":"code/UnitTests/unittests.controllers.authenticationcontrollertests/#returns_8","title":"Returns","text":"<p>Task</p>"},{"location":"code/UnitTests/unittests.controllers.authenticationcontrollertests/#register_shouldloginformationmessages","title":"Register_ShouldLogInformationMessages()","text":"<p>Tests that registration operation logs appropriate information messages during execution.</p> <pre><code>public Task Register_ShouldLogInformationMessages()\n</code></pre>"},{"location":"code/UnitTests/unittests.controllers.authenticationcontrollertests/#returns_9","title":"Returns","text":"<p>Task</p>"},{"location":"code/UnitTests/unittests.controllers.authenticationcontrollertests/#register_withexception_shouldreturninternalservererrorwithproblemdetails","title":"Register_WithException_ShouldReturnInternalServerErrorWithProblemDetails()","text":"<p>Tests that registration with exception returns an InternalServerError result with problem details.</p> <pre><code>public Task Register_WithException_ShouldReturnInternalServerErrorWithProblemDetails()\n</code></pre>"},{"location":"code/UnitTests/unittests.controllers.authenticationcontrollertests/#returns_10","title":"Returns","text":"<p>Task</p>"},{"location":"code/UnitTests/unittests.controllers.authenticationcontrollertests/#register_withinvalidmodelstate_shouldreturnbadrequestwithvalidationproblemdetails","title":"Register_WithInvalidModelState_ShouldReturnBadRequestWithValidationProblemDetails()","text":"<p>Tests that registration with invalid model state returns a BadRequest result with validation problem details.</p> <pre><code>public Task Register_WithInvalidModelState_ShouldReturnBadRequestWithValidationProblemDetails()\n</code></pre>"},{"location":"code/UnitTests/unittests.controllers.authenticationcontrollertests/#returns_11","title":"Returns","text":"<p>Task</p>"},{"location":"code/UnitTests/unittests.controllers.authenticationcontrollertests/#register_withvalidinput_shouldreturnok","title":"Register_WithValidInput_ShouldReturnOk()","text":"<p>Tests that registration with valid input returns an OK result.</p> <pre><code>public Task Register_WithValidInput_ShouldReturnOk()\n</code></pre>"},{"location":"code/UnitTests/unittests.controllers.authenticationcontrollertests/#returns_12","title":"Returns","text":"<p>Task</p>"},{"location":"code/UnitTests/unittests.controllers.authenticationcontrollertests/#setup","title":"Setup()","text":"<p>Sets up test fixtures and initializes mocks before each test execution.</p> <pre><code>public void Setup()\n</code></pre>"},{"location":"code/UnitTests/unittests.controllers.tempcontrollertests/","title":"TempControllerTests","text":"<p>Namespace: UnitTests.Controllers</p> <p>Unit tests for the TempController class, verifying temperature operations and location management functionality.</p> <pre><code>public class TempControllerTests\n</code></pre> <p>Inheritance Object \u2192 TempControllerTests</p>"},{"location":"code/UnitTests/unittests.controllers.tempcontrollertests/#constructors","title":"Constructors","text":""},{"location":"code/UnitTests/unittests.controllers.tempcontrollertests/#tempcontrollertests_1","title":"TempControllerTests()","text":"<pre><code>public TempControllerTests()\n</code></pre>"},{"location":"code/UnitTests/unittests.controllers.tempcontrollertests/#methods","title":"Methods","text":""},{"location":"code/UnitTests/unittests.controllers.tempcontrollertests/#constructor_withvalidparameters_shouldcreateinstance","title":"Constructor_WithValidParameters_ShouldCreateInstance()","text":"<p>Tests that the constructor creates a valid instance when provided with valid parameters.</p> <pre><code>public void Constructor_WithValidParameters_ShouldCreateInstance()\n</code></pre>"},{"location":"code/UnitTests/unittests.controllers.tempcontrollertests/#getallpostalcodes_withemptydata_shouldreturnokwithemptylist","title":"GetAllPostalcodes_WithEmptyData_ShouldReturnOkWithEmptyList()","text":"<p>Tests that GetAllPostalcodes returns OK with empty list when no postal codes exist.</p> <pre><code>public Task GetAllPostalcodes_WithEmptyData_ShouldReturnOkWithEmptyList()\n</code></pre>"},{"location":"code/UnitTests/unittests.controllers.tempcontrollertests/#returns","title":"Returns","text":"<p>Task</p>"},{"location":"code/UnitTests/unittests.controllers.tempcontrollertests/#getallpostalcodes_withexception_shouldlogerror","title":"GetAllPostalcodes_WithException_ShouldLogError()","text":"<p>Tests that GetAllPostalcodes logs error when exception occurs.</p> <pre><code>public Task GetAllPostalcodes_WithException_ShouldLogError()\n</code></pre>"},{"location":"code/UnitTests/unittests.controllers.tempcontrollertests/#returns_1","title":"Returns","text":"<p>Task</p>"},{"location":"code/UnitTests/unittests.controllers.tempcontrollertests/#getallpostalcodes_withexception_shouldreturninternalservererror","title":"GetAllPostalcodes_WithException_ShouldReturnInternalServerError()","text":"<p>Tests that GetAllPostalcodes returns InternalServerError when service throws exception.</p> <pre><code>public Task GetAllPostalcodes_WithException_ShouldReturnInternalServerError()\n</code></pre>"},{"location":"code/UnitTests/unittests.controllers.tempcontrollertests/#returns_2","title":"Returns","text":"<p>Task</p>"},{"location":"code/UnitTests/unittests.controllers.tempcontrollertests/#getallpostalcodes_withvaliddata_shouldreturnokwithpostalcodes","title":"GetAllPostalcodes_WithValidData_ShouldReturnOkWithPostalcodes()","text":"<p>Tests that GetAllPostalcodes returns OK with postal codes when service returns data.</p> <pre><code>public Task GetAllPostalcodes_WithValidData_ShouldReturnOkWithPostalcodes()\n</code></pre>"},{"location":"code/UnitTests/unittests.controllers.tempcontrollertests/#returns_3","title":"Returns","text":"<p>Task</p>"},{"location":"code/UnitTests/unittests.controllers.tempcontrollertests/#insertlocation_withgenericexception_shouldreturninternalservererror","title":"InsertLocation_WithGenericException_ShouldReturnInternalServerError()","text":"<p>Tests that InsertLocation returns InternalServerError when generic exception is thrown.</p> <pre><code>public Task InsertLocation_WithGenericException_ShouldReturnInternalServerError()\n</code></pre>"},{"location":"code/UnitTests/unittests.controllers.tempcontrollertests/#returns_4","title":"Returns","text":"<p>Task</p>"},{"location":"code/UnitTests/unittests.controllers.tempcontrollertests/#insertlocation_withinvalidoperationexception_shouldlogerror","title":"InsertLocation_WithInvalidOperationException_ShouldLogError()","text":"<p>Tests that InsertLocation logs error when InvalidOperationException occurs.</p> <pre><code>public Task InsertLocation_WithInvalidOperationException_ShouldLogError()\n</code></pre>"},{"location":"code/UnitTests/unittests.controllers.tempcontrollertests/#returns_5","title":"Returns","text":"<p>Task</p>"},{"location":"code/UnitTests/unittests.controllers.tempcontrollertests/#insertlocation_withinvalidoperationexception_shouldreturninternalservererror","title":"InsertLocation_WithInvalidOperationException_ShouldReturnInternalServerError()","text":"<p>Tests that InsertLocation returns InternalServerError when InvalidOperationException is thrown.</p> <pre><code>public Task InsertLocation_WithInvalidOperationException_ShouldReturnInternalServerError()\n</code></pre>"},{"location":"code/UnitTests/unittests.controllers.tempcontrollertests/#returns_6","title":"Returns","text":"<p>Task</p>"},{"location":"code/UnitTests/unittests.controllers.tempcontrollertests/#insertlocation_withvalidpostalcode_shouldreturnok","title":"InsertLocation_WithValidPostalcode_ShouldReturnOk()","text":"<p>Tests that InsertLocation returns OK when location is inserted successfully.</p> <pre><code>public Task InsertLocation_WithValidPostalcode_ShouldReturnOk()\n</code></pre>"},{"location":"code/UnitTests/unittests.controllers.tempcontrollertests/#returns_7","title":"Returns","text":"<p>Task</p>"},{"location":"code/UnitTests/unittests.controllers.tempcontrollertests/#removepostalcode_withexception_shouldlogerror","title":"RemovePostalcode_WithException_ShouldLogError()","text":"<p>Tests that RemovePostalcode logs error when exception occurs.</p> <pre><code>public Task RemovePostalcode_WithException_ShouldLogError()\n</code></pre>"},{"location":"code/UnitTests/unittests.controllers.tempcontrollertests/#returns_8","title":"Returns","text":"<p>Task</p>"},{"location":"code/UnitTests/unittests.controllers.tempcontrollertests/#removepostalcode_withexception_shouldreturninternalservererror","title":"RemovePostalcode_WithException_ShouldReturnInternalServerError()","text":"<p>Tests that RemovePostalcode returns InternalServerError when exception is thrown.</p> <pre><code>public Task RemovePostalcode_WithException_ShouldReturnInternalServerError()\n</code></pre>"},{"location":"code/UnitTests/unittests.controllers.tempcontrollertests/#returns_9","title":"Returns","text":"<p>Task</p>"},{"location":"code/UnitTests/unittests.controllers.tempcontrollertests/#removepostalcode_withvalidpostalcode_shouldreturnok","title":"RemovePostalcode_WithValidPostalcode_ShouldReturnOk()","text":"<p>Tests that RemovePostalcode returns OK when postal code is removed successfully.</p> <pre><code>public Task RemovePostalcode_WithValidPostalcode_ShouldReturnOk()\n</code></pre>"},{"location":"code/UnitTests/unittests.controllers.tempcontrollertests/#returns_10","title":"Returns","text":"<p>Task</p>"},{"location":"code/UnitTests/unittests.controllers.tempcontrollertests/#setup","title":"Setup()","text":"<p>Sets up test fixtures and initializes mocks before each test execution.</p> <pre><code>public void Setup()\n</code></pre>"},{"location":"code/UnitTests/unittests.controllers.temperaturedatacontrollertests/","title":"TemperatureDataControllerTests","text":"<p>Namespace: UnitTests.Controllers</p> <p>Unit tests for the TemperatureDataController class, verifying temperature data retrieval and formatting functionality.</p> <pre><code>public class TemperatureDataControllerTests\n</code></pre> <p>Inheritance Object \u2192 TemperatureDataControllerTests</p>"},{"location":"code/UnitTests/unittests.controllers.temperaturedatacontrollertests/#constructors","title":"Constructors","text":""},{"location":"code/UnitTests/unittests.controllers.temperaturedatacontrollertests/#temperaturedatacontrollertests_1","title":"TemperatureDataControllerTests()","text":"<pre><code>public TemperatureDataControllerTests()\n</code></pre>"},{"location":"code/UnitTests/unittests.controllers.temperaturedatacontrollertests/#methods","title":"Methods","text":""},{"location":"code/UnitTests/unittests.controllers.temperaturedatacontrollertests/#g__getdata5_0setupg__getdata5_0","title":"&lt;Setup&gt;g__GetData|5_0()","text":"<pre><code>internal static IAsyncEnumerable&lt;Object[]&gt; &lt;Setup&gt;g__GetData|5_0()\n</code></pre>"},{"location":"code/UnitTests/unittests.controllers.temperaturedatacontrollertests/#returns","title":"Returns","text":"<p>IAsyncEnumerable&lt;Object[]&gt;</p>"},{"location":"code/UnitTests/unittests.controllers.temperaturedatacontrollertests/#constructor_withnullinfluxrepo_shouldthrowargumentnullexception","title":"Constructor_WithNullInfluxRepo_ShouldThrowArgumentNullException()","text":"<p>Tests that the constructor throws ArgumentNullException when InfluxDB repository parameter is null.</p> <pre><code>public void Constructor_WithNullInfluxRepo_ShouldThrowArgumentNullException()\n</code></pre>"},{"location":"code/UnitTests/unittests.controllers.temperaturedatacontrollertests/#constructor_withnulllogger_shouldthrowargumentnullexception","title":"Constructor_WithNullLogger_ShouldThrowArgumentNullException()","text":"<p>Tests that the constructor throws ArgumentNullException when logger parameter is null.</p> <pre><code>public void Constructor_WithNullLogger_ShouldThrowArgumentNullException()\n</code></pre>"},{"location":"code/UnitTests/unittests.controllers.temperaturedatacontrollertests/#constructor_withnullsettingsrepo_shouldthrowargumentnullexception","title":"Constructor_WithNullSettingsRepo_ShouldThrowArgumentNullException()","text":"<p>Tests that the constructor throws ArgumentNullException when settings repository parameter is null.</p> <pre><code>public void Constructor_WithNullSettingsRepo_ShouldThrowArgumentNullException()\n</code></pre>"},{"location":"code/UnitTests/unittests.controllers.temperaturedatacontrollertests/#constructor_withvalidparameters_shouldcreateinstance","title":"Constructor_WithValidParameters_ShouldCreateInstance()","text":"<p>Tests that the constructor creates a valid instance when provided with valid parameters.</p> <pre><code>public void Constructor_WithValidParameters_ShouldCreateInstance()\n</code></pre>"},{"location":"code/UnitTests/unittests.controllers.temperaturedatacontrollertests/#converttofahrenheit_withcelsiusvalues_shouldreturncorrectfahrenheitvalues","title":"ConvertToFahrenheit_WithCelsiusValues_ShouldReturnCorrectFahrenheitValues()","text":"<p>Tests that ConvertToFahrenheit method correctly converts Celsius values to Fahrenheit.</p> <pre><code>public void ConvertToFahrenheit_WithCelsiusValues_ShouldReturnCorrectFahrenheitValues()\n</code></pre>"},{"location":"code/UnitTests/unittests.controllers.temperaturedatacontrollertests/#dateformatting_shouldformatcorrectly","title":"DateFormatting_ShouldFormatCorrectly()","text":"<p>Tests that date formatting produces correctly formatted date strings.</p> <pre><code>public void DateFormatting_ShouldFormatCorrectly()\n</code></pre>"},{"location":"code/UnitTests/unittests.controllers.temperaturedatacontrollertests/#gettemperature_withfahrenheitconversion_shouldreturnconvertedtemperatures","title":"GetTemperature_WithFahrenheitConversion_ShouldReturnConvertedTemperatures()","text":"<p>Tests that GetTemperature with Fahrenheit conversion returns temperatures converted from Celsius to Fahrenheit.</p> <pre><code>public Task GetTemperature_WithFahrenheitConversion_ShouldReturnConvertedTemperatures()\n</code></pre>"},{"location":"code/UnitTests/unittests.controllers.temperaturedatacontrollertests/#returns_1","title":"Returns","text":"<p>Task</p>"},{"location":"code/UnitTests/unittests.controllers.temperaturedatacontrollertests/#gettemperature_withnosensorsettings_shouldhandlegracefully","title":"GetTemperature_WithNoSensorSettings_ShouldHandleGracefully()","text":"<p>Tests that GetTemperature handles gracefully when no sensor settings are available.</p> <pre><code>public Task GetTemperature_WithNoSensorSettings_ShouldHandleGracefully()\n</code></pre>"},{"location":"code/UnitTests/unittests.controllers.temperaturedatacontrollertests/#returns_2","title":"Returns","text":"<p>Task</p>"},{"location":"code/UnitTests/unittests.controllers.temperaturedatacontrollertests/#gettemperature_withvalidparameters_shouldreturnokwithtemperaturedata","title":"GetTemperature_WithValidParameters_ShouldReturnOkWithTemperatureData()","text":"<p>Tests that GetTemperature with valid parameters returns an OK result with temperature data.</p> <pre><code>public Task GetTemperature_WithValidParameters_ShouldReturnOkWithTemperatureData()\n</code></pre>"},{"location":"code/UnitTests/unittests.controllers.temperaturedatacontrollertests/#returns_3","title":"Returns","text":"<p>Task</p>"},{"location":"code/UnitTests/unittests.controllers.temperaturedatacontrollertests/#setup","title":"Setup()","text":"<p>Sets up test fixtures and initializes mocks before each test execution.</p> <pre><code>public void Setup()\n</code></pre>"},{"location":"code/UnitTests/unittests.controllers.topiccontrollertests/","title":"TopicControllerTests","text":"<p>Namespace: UnitTests.Controllers</p> <p>Unit tests for the TopicController class, verifying MQTT topic management functionality.</p> <pre><code>public class TopicControllerTests\n</code></pre> <p>Inheritance Object \u2192 TopicControllerTests</p>"},{"location":"code/UnitTests/unittests.controllers.topiccontrollertests/#constructors","title":"Constructors","text":""},{"location":"code/UnitTests/unittests.controllers.topiccontrollertests/#topiccontrollertests_1","title":"TopicControllerTests()","text":"<pre><code>public TopicControllerTests()\n</code></pre>"},{"location":"code/UnitTests/unittests.controllers.topiccontrollertests/#methods","title":"Methods","text":""},{"location":"code/UnitTests/unittests.controllers.topiccontrollertests/#constructor_withnullsettingsrepo_shouldthrowargumentnullexception","title":"Constructor_WithNullSettingsRepo_ShouldThrowArgumentNullException()","text":"<p>Tests that the constructor throws ArgumentNullException when settings repository is null.</p> <pre><code>public void Constructor_WithNullSettingsRepo_ShouldThrowArgumentNullException()\n</code></pre>"},{"location":"code/UnitTests/unittests.controllers.topiccontrollertests/#constructor_withvalidparameters_shouldcreateinstance","title":"Constructor_WithValidParameters_ShouldCreateInstance()","text":"<p>Tests that the constructor creates a valid instance when provided with valid parameters.</p> <pre><code>public void Constructor_WithValidParameters_ShouldCreateInstance()\n</code></pre>"},{"location":"code/UnitTests/unittests.controllers.topiccontrollertests/#createtopic_withexception_shouldreturninternalservererror","title":"CreateTopic_WithException_ShouldReturnInternalServerError()","text":"<p>Tests that CreateTopic returns InternalServerError when service throws exception.</p> <pre><code>public Task CreateTopic_WithException_ShouldReturnInternalServerError()\n</code></pre>"},{"location":"code/UnitTests/unittests.controllers.topiccontrollertests/#returns","title":"Returns","text":"<p>Task</p>"},{"location":"code/UnitTests/unittests.controllers.topiccontrollertests/#createtopic_withinvalidmodelstate_shouldreturnbadrequest","title":"CreateTopic_WithInvalidModelState_ShouldReturnBadRequest()","text":"<p>Tests that CreateTopic returns BadRequest when model state is invalid.</p> <pre><code>public Task CreateTopic_WithInvalidModelState_ShouldReturnBadRequest()\n</code></pre>"},{"location":"code/UnitTests/unittests.controllers.topiccontrollertests/#returns_1","title":"Returns","text":"<p>Task</p>"},{"location":"code/UnitTests/unittests.controllers.topiccontrollertests/#createtopic_withnulltopic_shouldreturnbadrequest","title":"CreateTopic_WithNullTopic_ShouldReturnBadRequest()","text":"<p>Tests that CreateTopic returns BadRequest when topic setting is null.</p> <pre><code>public Task CreateTopic_WithNullTopic_ShouldReturnBadRequest()\n</code></pre>"},{"location":"code/UnitTests/unittests.controllers.topiccontrollertests/#returns_2","title":"Returns","text":"<p>Task</p>"},{"location":"code/UnitTests/unittests.controllers.topiccontrollertests/#createtopic_withvalidtopic_shouldreturncreated","title":"CreateTopic_WithValidTopic_ShouldReturnCreated()","text":"<p>Tests that CreateTopic returns Created when topic is created successfully.</p> <pre><code>public Task CreateTopic_WithValidTopic_ShouldReturnCreated()\n</code></pre>"},{"location":"code/UnitTests/unittests.controllers.topiccontrollertests/#returns_3","title":"Returns","text":"<p>Task</p>"},{"location":"code/UnitTests/unittests.controllers.topiccontrollertests/#deletetopic_withexception_shouldreturninternalservererror","title":"DeleteTopic_WithException_ShouldReturnInternalServerError()","text":"<p>Tests that DeleteTopic returns InternalServerError when service throws exception.</p> <pre><code>public Task DeleteTopic_WithException_ShouldReturnInternalServerError()\n</code></pre>"},{"location":"code/UnitTests/unittests.controllers.topiccontrollertests/#returns_4","title":"Returns","text":"<p>Task</p>"},{"location":"code/UnitTests/unittests.controllers.topiccontrollertests/#deletetopic_withnulltopic_shouldreturnbadrequest","title":"DeleteTopic_WithNullTopic_ShouldReturnBadRequest()","text":"<p>Tests that DeleteTopic returns BadRequest when topic setting is null.</p> <pre><code>public Task DeleteTopic_WithNullTopic_ShouldReturnBadRequest()\n</code></pre>"},{"location":"code/UnitTests/unittests.controllers.topiccontrollertests/#returns_5","title":"Returns","text":"<p>Task</p>"},{"location":"code/UnitTests/unittests.controllers.topiccontrollertests/#deletetopic_withvalidtopic_shouldreturnok","title":"DeleteTopic_WithValidTopic_ShouldReturnOk()","text":"<p>Tests that DeleteTopic returns OK when topic is deleted successfully.</p> <pre><code>public Task DeleteTopic_WithValidTopic_ShouldReturnOk()\n</code></pre>"},{"location":"code/UnitTests/unittests.controllers.topiccontrollertests/#returns_6","title":"Returns","text":"<p>Task</p>"},{"location":"code/UnitTests/unittests.controllers.topiccontrollertests/#getalltopics_withemptydata_shouldreturnokwithemptylist","title":"GetAllTopics_WithEmptyData_ShouldReturnOkWithEmptyList()","text":"<p>Tests that GetAllTopics returns OK with empty list when no topics exist.</p> <pre><code>public Task GetAllTopics_WithEmptyData_ShouldReturnOkWithEmptyList()\n</code></pre>"},{"location":"code/UnitTests/unittests.controllers.topiccontrollertests/#returns_7","title":"Returns","text":"<p>Task</p>"},{"location":"code/UnitTests/unittests.controllers.topiccontrollertests/#getalltopics_withexception_shouldreturninternalservererror","title":"GetAllTopics_WithException_ShouldReturnInternalServerError()","text":"<p>Tests that GetAllTopics returns InternalServerError when service throws exception.</p> <pre><code>public Task GetAllTopics_WithException_ShouldReturnInternalServerError()\n</code></pre>"},{"location":"code/UnitTests/unittests.controllers.topiccontrollertests/#returns_8","title":"Returns","text":"<p>Task</p>"},{"location":"code/UnitTests/unittests.controllers.topiccontrollertests/#getalltopics_withvaliddata_shouldreturnokwithtopics","title":"GetAllTopics_WithValidData_ShouldReturnOkWithTopics()","text":"<p>Tests that GetAllTopics returns OK with topics when service returns data.</p> <pre><code>public Task GetAllTopics_WithValidData_ShouldReturnOkWithTopics()\n</code></pre>"},{"location":"code/UnitTests/unittests.controllers.topiccontrollertests/#returns_9","title":"Returns","text":"<p>Task</p>"},{"location":"code/UnitTests/unittests.controllers.topiccontrollertests/#setup","title":"Setup()","text":"<p>Sets up test fixtures and initializes mocks before each test execution.</p> <pre><code>public void Setup()\n</code></pre>"},{"location":"code/UnitTests/unittests.controllers.topiccontrollertests/#updatetopic_withexception_shouldreturninternalservererror","title":"UpdateTopic_WithException_ShouldReturnInternalServerError()","text":"<p>Tests that UpdateTopic returns InternalServerError when service throws exception.</p> <pre><code>public Task UpdateTopic_WithException_ShouldReturnInternalServerError()\n</code></pre>"},{"location":"code/UnitTests/unittests.controllers.topiccontrollertests/#returns_10","title":"Returns","text":"<p>Task</p>"},{"location":"code/UnitTests/unittests.controllers.topiccontrollertests/#updatetopic_withnulltopic_shouldreturnbadrequest","title":"UpdateTopic_WithNullTopic_ShouldReturnBadRequest()","text":"<p>Tests that UpdateTopic returns BadRequest when topic setting is null.</p> <pre><code>public Task UpdateTopic_WithNullTopic_ShouldReturnBadRequest()\n</code></pre>"},{"location":"code/UnitTests/unittests.controllers.topiccontrollertests/#returns_11","title":"Returns","text":"<p>Task</p>"},{"location":"code/UnitTests/unittests.controllers.topiccontrollertests/#updatetopic_withvalidtopic_shouldreturnok","title":"UpdateTopic_WithValidTopic_ShouldReturnOk()","text":"<p>Tests that UpdateTopic returns OK when topic is updated successfully.</p> <pre><code>public Task UpdateTopic_WithValidTopic_ShouldReturnOk()\n</code></pre>"},{"location":"code/UnitTests/unittests.controllers.topiccontrollertests/#returns_12","title":"Returns","text":"<p>Task</p>"},{"location":"code/UnitTests/unittests.controllers.userinfocontrollertests/","title":"UserInfoControllerTests","text":"<p>Namespace: UnitTests.Controllers</p> <p>Unit tests for the UserInfoController class, verifying user management functionality.</p> <pre><code>public class UserInfoControllerTests\n</code></pre> <p>Inheritance Object \u2192 UserInfoControllerTests</p>"},{"location":"code/UnitTests/unittests.controllers.userinfocontrollertests/#constructors","title":"Constructors","text":""},{"location":"code/UnitTests/unittests.controllers.userinfocontrollertests/#userinfocontrollertests_1","title":"UserInfoControllerTests()","text":"<pre><code>public UserInfoControllerTests()\n</code></pre>"},{"location":"code/UnitTests/unittests.controllers.userinfocontrollertests/#methods","title":"Methods","text":""},{"location":"code/UnitTests/unittests.controllers.userinfocontrollertests/#changepassword_withexception_shouldreturninternalservererror","title":"ChangePassword_WithException_ShouldReturnInternalServerError()","text":"<p>Tests that ChangePassword returns InternalServerError when service throws exception.</p> <pre><code>public Task ChangePassword_WithException_ShouldReturnInternalServerError()\n</code></pre>"},{"location":"code/UnitTests/unittests.controllers.userinfocontrollertests/#returns","title":"Returns","text":"<p>Task</p>"},{"location":"code/UnitTests/unittests.controllers.userinfocontrollertests/#changepassword_withinvalidmodelstate_shouldlogwarning","title":"ChangePassword_WithInvalidModelState_ShouldLogWarning()","text":"<p>Tests that ChangePassword logs warning when model state is invalid.</p> <pre><code>public Task ChangePassword_WithInvalidModelState_ShouldLogWarning()\n</code></pre>"},{"location":"code/UnitTests/unittests.controllers.userinfocontrollertests/#returns_1","title":"Returns","text":"<p>Task</p>"},{"location":"code/UnitTests/unittests.controllers.userinfocontrollertests/#changepassword_withinvalidmodelstate_shouldreturnbadrequest","title":"ChangePassword_WithInvalidModelState_ShouldReturnBadRequest()","text":"<p>Tests that ChangePassword returns BadRequest when model state is invalid.</p> <pre><code>public Task ChangePassword_WithInvalidModelState_ShouldReturnBadRequest()\n</code></pre>"},{"location":"code/UnitTests/unittests.controllers.userinfocontrollertests/#returns_2","title":"Returns","text":"<p>Task</p>"},{"location":"code/UnitTests/unittests.controllers.userinfocontrollertests/#changepassword_withnonexistentuser_shouldreturnnotfound","title":"ChangePassword_WithNonExistentUser_ShouldReturnNotFound()","text":"<p>Tests that ChangePassword returns NotFound when user does not exist.</p> <pre><code>public Task ChangePassword_WithNonExistentUser_ShouldReturnNotFound()\n</code></pre>"},{"location":"code/UnitTests/unittests.controllers.userinfocontrollertests/#returns_3","title":"Returns","text":"<p>Task</p>"},{"location":"code/UnitTests/unittests.controllers.userinfocontrollertests/#changepassword_withvaliddata_shouldreturnok","title":"ChangePassword_WithValidData_ShouldReturnOk()","text":"<p>Tests that ChangePassword returns OK when password is changed successfully.</p> <pre><code>public Task ChangePassword_WithValidData_ShouldReturnOk()\n</code></pre>"},{"location":"code/UnitTests/unittests.controllers.userinfocontrollertests/#returns_4","title":"Returns","text":"<p>Task</p>"},{"location":"code/UnitTests/unittests.controllers.userinfocontrollertests/#changeuser_withexception_shouldreturninternalservererror","title":"ChangeUser_WithException_ShouldReturnInternalServerError()","text":"<p>Tests that ChangeUser returns InternalServerError when service throws exception.</p> <pre><code>public Task ChangeUser_WithException_ShouldReturnInternalServerError()\n</code></pre>"},{"location":"code/UnitTests/unittests.controllers.userinfocontrollertests/#returns_5","title":"Returns","text":"<p>Task</p>"},{"location":"code/UnitTests/unittests.controllers.userinfocontrollertests/#changeuser_withinvalidmodelstate_shouldreturnbadrequest","title":"ChangeUser_WithInvalidModelState_ShouldReturnBadRequest()","text":"<p>Tests that ChangeUser returns BadRequest when model state is invalid.</p> <pre><code>public Task ChangeUser_WithInvalidModelState_ShouldReturnBadRequest()\n</code></pre>"},{"location":"code/UnitTests/unittests.controllers.userinfocontrollertests/#returns_6","title":"Returns","text":"<p>Task</p>"},{"location":"code/UnitTests/unittests.controllers.userinfocontrollertests/#changeuser_withvaliddata_shouldreturnok","title":"ChangeUser_WithValidData_ShouldReturnOk()","text":"<p>Tests that ChangeUser returns OK when user is updated successfully.</p> <pre><code>public Task ChangeUser_WithValidData_ShouldReturnOk()\n</code></pre>"},{"location":"code/UnitTests/unittests.controllers.userinfocontrollertests/#returns_7","title":"Returns","text":"<p>Task</p>"},{"location":"code/UnitTests/unittests.controllers.userinfocontrollertests/#constructor_withvalidparameters_shouldcreateinstance","title":"Constructor_WithValidParameters_ShouldCreateInstance()","text":"<p>Tests that the constructor creates a valid instance when provided with valid parameters.</p> <pre><code>public void Constructor_WithValidParameters_ShouldCreateInstance()\n</code></pre>"},{"location":"code/UnitTests/unittests.controllers.userinfocontrollertests/#deleteuser_whendeletionfails_shouldreturninternalservererror","title":"DeleteUser_WhenDeletionFails_ShouldReturnInternalServerError()","text":"<p>Tests that DeleteUser returns InternalServerError when deletion fails.</p> <pre><code>public Task DeleteUser_WhenDeletionFails_ShouldReturnInternalServerError()\n</code></pre>"},{"location":"code/UnitTests/unittests.controllers.userinfocontrollertests/#returns_8","title":"Returns","text":"<p>Task</p>"},{"location":"code/UnitTests/unittests.controllers.userinfocontrollertests/#deleteuser_withexception_shouldreturninternalservererror","title":"DeleteUser_WithException_ShouldReturnInternalServerError()","text":"<p>Tests that DeleteUser returns InternalServerError when service throws exception.</p> <pre><code>public Task DeleteUser_WithException_ShouldReturnInternalServerError()\n</code></pre>"},{"location":"code/UnitTests/unittests.controllers.userinfocontrollertests/#returns_9","title":"Returns","text":"<p>Task</p>"},{"location":"code/UnitTests/unittests.controllers.userinfocontrollertests/#deleteuser_withexistinguser_shouldreturnok","title":"DeleteUser_WithExistingUser_ShouldReturnOk()","text":"<p>Tests that DeleteUser returns OK when user is deleted successfully.</p> <pre><code>public Task DeleteUser_WithExistingUser_ShouldReturnOk()\n</code></pre>"},{"location":"code/UnitTests/unittests.controllers.userinfocontrollertests/#returns_10","title":"Returns","text":"<p>Task</p>"},{"location":"code/UnitTests/unittests.controllers.userinfocontrollertests/#deleteuser_withnonexistentuser_shouldreturnnotfound","title":"DeleteUser_WithNonExistentUser_ShouldReturnNotFound()","text":"<p>Tests that DeleteUser returns NotFound when user does not exist.</p> <pre><code>public Task DeleteUser_WithNonExistentUser_ShouldReturnNotFound()\n</code></pre>"},{"location":"code/UnitTests/unittests.controllers.userinfocontrollertests/#returns_11","title":"Returns","text":"<p>Task</p>"},{"location":"code/UnitTests/unittests.controllers.userinfocontrollertests/#getallusers_shouldloginformation","title":"GetAllUsers_ShouldLogInformation()","text":"<p>Tests that GetAllUsers logs information when fetching users.</p> <pre><code>public Task GetAllUsers_ShouldLogInformation()\n</code></pre>"},{"location":"code/UnitTests/unittests.controllers.userinfocontrollertests/#returns_12","title":"Returns","text":"<p>Task</p>"},{"location":"code/UnitTests/unittests.controllers.userinfocontrollertests/#getallusers_withexception_shouldreturninternalservererror","title":"GetAllUsers_WithException_ShouldReturnInternalServerError()","text":"<p>Tests that GetAllUsers returns InternalServerError when service throws exception.</p> <pre><code>public Task GetAllUsers_WithException_ShouldReturnInternalServerError()\n</code></pre>"},{"location":"code/UnitTests/unittests.controllers.userinfocontrollertests/#returns_13","title":"Returns","text":"<p>Task</p>"},{"location":"code/UnitTests/unittests.controllers.userinfocontrollertests/#getallusers_withvaliddata_shouldreturnokwithusers","title":"GetAllUsers_WithValidData_ShouldReturnOkWithUsers()","text":"<p>Tests that GetAllUsers returns OK with users when service returns data.</p> <pre><code>public Task GetAllUsers_WithValidData_ShouldReturnOkWithUsers()\n</code></pre>"},{"location":"code/UnitTests/unittests.controllers.userinfocontrollertests/#returns_14","title":"Returns","text":"<p>Task</p>"},{"location":"code/UnitTests/unittests.controllers.userinfocontrollertests/#getuserbyid_shouldloginformation","title":"GetUserById_ShouldLogInformation()","text":"<p>Tests that GetUserById logs information when fetching a user.</p> <pre><code>public Task GetUserById_ShouldLogInformation()\n</code></pre>"},{"location":"code/UnitTests/unittests.controllers.userinfocontrollertests/#returns_15","title":"Returns","text":"<p>Task</p>"},{"location":"code/UnitTests/unittests.controllers.userinfocontrollertests/#getuserbyid_withexception_shouldreturninternalservererror","title":"GetUserById_WithException_ShouldReturnInternalServerError()","text":"<p>Tests that GetUserById returns InternalServerError when service throws exception.</p> <pre><code>public Task GetUserById_WithException_ShouldReturnInternalServerError()\n</code></pre>"},{"location":"code/UnitTests/unittests.controllers.userinfocontrollertests/#returns_16","title":"Returns","text":"<p>Task</p>"},{"location":"code/UnitTests/unittests.controllers.userinfocontrollertests/#getuserbyid_withexistinguser_shouldreturnokwithuser","title":"GetUserById_WithExistingUser_ShouldReturnOkWithUser()","text":"<p>Tests that GetUserById returns OK with user when user exists.</p> <pre><code>public Task GetUserById_WithExistingUser_ShouldReturnOkWithUser()\n</code></pre>"},{"location":"code/UnitTests/unittests.controllers.userinfocontrollertests/#returns_17","title":"Returns","text":"<p>Task</p>"},{"location":"code/UnitTests/unittests.controllers.userinfocontrollertests/#getuserbyid_withnonexistentuser_shouldreturnnotfound","title":"GetUserById_WithNonExistentUser_ShouldReturnNotFound()","text":"<p>Tests that GetUserById returns NotFound when user does not exist.</p> <pre><code>public Task GetUserById_WithNonExistentUser_ShouldReturnNotFound()\n</code></pre>"},{"location":"code/UnitTests/unittests.controllers.userinfocontrollertests/#returns_18","title":"Returns","text":"<p>Task</p>"},{"location":"code/UnitTests/unittests.controllers.userinfocontrollertests/#setup","title":"Setup()","text":"<p>Sets up test fixtures and initializes mocks before each test execution.</p> <pre><code>public void Setup()\n</code></pre>"},{"location":"code/UnitTests/unittests.mqttreceiver.connectiontests/","title":"ConnectionTests","text":"<p>Namespace: UnitTests.MqttReceiver</p> <p>Unit tests for the Connection class, verifying MQTT connection management and message processing functionality.</p> <pre><code>public class ConnectionTests\n</code></pre> <p>Inheritance Object \u2192 ConnectionTests</p>"},{"location":"code/UnitTests/unittests.mqttreceiver.connectiontests/#constructors","title":"Constructors","text":""},{"location":"code/UnitTests/unittests.mqttreceiver.connectiontests/#connectiontests_1","title":"ConnectionTests()","text":"<pre><code>public ConnectionTests()\n</code></pre>"},{"location":"code/UnitTests/unittests.mqttreceiver.connectiontests/#methods","title":"Methods","text":""},{"location":"code/UnitTests/unittests.mqttreceiver.connectiontests/#constructor_readsconfigurationvalues_successfully","title":"Constructor_ReadsConfigurationValues_Successfully()","text":"<p>Tests that the constructor properly reads configuration values.</p> <pre><code>public void Constructor_ReadsConfigurationValues_Successfully()\n</code></pre>"},{"location":"code/UnitTests/unittests.mqttreceiver.connectiontests/#constructor_withnullconfiguration_throwsargumentnullexception","title":"Constructor_WithNullConfiguration_ThrowsArgumentNullException()","text":"<p>Tests that the Connection constructor throws when configuration is null.</p> <pre><code>public void Constructor_WithNullConfiguration_ThrowsArgumentNullException()\n</code></pre>"},{"location":"code/UnitTests/unittests.mqttreceiver.connectiontests/#constructor_withnulllogger_throwsargumentnullexception","title":"Constructor_WithNullLogger_ThrowsArgumentNullException()","text":"<p>Tests that the Connection constructor throws when logger is null.</p> <pre><code>public void Constructor_WithNullLogger_ThrowsArgumentNullException()\n</code></pre>"},{"location":"code/UnitTests/unittests.mqttreceiver.connectiontests/#constructor_withnullserviceprovider_throwsargumentnullexception","title":"Constructor_WithNullServiceProvider_ThrowsArgumentNullException()","text":"<p>Tests that the Connection constructor throws when service provider is null.</p> <pre><code>public void Constructor_WithNullServiceProvider_ThrowsArgumentNullException()\n</code></pre>"},{"location":"code/UnitTests/unittests.mqttreceiver.connectiontests/#constructor_withvaliddependencies_initializessuccessfully","title":"Constructor_WithValidDependencies_InitializesSuccessfully()","text":"<p>Tests that the Connection constructor properly initializes with valid dependencies.</p> <pre><code>public void Constructor_WithValidDependencies_InitializesSuccessfully()\n</code></pre>"},{"location":"code/UnitTests/unittests.mqttreceiver.connectiontests/#jsondeserialization_invalidjson_throwsjsonexception","title":"JsonDeserialization_InvalidJson_ThrowsJsonException()","text":"<p>Tests deserialization of invalid JSON.</p> <pre><code>public void JsonDeserialization_InvalidJson_ThrowsJsonException()\n</code></pre>"},{"location":"code/UnitTests/unittests.mqttreceiver.connectiontests/#jsondeserialization_validsensorreading_deserializescorrectly","title":"JsonDeserialization_ValidSensorReading_DeserializesCorrectly()","text":"<p>Tests deserialization of valid sensor reading JSON.</p> <pre><code>public void JsonDeserialization_ValidSensorReading_DeserializesCorrectly()\n</code></pre>"},{"location":"code/UnitTests/unittests.mqttreceiver.connectiontests/#jsonserializeroptions_areconfiguredcorrectly","title":"JsonSerializerOptions_AreConfiguredCorrectly()","text":"<p>Tests that JSON serializer options are properly configured.</p> <pre><code>public void JsonSerializerOptions_AreConfiguredCorrectly()\n</code></pre>"},{"location":"code/UnitTests/unittests.mqttreceiver.connectiontests/#processbatchsensorreading_withmetadata_processesallreadings","title":"ProcessBatchSensorReading_WithMetaData_ProcessesAllReadings()","text":"<p>Tests processing of batch sensor readings with meta data.</p> <pre><code>public Task ProcessBatchSensorReading_WithMetaData_ProcessesAllReadings()\n</code></pre>"},{"location":"code/UnitTests/unittests.mqttreceiver.connectiontests/#returns","title":"Returns","text":"<p>Task</p>"},{"location":"code/UnitTests/unittests.mqttreceiver.connectiontests/#processsensorreading_databaseerror_handlesgracefully","title":"ProcessSensorReading_DatabaseError_HandlesGracefully()","text":"<p>Tests that database write errors are handled gracefully.</p> <pre><code>public Task ProcessSensorReading_DatabaseError_HandlesGracefully()\n</code></pre>"},{"location":"code/UnitTests/unittests.mqttreceiver.connectiontests/#returns_1","title":"Returns","text":"<p>Task</p>"},{"location":"code/UnitTests/unittests.mqttreceiver.connectiontests/#processsensorreading_emptyvaluearray_skipsprocessing","title":"ProcessSensorReading_EmptyValueArray_SkipsProcessing()","text":"<p>Tests processing of sensor reading with empty value array.</p> <pre><code>public Task ProcessSensorReading_EmptyValueArray_SkipsProcessing()\n</code></pre>"},{"location":"code/UnitTests/unittests.mqttreceiver.connectiontests/#returns_2","title":"Returns","text":"<p>Task</p>"},{"location":"code/UnitTests/unittests.mqttreceiver.connectiontests/#processsensorreading_nullvalue_skipsprocessing","title":"ProcessSensorReading_NullValue_SkipsProcessing()","text":"<p>Tests processing of sensor reading with null value.</p> <pre><code>public Task ProcessSensorReading_NullValue_SkipsProcessing()\n</code></pre>"},{"location":"code/UnitTests/unittests.mqttreceiver.connectiontests/#returns_3","title":"Returns","text":"<p>Task</p>"},{"location":"code/UnitTests/unittests.mqttreceiver.connectiontests/#processsensorreading_validsinglereading_writestodatabase","title":"ProcessSensorReading_ValidSingleReading_WritesToDatabase()","text":"<p>Tests processing of a valid single sensor reading message using reflection.</p> <pre><code>public Task ProcessSensorReading_ValidSingleReading_WritesToDatabase()\n</code></pre>"},{"location":"code/UnitTests/unittests.mqttreceiver.connectiontests/#returns_4","title":"Returns","text":"<p>Task</p>"},{"location":"code/UnitTests/unittests.mqttreceiver.connectiontests/#setup","title":"Setup()","text":"<p>Sets up test fixtures and initializes mocks before each test execution.</p> <pre><code>public void Setup()\n</code></pre>"},{"location":"code/UnitTests/unittests.mqttreceiver.nullmetalistconvertertests/","title":"NullMetaListConverterTests","text":"<p>Namespace: UnitTests.MqttReceiver</p> <p>Unit tests for the NullMetaListConverter class, verifying JSON conversion logic for TempSensorReading lists.</p> <pre><code>public class NullMetaListConverterTests\n</code></pre> <p>Inheritance Object \u2192 NullMetaListConverterTests</p>"},{"location":"code/UnitTests/unittests.mqttreceiver.nullmetalistconvertertests/#constructors","title":"Constructors","text":""},{"location":"code/UnitTests/unittests.mqttreceiver.nullmetalistconvertertests/#nullmetalistconvertertests_1","title":"NullMetaListConverterTests()","text":"<pre><code>public NullMetaListConverterTests()\n</code></pre>"},{"location":"code/UnitTests/unittests.mqttreceiver.nullmetalistconvertertests/#methods","title":"Methods","text":""},{"location":"code/UnitTests/unittests.mqttreceiver.nullmetalistconvertertests/#read_arraywithmixednullandvalidobjects_returnsarray","title":"Read_ArrayWithMixedNullAndValidObjects_ReturnsArray()","text":"<p>Tests that an array with mixed null and valid objects is preserved.</p> <pre><code>public void Read_ArrayWithMixedNullAndValidObjects_ReturnsArray()\n</code></pre>"},{"location":"code/UnitTests/unittests.mqttreceiver.nullmetalistconvertertests/#read_arraywithonlynulls_returnsnull","title":"Read_ArrayWithOnlyNulls_ReturnsNull()","text":"<p>Tests that an array containing only null values is correctly converted to null.</p> <pre><code>public void Read_ArrayWithOnlyNulls_ReturnsNull()\n</code></pre>"},{"location":"code/UnitTests/unittests.mqttreceiver.nullmetalistconvertertests/#read_arraywithsinglevalidobject_returnsarray","title":"Read_ArrayWithSingleValidObject_ReturnsArray()","text":"<p>Tests that a single valid object in an array is preserved.</p> <pre><code>public void Read_ArrayWithSingleValidObject_ReturnsArray()\n</code></pre>"},{"location":"code/UnitTests/unittests.mqttreceiver.nullmetalistconvertertests/#read_arraywithvalidobjects_returnsarray","title":"Read_ArrayWithValidObjects_ReturnsArray()","text":"<p>Tests that an array with valid TempSensorReading objects is preserved.</p> <pre><code>public void Read_ArrayWithValidObjects_ReturnsArray()\n</code></pre>"},{"location":"code/UnitTests/unittests.mqttreceiver.nullmetalistconvertertests/#read_emptyarray_returnsnull","title":"Read_EmptyArray_ReturnsNull()","text":"<p>Tests that an empty JSON array is correctly converted to null.</p> <pre><code>public void Read_EmptyArray_ReturnsNull()\n</code></pre>"},{"location":"code/UnitTests/unittests.mqttreceiver.nullmetalistconvertertests/#read_nulljson_returnsnull","title":"Read_NullJson_ReturnsNull()","text":"<p>Tests that a null JSON value is correctly converted to null.</p> <pre><code>public void Read_NullJson_ReturnsNull()\n</code></pre>"},{"location":"code/UnitTests/unittests.mqttreceiver.nullmetalistconvertertests/#setup","title":"Setup()","text":"<p>Sets up test fixtures and initializes the converter with JSON options.</p> <pre><code>public void Setup()\n</code></pre>"},{"location":"code/UnitTests/unittests.mqttreceiver.nullmetalistconvertertests/#write_emptylist_serializesasemptyarray","title":"Write_EmptyList_SerializesAsEmptyArray()","text":"<p>Tests that an empty list is correctly serialized as an empty array.</p> <pre><code>public void Write_EmptyList_SerializesAsEmptyArray()\n</code></pre>"},{"location":"code/UnitTests/unittests.mqttreceiver.nullmetalistconvertertests/#write_listwithnullobjects_serializescorrectly","title":"Write_ListWithNullObjects_SerializesCorrectly()","text":"<p>Tests that a list with null objects is correctly serialized.</p> <pre><code>public void Write_ListWithNullObjects_SerializesCorrectly()\n</code></pre>"},{"location":"code/UnitTests/unittests.mqttreceiver.nullmetalistconvertertests/#write_listwithvalidobjects_serializescorrectly","title":"Write_ListWithValidObjects_SerializesCorrectly()","text":"<p>Tests that a list with valid objects is correctly serialized.</p> <pre><code>public void Write_ListWithValidObjects_SerializesCorrectly()\n</code></pre>"},{"location":"code/UnitTests/unittests.mqttreceiver.nullmetalistconvertertests/#write_nulllist_serializesasnull","title":"Write_NullList_SerializesAsNull()","text":"<p>Tests that a null list is correctly serialized as null.</p> <pre><code>public void Write_NullList_SerializesAsNull()\n</code></pre>"},{"location":"code/UnitTests/unittests.mqttreceiver.receivertests/","title":"ReceiverTests","text":"<p>Namespace: UnitTests.MqttReceiver</p> <p>Unit tests for the Receiver class, verifying MQTT topic subscription functionality.</p> <pre><code>public class ReceiverTests\n</code></pre> <p>Inheritance Object \u2192 ReceiverTests</p>"},{"location":"code/UnitTests/unittests.mqttreceiver.receivertests/#constructors","title":"Constructors","text":""},{"location":"code/UnitTests/unittests.mqttreceiver.receivertests/#receivertests_1","title":"ReceiverTests()","text":"<pre><code>public ReceiverTests()\n</code></pre>"},{"location":"code/UnitTests/unittests.mqttreceiver.receivertests/#methods","title":"Methods","text":""},{"location":"code/UnitTests/unittests.mqttreceiver.receivertests/#constructor_withnullconnection_throwsargumentnullexception","title":"Constructor_WithNullConnection_ThrowsArgumentNullException()","text":"<p>Tests that the Receiver constructor throws when connection is null.</p> <pre><code>public void Constructor_WithNullConnection_ThrowsArgumentNullException()\n</code></pre>"},{"location":"code/UnitTests/unittests.mqttreceiver.receivertests/#constructor_withnulllogger_throwsargumentnullexception","title":"Constructor_WithNullLogger_ThrowsArgumentNullException()","text":"<p>Tests that the Receiver constructor throws when logger is null.</p> <pre><code>public void Constructor_WithNullLogger_ThrowsArgumentNullException()\n</code></pre>"},{"location":"code/UnitTests/unittests.mqttreceiver.receivertests/#constructor_withnullserviceprovider_throwsargumentnullexception","title":"Constructor_WithNullServiceProvider_ThrowsArgumentNullException()","text":"<p>Tests that the Receiver constructor throws when service provider is null.</p> <pre><code>public void Constructor_WithNullServiceProvider_ThrowsArgumentNullException()\n</code></pre>"},{"location":"code/UnitTests/unittests.mqttreceiver.receivertests/#constructor_withvaliddependencies_initializessuccessfully","title":"Constructor_WithValidDependencies_InitializesSuccessfully()","text":"<p>Tests that the Receiver constructor properly initializes with valid dependencies.</p> <pre><code>public void Constructor_WithValidDependencies_InitializesSuccessfully()\n</code></pre>"},{"location":"code/UnitTests/unittests.mqttreceiver.receivertests/#setup","title":"Setup()","text":"<p>Sets up test fixtures and initializes mocks before each test execution.</p> <pre><code>public void Setup()\n</code></pre>"},{"location":"code/UnitTests/unittests.mqttreceiver.receivertests/#subscribetotopics_completeworkflow_workscorrectly","title":"SubscribeToTopics_CompleteWorkflow_WorksCorrectly()","text":"<p>Tests the complete subscription workflow with realistic data.</p> <pre><code>public Task SubscribeToTopics_CompleteWorkflow_WorksCorrectly()\n</code></pre>"},{"location":"code/UnitTests/unittests.mqttreceiver.receivertests/#returns","title":"Returns","text":"<p>Task</p>"},{"location":"code/UnitTests/unittests.mqttreceiver.receivertests/#subscribetotopics_createsanddisposesservicescope","title":"SubscribeToTopics_CreatesAndDisposesServiceScope()","text":"<p>Tests that SubscribeToTopics properly creates and disposes of service scope.</p> <pre><code>public Task SubscribeToTopics_CreatesAndDisposesServiceScope()\n</code></pre>"},{"location":"code/UnitTests/unittests.mqttreceiver.receivertests/#returns_1","title":"Returns","text":"<p>Task</p>"},{"location":"code/UnitTests/unittests.mqttreceiver.receivertests/#subscribetotopics_disposesscope_evenwhenexceptionoccurs","title":"SubscribeToTopics_DisposesScope_EvenWhenExceptionOccurs()","text":"<p>Tests that SubscribeToTopics disposes scope even when exception occurs.</p> <pre><code>public Task SubscribeToTopics_DisposesScope_EvenWhenExceptionOccurs()\n</code></pre>"},{"location":"code/UnitTests/unittests.mqttreceiver.receivertests/#returns_2","title":"Returns","text":"<p>Task</p>"},{"location":"code/UnitTests/unittests.mqttreceiver.receivertests/#subscribetotopics_whenconnectionfails_propagatesexception","title":"SubscribeToTopics_WhenConnectionFails_PropagatesException()","text":"<p>Tests that SubscribeToTopics handles connection failures.</p> <pre><code>public Task SubscribeToTopics_WhenConnectionFails_PropagatesException()\n</code></pre>"},{"location":"code/UnitTests/unittests.mqttreceiver.receivertests/#returns_3","title":"Returns","text":"<p>Task</p>"},{"location":"code/UnitTests/unittests.mqttreceiver.receivertests/#subscribetotopics_whenrepositorythrows_propagatesexception","title":"SubscribeToTopics_WhenRepositoryThrows_PropagatesException()","text":"<p>Tests that SubscribeToTopics handles repository exceptions.</p> <pre><code>public Task SubscribeToTopics_WhenRepositoryThrows_PropagatesException()\n</code></pre>"},{"location":"code/UnitTests/unittests.mqttreceiver.receivertests/#returns_4","title":"Returns","text":"<p>Task</p>"},{"location":"code/UnitTests/unittests.mqttreceiver.receivertests/#subscribetotopics_withemptysettings_completeswithouterror","title":"SubscribeToTopics_WithEmptySettings_CompletesWithoutError()","text":"<p>Tests that SubscribeToTopics handles empty topic settings gracefully.</p> <pre><code>public Task SubscribeToTopics_WithEmptySettings_CompletesWithoutError()\n</code></pre>"},{"location":"code/UnitTests/unittests.mqttreceiver.receivertests/#returns_5","title":"Returns","text":"<p>Task</p>"},{"location":"code/UnitTests/unittests.mqttreceiver.receivertests/#subscribetotopics_withnullsettings_throwsexception","title":"SubscribeToTopics_WithNullSettings_ThrowsException()","text":"<p>Tests that SubscribeToTopics handles null topic settings gracefully.</p> <pre><code>public Task SubscribeToTopics_WithNullSettings_ThrowsException()\n</code></pre>"},{"location":"code/UnitTests/unittests.mqttreceiver.receivertests/#returns_6","title":"Returns","text":"<p>Task</p>"},{"location":"code/UnitTests/unittests.mqttreceiver.receivertests/#subscribetotopics_withvalidsettings_retrievessettingsandconnects","title":"SubscribeToTopics_WithValidSettings_RetrievesSettingsAndConnects()","text":"<p>Tests that SubscribeToTopics retrieves topic settings and establishes connection.</p> <pre><code>public Task SubscribeToTopics_WithValidSettings_RetrievesSettingsAndConnects()\n</code></pre>"},{"location":"code/UnitTests/unittests.mqttreceiver.receivertests/#returns_7","title":"Returns","text":"<p>Task</p>"},{"location":"code/UnitTests/unittests.mqttreceiver.tempsensorreadingtests/","title":"TempSensorReadingTests","text":"<p>Namespace: UnitTests.MqttReceiver</p> <p>Unit tests for the TempSensorReading model, verifying JSON serialization and property behavior.</p> <pre><code>public class TempSensorReadingTests\n</code></pre> <p>Inheritance Object \u2192 TempSensorReadingTests</p>"},{"location":"code/UnitTests/unittests.mqttreceiver.tempsensorreadingtests/#constructors","title":"Constructors","text":""},{"location":"code/UnitTests/unittests.mqttreceiver.tempsensorreadingtests/#tempsensorreadingtests_1","title":"TempSensorReadingTests()","text":"<pre><code>public TempSensorReadingTests()\n</code></pre>"},{"location":"code/UnitTests/unittests.mqttreceiver.tempsensorreadingtests/#methods","title":"Methods","text":""},{"location":"code/UnitTests/unittests.mqttreceiver.tempsensorreadingtests/#defaultvalues_arecorrect","title":"DefaultValues_AreCorrect()","text":"<p>Tests that default property values are as expected.</p> <pre><code>public void DefaultValues_AreCorrect()\n</code></pre>"},{"location":"code/UnitTests/unittests.mqttreceiver.tempsensorreadingtests/#deserialize_completejson_producescorrectobject","title":"Deserialize_CompleteJson_ProducesCorrectObject()","text":"<p>Tests that a complete JSON string deserializes correctly to TempSensorReading.</p> <pre><code>public void Deserialize_CompleteJson_ProducesCorrectObject()\n</code></pre>"},{"location":"code/UnitTests/unittests.mqttreceiver.tempsensorreadingtests/#deserialize_minimaljson_producescorrectobject","title":"Deserialize_MinimalJson_ProducesCorrectObject()","text":"<p>Tests that a minimal JSON string deserializes correctly to TempSensorReading.</p> <pre><code>public void Deserialize_MinimalJson_ProducesCorrectObject()\n</code></pre>"},{"location":"code/UnitTests/unittests.mqttreceiver.tempsensorreadingtests/#deserialize_nullmetalist_convertedtonull","title":"Deserialize_NullMetaList_ConvertedToNull()","text":"<p>Tests that null meta list is handled by the NullMetaListConverter.</p> <pre><code>public void Deserialize_NullMetaList_ConvertedToNull()\n</code></pre>"},{"location":"code/UnitTests/unittests.mqttreceiver.tempsensorreadingtests/#deserialize_nullvaluesinarray_handlescorrectly","title":"Deserialize_NullValuesInArray_HandlesCorrectly()","text":"<p>Tests that null values in the value array are handled correctly.</p> <pre><code>public void Deserialize_NullValuesInArray_HandlesCorrectly()\n</code></pre>"},{"location":"code/UnitTests/unittests.mqttreceiver.tempsensorreadingtests/#deserialize_timestampasnumber_parsescorrectly","title":"Deserialize_TimestampAsNumber_ParsesCorrectly()","text":"<p>Tests that timestamp can be read from number format.</p> <pre><code>public void Deserialize_TimestampAsNumber_ParsesCorrectly()\n</code></pre>"},{"location":"code/UnitTests/unittests.mqttreceiver.tempsensorreadingtests/#deserialize_timestampasstring_parsescorrectly","title":"Deserialize_TimestampAsString_ParsesCorrectly()","text":"<p>Tests that timestamp can be read from string format (JsonNumberHandling.AllowReadingFromString).</p> <pre><code>public void Deserialize_TimestampAsString_ParsesCorrectly()\n</code></pre>"},{"location":"code/UnitTests/unittests.mqttreceiver.tempsensorreadingtests/#properties_setandget_workcorrectly","title":"Properties_SetAndGet_WorkCorrectly()","text":"<p>Tests that all properties can be set and retrieved correctly.</p> <pre><code>public void Properties_SetAndGet_WorkCorrectly()\n</code></pre>"},{"location":"code/UnitTests/unittests.mqttreceiver.tempsensorreadingtests/#serialize_completetempsensorreading_producescorrectjson","title":"Serialize_CompleteTempSensorReading_ProducesCorrectJson()","text":"<p>Tests that a complete TempSensorReading object serializes correctly to JSON.</p> <pre><code>public void Serialize_CompleteTempSensorReading_ProducesCorrectJson()\n</code></pre>"},{"location":"code/UnitTests/unittests.mqttreceiver.tempsensorreadingtests/#serialize_minimaltempsensorreading_producescorrectjson","title":"Serialize_MinimalTempSensorReading_ProducesCorrectJson()","text":"<p>Tests that a minimal TempSensorReading object serializes correctly to JSON.</p> <pre><code>public void Serialize_MinimalTempSensorReading_ProducesCorrectJson()\n</code></pre>"},{"location":"code/UnitTests/unittests.mqttreceiver.tempsensorreadingtests/#setup","title":"Setup()","text":"<p>Sets up test fixtures and initializes JSON serialization options.</p> <pre><code>public void Setup()\n</code></pre>"},{"location":"code/UnitTests/unittests.mqttreceiver.workertests/","title":"WorkerTests","text":"<p>Namespace: UnitTests.MqttReceiver</p> <p>Unit tests for the Worker class, verifying background service orchestration functionality.</p> <pre><code>public class WorkerTests\n</code></pre> <p>Inheritance Object \u2192 WorkerTests</p>"},{"location":"code/UnitTests/unittests.mqttreceiver.workertests/#constructors","title":"Constructors","text":""},{"location":"code/UnitTests/unittests.mqttreceiver.workertests/#workertests_1","title":"WorkerTests()","text":"<pre><code>public WorkerTests()\n</code></pre>"},{"location":"code/UnitTests/unittests.mqttreceiver.workertests/#methods","title":"Methods","text":""},{"location":"code/UnitTests/unittests.mqttreceiver.workertests/#constructor_withnulllogger_throwsargumentnullexception","title":"Constructor_WithNullLogger_ThrowsArgumentNullException()","text":"<p>Tests that the Worker constructor throws when logger is null.</p> <pre><code>public void Constructor_WithNullLogger_ThrowsArgumentNullException()\n</code></pre>"},{"location":"code/UnitTests/unittests.mqttreceiver.workertests/#constructor_withnullreceiver_throwsargumentnullexception","title":"Constructor_WithNullReceiver_ThrowsArgumentNullException()","text":"<p>Tests that the Worker constructor throws when receiver is null.</p> <pre><code>public void Constructor_WithNullReceiver_ThrowsArgumentNullException()\n</code></pre>"},{"location":"code/UnitTests/unittests.mqttreceiver.workertests/#constructor_withvaliddependencies_initializessuccessfully","title":"Constructor_WithValidDependencies_InitializesSuccessfully()","text":"<p>Tests that the Worker constructor properly initializes with valid dependencies.</p> <pre><code>public void Constructor_WithValidDependencies_InitializesSuccessfully()\n</code></pre>"},{"location":"code/UnitTests/unittests.mqttreceiver.workertests/#dispose_disposeswithoutexception","title":"Dispose_DisposesWithoutException()","text":"<p>Tests that the worker disposes properly.</p> <pre><code>public void Dispose_DisposesWithoutException()\n</code></pre>"},{"location":"code/UnitTests/unittests.mqttreceiver.workertests/#dispose_multiplecalls_doesnotthrow","title":"Dispose_MultipleCalls_DoesNotThrow()","text":"<p>Tests that the worker can be disposed multiple times without exception.</p> <pre><code>public void Dispose_MultipleCalls_DoesNotThrow()\n</code></pre>"},{"location":"code/UnitTests/unittests.mqttreceiver.workertests/#executeasync_withcancellationtoken_completesgracefully","title":"ExecuteAsync_WithCancellationToken_CompletesGracefully()","text":"<p>Tests that ExecuteAsync handles cancellation token properly.</p> <pre><code>public Task ExecuteAsync_WithCancellationToken_CompletesGracefully()\n</code></pre>"},{"location":"code/UnitTests/unittests.mqttreceiver.workertests/#returns","title":"Returns","text":"<p>Task</p>"},{"location":"code/UnitTests/unittests.mqttreceiver.workertests/#setup","title":"Setup()","text":"<p>Sets up test fixtures and initializes mocks before each test execution.</p> <pre><code>public void Setup()\n</code></pre>"},{"location":"code/UnitTests/unittests.mqttreceiver.workertests/#teardown","title":"TearDown()","text":"<p>Cleans up resources after each test execution.</p> <pre><code>public void TearDown()\n</code></pre>"},{"location":"code/UnitTests/unittests.repositories.influxrepotests/","title":"InfluxRepoTests","text":"<p>Namespace: UnitTests.Repositories</p> <p>Unit tests for the InfluxRepo class, verifying InfluxDB repository operations including data writing and querying functionality.</p> <pre><code>public class InfluxRepoTests\n</code></pre> <p>Inheritance Object \u2192 InfluxRepoTests</p>"},{"location":"code/UnitTests/unittests.repositories.influxrepotests/#constructors","title":"Constructors","text":""},{"location":"code/UnitTests/unittests.repositories.influxrepotests/#influxrepotests_1","title":"InfluxRepoTests()","text":"<pre><code>public InfluxRepoTests()\n</code></pre>"},{"location":"code/UnitTests/unittests.repositories.influxrepotests/#methods","title":"Methods","text":""},{"location":"code/UnitTests/unittests.repositories.influxrepotests/#constructor_withenvironmentvariablehost_shouldcreateinstance","title":"Constructor_WithEnvironmentVariableHost_ShouldCreateInstance()","text":"<p>Tests that the constructor creates a valid instance when InfluxDB host is provided via environment variable.</p> <pre><code>public void Constructor_WithEnvironmentVariableHost_ShouldCreateInstance()\n</code></pre>"},{"location":"code/UnitTests/unittests.repositories.influxrepotests/#constructor_withenvironmentvariabletoken_shouldcreateinstance","title":"Constructor_WithEnvironmentVariableToken_ShouldCreateInstance()","text":"<p>Tests that the constructor creates a valid instance when InfluxDB token is provided via environment variable.</p> <pre><code>public void Constructor_WithEnvironmentVariableToken_ShouldCreateInstance()\n</code></pre>"},{"location":"code/UnitTests/unittests.repositories.influxrepotests/#constructor_withmissinghost_shouldthrowargumentexception","title":"Constructor_WithMissingHost_ShouldThrowArgumentException()","text":"<p>Tests that the constructor throws ArgumentException when InfluxDB host is missing from configuration.</p> <pre><code>public void Constructor_WithMissingHost_ShouldThrowArgumentException()\n</code></pre>"},{"location":"code/UnitTests/unittests.repositories.influxrepotests/#constructor_withmissingtoken_shouldthrowargumentexception","title":"Constructor_WithMissingToken_ShouldThrowArgumentException()","text":"<p>Tests that the constructor throws ArgumentException when InfluxDB token is missing from configuration.</p> <pre><code>public void Constructor_WithMissingToken_ShouldThrowArgumentException()\n</code></pre>"},{"location":"code/UnitTests/unittests.repositories.influxrepotests/#constructor_withnulllogger_shouldthrowargumentnullexception","title":"Constructor_WithNullLogger_ShouldThrowArgumentNullException()","text":"<p>Tests that the constructor throws ArgumentNullException when logger parameter is null.</p> <pre><code>public void Constructor_WithNullLogger_ShouldThrowArgumentNullException()\n</code></pre>"},{"location":"code/UnitTests/unittests.repositories.influxrepotests/#constructor_withvalidconfiguration_shouldcreateinstance","title":"Constructor_WithValidConfiguration_ShouldCreateInstance()","text":"<p>Tests that the constructor creates a valid instance when provided with valid configuration.</p> <pre><code>public void Constructor_WithValidConfiguration_ShouldCreateInstance()\n</code></pre>"},{"location":"code/UnitTests/unittests.repositories.influxrepotests/#getoutsideweatherdata_withexception_shouldlogerrorandrethrow","title":"GetOutsideWeatherData_WithException_ShouldLogErrorAndRethrow()","text":"<p>Tests that GetOutsideWeatherData logs error and rethrows exception when an error occurs.</p> <pre><code>public Task GetOutsideWeatherData_WithException_ShouldLogErrorAndRethrow()\n</code></pre>"},{"location":"code/UnitTests/unittests.repositories.influxrepotests/#returns","title":"Returns","text":"<p>Task</p>"},{"location":"code/UnitTests/unittests.repositories.influxrepotests/#getsensorweatherdata_withexception_shouldlogerrorandrethrow","title":"GetSensorWeatherData_WithException_ShouldLogErrorAndRethrow()","text":"<p>Tests that GetSensorWeatherData logs error and rethrows exception when an error occurs.</p> <pre><code>public Task GetSensorWeatherData_WithException_ShouldLogErrorAndRethrow()\n</code></pre>"},{"location":"code/UnitTests/unittests.repositories.influxrepotests/#returns_1","title":"Returns","text":"<p>Task</p>"},{"location":"code/UnitTests/unittests.repositories.influxrepotests/#getsensorweatherdata_withvalidparameters_shouldgeneratecorrectquery","title":"GetSensorWeatherData_WithValidParameters_ShouldGenerateCorrectQuery()","text":"<p>Tests that GetSensorWeatherData with valid parameters generates the correct InfluxDB query.</p> <pre><code>public Task GetSensorWeatherData_WithValidParameters_ShouldGenerateCorrectQuery()\n</code></pre>"},{"location":"code/UnitTests/unittests.repositories.influxrepotests/#returns_2","title":"Returns","text":"<p>Task</p>"},{"location":"code/UnitTests/unittests.repositories.influxrepotests/#setup","title":"Setup()","text":"<p>Sets up test fixtures and initializes mocks before each test execution.</p> <pre><code>public void Setup()\n</code></pre>"},{"location":"code/UnitTests/unittests.repositories.influxrepotests/#writeoutsideweatherdata_temperatureconversion_shouldconvertcelsiustofahrenheitcorrectly","title":"WriteOutsideWeatherData_TemperatureConversion_ShouldConvertCelsiusToFahrenheitCorrectly()","text":"<p>Tests that WriteOutsideWeatherData correctly converts temperature from Celsius to Fahrenheit.</p> <pre><code>public void WriteOutsideWeatherData_TemperatureConversion_ShouldConvertCelsiusToFahrenheitCorrectly()\n</code></pre>"},{"location":"code/UnitTests/unittests.repositories.influxrepotests/#writesensordata_timestampconversion_shouldconvertunixtimestampcorrectly","title":"WriteSensorData_TimestampConversion_ShouldConvertUnixTimestampCorrectly()","text":"<p>Tests that WriteSensorData correctly converts Unix timestamp to proper DateTime format.</p> <pre><code>public void WriteSensorData_TimestampConversion_ShouldConvertUnixTimestampCorrectly()\n</code></pre>"},{"location":"code/UnitTests/unittests.repositories.influxrepotests/#writesensordata_withvaliddata_shouldwritepointcorrectly","title":"WriteSensorData_WithValidData_ShouldWritePointCorrectly()","text":"<p>Tests that WriteSensorData with valid data writes the point correctly to InfluxDB.</p> <pre><code>public Task WriteSensorData_WithValidData_ShouldWritePointCorrectly()\n</code></pre>"},{"location":"code/UnitTests/unittests.repositories.influxrepotests/#returns_3","title":"Returns","text":"<p>Task</p>"},{"location":"code/UnitTests/unittests.repositories.settingsrepotests/","title":"SettingsRepoTests","text":"<p>Namespace: UnitTests.Repositories</p> <p>Unit tests for the SettingsRepo class, verifying settings repository operations and database interactions.</p> <pre><code>public class SettingsRepoTests\n</code></pre> <p>Inheritance Object \u2192 SettingsRepoTests</p>"},{"location":"code/UnitTests/unittests.repositories.settingsrepotests/#constructors","title":"Constructors","text":""},{"location":"code/UnitTests/unittests.repositories.settingsrepotests/#settingsrepotests_1","title":"SettingsRepoTests()","text":"<pre><code>public SettingsRepoTests()\n</code></pre>"},{"location":"code/UnitTests/unittests.repositories.settingsrepotests/#methods","title":"Methods","text":""},{"location":"code/UnitTests/unittests.repositories.settingsrepotests/#addtopicsettingasync_withnulltopicsetting_shouldthrowargumentnullexception","title":"AddTopicSettingAsync_WithNullTopicSetting_ShouldThrowArgumentNullException()","text":"<p>Tests that AddTopicSettingAsync throws ArgumentNullException when topic setting parameter is null.</p> <pre><code>public Task AddTopicSettingAsync_WithNullTopicSetting_ShouldThrowArgumentNullException()\n</code></pre>"},{"location":"code/UnitTests/unittests.repositories.settingsrepotests/#returns","title":"Returns","text":"<p>Task</p>"},{"location":"code/UnitTests/unittests.repositories.settingsrepotests/#constructor_withnullcontext_shouldthrowargumentnullexception","title":"Constructor_WithNullContext_ShouldThrowArgumentNullException()","text":"<p>Tests that the constructor throws ArgumentNullException when database context parameter is null.</p> <pre><code>public void Constructor_WithNullContext_ShouldThrowArgumentNullException()\n</code></pre>"},{"location":"code/UnitTests/unittests.repositories.settingsrepotests/#constructor_withvalidcontext_shouldcreateinstance","title":"Constructor_WithValidContext_ShouldCreateInstance()","text":"<p>Tests that the constructor creates a valid instance when provided with valid database context.</p> <pre><code>public void Constructor_WithValidContext_ShouldCreateInstance()\n</code></pre>"},{"location":"code/UnitTests/unittests.repositories.settingsrepotests/#setup","title":"Setup()","text":"<p>Sets up test fixtures and initializes database context before each test execution.</p> <pre><code>public void Setup()\n</code></pre>"},{"location":"code/UnitTests/unittests.repositories.settingsrepotests/#teardown","title":"TearDown()","text":"<p>Cleans up resources and disposes database context after each test execution.</p> <pre><code>public void TearDown()\n</code></pre>"},{"location":"code/UnitTests/unittests.services.authenticationservicetests/","title":"AuthenticationServiceTests","text":"<p>Namespace: UnitTests.Services</p> <p>Unit tests for the AuthenticationService class, verifying user authentication, registration, and token management functionality.</p> <pre><code>public class AuthenticationServiceTests\n</code></pre> <p>Inheritance Object \u2192 AuthenticationServiceTests</p>"},{"location":"code/UnitTests/unittests.services.authenticationservicetests/#constructors","title":"Constructors","text":""},{"location":"code/UnitTests/unittests.services.authenticationservicetests/#authenticationservicetests_1","title":"AuthenticationServiceTests()","text":"<pre><code>public AuthenticationServiceTests()\n</code></pre>"},{"location":"code/UnitTests/unittests.services.authenticationservicetests/#methods","title":"Methods","text":""},{"location":"code/UnitTests/unittests.services.authenticationservicetests/#changepassword_withvaliddata_shouldchangepasswordsuccessfully","title":"ChangePassword_WithValidData_ShouldChangePasswordSuccessfully()","text":"<p>Changes the password of a user with valid current password and new password, verifying that it changes successfully.</p> <pre><code>public Task ChangePassword_WithValidData_ShouldChangePasswordSuccessfully()\n</code></pre>"},{"location":"code/UnitTests/unittests.services.authenticationservicetests/#returns","title":"Returns","text":"<p>Task</p>"},{"location":"code/UnitTests/unittests.services.authenticationservicetests/#changeuser_withvaliduser_shouldupdateusersuccessfully","title":"ChangeUser_WithValidUser_ShouldUpdateUserSuccessfully()","text":"<p>Changes the password of a user with invalid current password and verifies that it throws an exception.</p> <pre><code>public Task ChangeUser_WithValidUser_ShouldUpdateUserSuccessfully()\n</code></pre>"},{"location":"code/UnitTests/unittests.services.authenticationservicetests/#returns_1","title":"Returns","text":"<p>Task</p>"},{"location":"code/UnitTests/unittests.services.authenticationservicetests/#deleteuser_withvaliduser_shoulddeleteusersuccessfully","title":"DeleteUser_WithValidUser_ShouldDeleteUserSuccessfully()","text":"<p>Deletes a user with a valid user object and verifies that the user is deleted successfully.</p> <pre><code>public Task DeleteUser_WithValidUser_ShouldDeleteUserSuccessfully()\n</code></pre>"},{"location":"code/UnitTests/unittests.services.authenticationservicetests/#returns_2","title":"Returns","text":"<p>Task</p>"},{"location":"code/UnitTests/unittests.services.authenticationservicetests/#getuserbyid_withvalidid_shouldreturnuser","title":"GetUserById_WithValidId_ShouldReturnUser()","text":"<p>Gets a user by ID with a valid user ID and verifies that the user is returned correctly.</p> <pre><code>public Task GetUserById_WithValidId_ShouldReturnUser()\n</code></pre>"},{"location":"code/UnitTests/unittests.services.authenticationservicetests/#returns_3","title":"Returns","text":"<p>Task</p>"},{"location":"code/UnitTests/unittests.services.authenticationservicetests/#getuserinformations_shouldreturnallusers","title":"GetUserInformations_ShouldReturnAllUsers()","text":"<p>Gets all user information and verifies that the service can be called without errors.</p> <pre><code>public void GetUserInformations_ShouldReturnAllUsers()\n</code></pre>"},{"location":"code/UnitTests/unittests.services.authenticationservicetests/#login_withemptyusername_shouldthrowauthenticationexception","title":"Login_WithEmptyUsername_ShouldThrowAuthenticationException()","text":"<p>Logs in a user with an empty username, expecting an AuthenticationException to be thrown.</p> <pre><code>public Task Login_WithEmptyUsername_ShouldThrowAuthenticationException()\n</code></pre>"},{"location":"code/UnitTests/unittests.services.authenticationservicetests/#returns_4","title":"Returns","text":"<p>Task</p>"},{"location":"code/UnitTests/unittests.services.authenticationservicetests/#login_withinvalidcredentials_shouldthrowauthenticationexception","title":"Login_WithInvalidCredentials_ShouldThrowAuthenticationException()","text":"<p>Logs in a user with invalid credentials, expecting an AuthenticationException to be thrown.</p> <pre><code>public Task Login_WithInvalidCredentials_ShouldThrowAuthenticationException()\n</code></pre>"},{"location":"code/UnitTests/unittests.services.authenticationservicetests/#returns_5","title":"Returns","text":"<p>Task</p>"},{"location":"code/UnitTests/unittests.services.authenticationservicetests/#login_withnonexistentuser_shouldthrowauthenticationexception","title":"Login_WithNonExistentUser_ShouldThrowAuthenticationException()","text":"<p>Logs in a user with a non-existent username, expecting an AuthenticationException to be thrown.</p> <pre><code>public Task Login_WithNonExistentUser_ShouldThrowAuthenticationException()\n</code></pre>"},{"location":"code/UnitTests/unittests.services.authenticationservicetests/#returns_6","title":"Returns","text":"<p>Task</p>"},{"location":"code/UnitTests/unittests.services.authenticationservicetests/#login_withvalidcredentials_shouldreturnjwttoken","title":"Login_WithValidCredentials_ShouldReturnJwtToken()","text":"<p>Logs in a user with valid credentials and verifies that it returns a JWT token.</p> <pre><code>public Task Login_WithValidCredentials_ShouldReturnJwtToken()\n</code></pre>"},{"location":"code/UnitTests/unittests.services.authenticationservicetests/#returns_7","title":"Returns","text":"<p>Task</p>"},{"location":"code/UnitTests/unittests.services.authenticationservicetests/#refreshtoken_withexpiredrefreshtoken_shouldthrowauthenticationexception","title":"RefreshToken_WithExpiredRefreshToken_ShouldThrowAuthenticationException()","text":"<p>Refreshes a token with an expired refresh token, expecting an AuthenticationException.</p> <pre><code>public Task RefreshToken_WithExpiredRefreshToken_ShouldThrowAuthenticationException()\n</code></pre>"},{"location":"code/UnitTests/unittests.services.authenticationservicetests/#returns_8","title":"Returns","text":"<p>Task</p>"},{"location":"code/UnitTests/unittests.services.authenticationservicetests/#refreshtoken_withinvalidrefreshtoken_shouldthrowauthenticationexception","title":"RefreshToken_WithInvalidRefreshToken_ShouldThrowAuthenticationException()","text":"<p>Refreshes a token with an expired JWT token and verifies that it throws an AuthenticationException.</p> <pre><code>public Task RefreshToken_WithInvalidRefreshToken_ShouldThrowAuthenticationException()\n</code></pre>"},{"location":"code/UnitTests/unittests.services.authenticationservicetests/#returns_9","title":"Returns","text":"<p>Task</p>"},{"location":"code/UnitTests/unittests.services.authenticationservicetests/#refreshtoken_withvalidtoken_shouldreturnnewjwttoken","title":"RefreshToken_WithValidToken_ShouldReturnNewJwtToken()","text":"<p>Refreshes a token with a valid JWT token and refresh token, verifying that it returns a new JWT token.</p> <pre><code>public Task RefreshToken_WithValidToken_ShouldReturnNewJwtToken()\n</code></pre>"},{"location":"code/UnitTests/unittests.services.authenticationservicetests/#returns_10","title":"Returns","text":"<p>Task</p>"},{"location":"code/UnitTests/unittests.services.authenticationservicetests/#register_whenusercreationfails_shouldthrowexception","title":"Register_WhenUserCreationFails_ShouldThrowException()","text":"<p>Registers a user when user creation fails, expecting an exception.</p> <pre><code>public Task Register_WhenUserCreationFails_ShouldThrowException()\n</code></pre>"},{"location":"code/UnitTests/unittests.services.authenticationservicetests/#returns_11","title":"Returns","text":"<p>Task</p>"},{"location":"code/UnitTests/unittests.services.authenticationservicetests/#register_withemptypassword_shouldthrowauthenticationexception","title":"Register_WithEmptyPassword_ShouldThrowAuthenticationException()","text":"<p>Registers a user with an empty password, expecting an AuthenticationException.</p> <pre><code>public Task Register_WithEmptyPassword_ShouldThrowAuthenticationException()\n</code></pre>"},{"location":"code/UnitTests/unittests.services.authenticationservicetests/#returns_12","title":"Returns","text":"<p>Task</p>"},{"location":"code/UnitTests/unittests.services.authenticationservicetests/#register_withemptyusername_shouldthrowauthenticationexception","title":"Register_WithEmptyUsername_ShouldThrowAuthenticationException()","text":"<p>Registers a user with an empty username or password, expecting an AuthenticationException.</p> <pre><code>public Task Register_WithEmptyUsername_ShouldThrowAuthenticationException()\n</code></pre>"},{"location":"code/UnitTests/unittests.services.authenticationservicetests/#returns_13","title":"Returns","text":"<p>Task</p>"},{"location":"code/UnitTests/unittests.services.authenticationservicetests/#register_withexistingusername_shouldthrowexception","title":"Register_WithExistingUsername_ShouldThrowException()","text":"<p>Registers a user with an existing username, expecting an exception.</p> <pre><code>public Task Register_WithExistingUsername_ShouldThrowException()\n</code></pre>"},{"location":"code/UnitTests/unittests.services.authenticationservicetests/#returns_14","title":"Returns","text":"<p>Task</p>"},{"location":"code/UnitTests/unittests.services.authenticationservicetests/#register_withvalidinput_shouldcreateusersuccessfully","title":"Register_WithValidInput_ShouldCreateUserSuccessfully()","text":"<p>Tests that registration with valid input creates a user successfully.</p> <pre><code>public Task Register_WithValidInput_ShouldCreateUserSuccessfully()\n</code></pre>"},{"location":"code/UnitTests/unittests.services.authenticationservicetests/#returns_15","title":"Returns","text":"<p>Task</p>"},{"location":"code/UnitTests/unittests.services.authenticationservicetests/#setup","title":"Setup()","text":"<p>Sets up test fixtures and initializes mocks before each test execution.</p> <pre><code>public void Setup()\n</code></pre>"},{"location":"code/UnitTests/unittests.services.tempservicetests/","title":"TempServiceTests","text":"<p>Namespace: UnitTests.Services</p> <p>Unit tests for the TempService class, verifying temperature operations.</p> <pre><code>public class TempServiceTests\n</code></pre> <p>Inheritance Object \u2192 TempServiceTests</p>"},{"location":"code/UnitTests/unittests.services.tempservicetests/#constructors","title":"Constructors","text":""},{"location":"code/UnitTests/unittests.services.tempservicetests/#tempservicetests_1","title":"TempServiceTests()","text":"<pre><code>public TempServiceTests()\n</code></pre>"},{"location":"code/UnitTests/unittests.services.tempservicetests/#methods","title":"Methods","text":""},{"location":"code/UnitTests/unittests.services.tempservicetests/#constructor_withmissingconfiguration_shouldthrowinvalidoperationexception","title":"Constructor_WithMissingConfiguration_ShouldThrowInvalidOperationException()","text":"<p>Tests that constructor throws InvalidOperationException when configuration is missing.</p> <pre><code>public void Constructor_WithMissingConfiguration_ShouldThrowInvalidOperationException()\n</code></pre>"},{"location":"code/UnitTests/unittests.services.tempservicetests/#getcoordinates_apierrorcode_shouldnotinsert","title":"GetCoordinates_ApiErrorCode_ShouldNotInsert()","text":"<p>Tests that the GetCoordinate function does not insert anything if the api returns a message with an error code.</p> <pre><code>public Task GetCoordinates_ApiErrorCode_ShouldNotInsert()\n</code></pre>"},{"location":"code/UnitTests/unittests.services.tempservicetests/#returns","title":"Returns","text":"<p>Task</p>"},{"location":"code/UnitTests/unittests.services.tempservicetests/#getcoordinates_whenexistingentry_shouldnotcallapi","title":"GetCoordinates_WhenExistingEntry_ShouldNotCallAPi()","text":"<p>Tests that the GetCoordinates function does not call the api when there is an entry in the database.</p> <pre><code>public Task GetCoordinates_WhenExistingEntry_ShouldNotCallAPi()\n</code></pre>"},{"location":"code/UnitTests/unittests.services.tempservicetests/#returns_1","title":"Returns","text":"<p>Task</p>"},{"location":"code/UnitTests/unittests.services.tempservicetests/#getcoordinates_whenmissingfields_shouldnotinsert","title":"GetCoordinates_WhenMissingFields_ShouldNotInsert()","text":"<p>Tests that the GetCoordinates function does not insert anything into the database, when there are missing fields in the JSON response.</p> <pre><code>public Task GetCoordinates_WhenMissingFields_ShouldNotInsert()\n</code></pre>"},{"location":"code/UnitTests/unittests.services.tempservicetests/#returns_2","title":"Returns","text":"<p>Task</p>"},{"location":"code/UnitTests/unittests.services.tempservicetests/#getcoordinates_whennoexistingentry_shouldcallapi","title":"GetCoordinates_WhenNoExistingEntry_ShouldCallApi()","text":"<p>Tests that the GetCoordinates function calls the api when there is no existing entry in the database.</p> <pre><code>public Task GetCoordinates_WhenNoExistingEntry_ShouldCallApi()\n</code></pre>"},{"location":"code/UnitTests/unittests.services.tempservicetests/#returns_3","title":"Returns","text":"<p>Task</p>"},{"location":"code/UnitTests/unittests.services.tempservicetests/#getcoordinates_withemptyjsonarray_shouldthrowinvalidoperationexception","title":"GetCoordinates_WithEmptyJsonArray_ShouldThrowInvalidOperationException()","text":"<p>Tests that GetCoordinates handles empty JSON array response.</p> <pre><code>public Task GetCoordinates_WithEmptyJsonArray_ShouldThrowInvalidOperationException()\n</code></pre>"},{"location":"code/UnitTests/unittests.services.tempservicetests/#returns_4","title":"Returns","text":"<p>Task</p>"},{"location":"code/UnitTests/unittests.services.tempservicetests/#getcoordinates_withnullhttpresponse_shouldhandlegracefully","title":"GetCoordinates_WithNullHttpResponse_ShouldHandleGracefully()","text":"<p>Tests that GetCoordinates handles null HTTP response gracefully.</p> <pre><code>public Task GetCoordinates_WithNullHttpResponse_ShouldHandleGracefully()\n</code></pre>"},{"location":"code/UnitTests/unittests.services.tempservicetests/#returns_5","title":"Returns","text":"<p>Task</p>"},{"location":"code/UnitTests/unittests.services.tempservicetests/#setup","title":"Setup()","text":"<p>Sets up test fixtures and initializes mocks before each test execution.</p> <pre><code>public void Setup()\n</code></pre>"},{"location":"code/UnitTests/unittests.services.tempservicetests/#showavailablelocations_withemptydata_shouldreturnemptylist","title":"ShowAvailableLocations_WithEmptyData_ShouldReturnEmptyList()","text":"<p>Tests that ShowAvailableLocations returns empty list when no data exists.</p> <pre><code>public Task ShowAvailableLocations_WithEmptyData_ShouldReturnEmptyList()\n</code></pre>"},{"location":"code/UnitTests/unittests.services.tempservicetests/#returns_6","title":"Returns","text":"<p>Task</p>"},{"location":"code/UnitTests/unittests.services.tempservicetests/#showavailablelocations_withexception_shouldreturnnull","title":"ShowAvailableLocations_WithException_ShouldReturnNull()","text":"<p>Tests that ShowAvailableLocations returns null when exception occurs.</p> <pre><code>public Task ShowAvailableLocations_WithException_ShouldReturnNull()\n</code></pre>"},{"location":"code/UnitTests/unittests.services.tempservicetests/#returns_7","title":"Returns","text":"<p>Task</p>"},{"location":"code/UnitTests/unittests.services.tempservicetests/#showavailablelocations_withvaliddata_shouldreturnlocations","title":"ShowAvailableLocations_WithValidData_ShouldReturnLocations()","text":"<p>Tests that ShowAvailableLocations returns locations when data exists.</p> <pre><code>public Task ShowAvailableLocations_WithValidData_ShouldReturnLocations()\n</code></pre>"},{"location":"code/UnitTests/unittests.services.tempservicetests/#returns_8","title":"Returns","text":"<p>Task</p>"},{"location":"code/UnitTests/unittests.services.tokenservicetests/","title":"TokenServiceTests","text":"<p>Namespace: UnitTests.Services</p> <p>Unit tests for the TokenService class, verifying JWT token generation, validation, and refresh token functionality.</p> <pre><code>public class TokenServiceTests\n</code></pre> <p>Inheritance Object \u2192 TokenServiceTests</p>"},{"location":"code/UnitTests/unittests.services.tokenservicetests/#constructors","title":"Constructors","text":""},{"location":"code/UnitTests/unittests.services.tokenservicetests/#tokenservicetests_1","title":"TokenServiceTests()","text":"<pre><code>public TokenServiceTests()\n</code></pre>"},{"location":"code/UnitTests/unittests.services.tokenservicetests/#methods","title":"Methods","text":""},{"location":"code/UnitTests/unittests.services.tokenservicetests/#generateaccesstoken_shouldloginformation","title":"GenerateAccessToken_ShouldLogInformation()","text":"<p>Generates an access token and verifies that it logs the appropriate information.</p> <pre><code>public void GenerateAccessToken_ShouldLogInformation()\n</code></pre>"},{"location":"code/UnitTests/unittests.services.tokenservicetests/#generateaccesstoken_withemptyclaims_shouldreturnvalidjwttoken","title":"GenerateAccessToken_WithEmptyClaims_ShouldReturnValidJwtToken()","text":"<p>Generates an access token with empty claims and verifies that it returns a valid JWT token.</p> <pre><code>public void GenerateAccessToken_WithEmptyClaims_ShouldReturnValidJwtToken()\n</code></pre>"},{"location":"code/UnitTests/unittests.services.tokenservicetests/#generateaccesstoken_withvalidclaims_shouldreturnvalidjwttoken","title":"GenerateAccessToken_WithValidClaims_ShouldReturnValidJwtToken()","text":"<p>Tests that GenerateAccessToken with valid claims returns a valid JWT token.</p> <pre><code>public void GenerateAccessToken_WithValidClaims_ShouldReturnValidJwtToken()\n</code></pre>"},{"location":"code/UnitTests/unittests.services.tokenservicetests/#generaterefreshtoken_shouldloginformation","title":"GenerateRefreshToken_ShouldLogInformation()","text":"<p>Generates a refresh token and verifies that it logs the appropriate information.</p> <pre><code>public void GenerateRefreshToken_ShouldLogInformation()\n</code></pre>"},{"location":"code/UnitTests/unittests.services.tokenservicetests/#generaterefreshtoken_shouldreturnbase64string","title":"GenerateRefreshToken_ShouldReturnBase64String()","text":"<p>Generates a refresh token and verifies that it returns a valid base64 string.</p> <pre><code>public void GenerateRefreshToken_ShouldReturnBase64String()\n</code></pre>"},{"location":"code/UnitTests/unittests.services.tokenservicetests/#getprincipalfromexpiredtoken_withemptytoken_shouldthrowargumentexception","title":"GetPrincipalFromExpiredToken_WithEmptyToken_ShouldThrowArgumentException()","text":"<p>Gets the principal from an expired token with an empty string and verifies that it throws an ArgumentException.</p> <pre><code>public void GetPrincipalFromExpiredToken_WithEmptyToken_ShouldThrowArgumentException()\n</code></pre>"},{"location":"code/UnitTests/unittests.services.tokenservicetests/#getprincipalfromexpiredtoken_withinvalidtoken_shouldthrowargumentexception","title":"GetPrincipalFromExpiredToken_WithInvalidToken_ShouldThrowArgumentException()","text":"<p>Gets the principal from an expired token with an invalid token string and verifies that it throws an ArgumentException.</p> <pre><code>public void GetPrincipalFromExpiredToken_WithInvalidToken_ShouldThrowArgumentException()\n</code></pre>"},{"location":"code/UnitTests/unittests.services.tokenservicetests/#getprincipalfromexpiredtoken_withnulltoken_shouldthrowargumentexception","title":"GetPrincipalFromExpiredToken_WithNullToken_ShouldThrowArgumentException()","text":"<p>Gets the principal from an expired token with an empty token string and verifies that it throws an ArgumentException.</p> <pre><code>public void GetPrincipalFromExpiredToken_WithNullToken_ShouldThrowArgumentException()\n</code></pre>"},{"location":"code/UnitTests/unittests.services.tokenservicetests/#getprincipalfromexpiredtoken_withtokensignedwithdifferentkey_shouldthrowsecuritytokenexception","title":"GetPrincipalFromExpiredToken_WithTokenSignedWithDifferentKey_ShouldThrowSecurityTokenException()","text":"<p>Gets the principal from an expired token signed with a different key and verifies that it throws a SecurityTokenException.</p> <pre><code>public void GetPrincipalFromExpiredToken_WithTokenSignedWithDifferentKey_ShouldThrowSecurityTokenException()\n</code></pre>"},{"location":"code/UnitTests/unittests.services.tokenservicetests/#getprincipalfromexpiredtoken_withvalidtoken_shouldreturnclaimsprincipal","title":"GetPrincipalFromExpiredToken_WithValidToken_ShouldReturnClaimsPrincipal()","text":"<p>Gets the principal from an expired token and verifies that it returns a ClaimsPrincipal with the expected claims.</p> <pre><code>public void GetPrincipalFromExpiredToken_WithValidToken_ShouldReturnClaimsPrincipal()\n</code></pre>"},{"location":"code/UnitTests/unittests.services.tokenservicetests/#setup","title":"Setup()","text":"<p>Sets up test fixtures and initializes mocks before each test execution.</p> <pre><code>public void Setup()\n</code></pre>"},{"location":"code/UnitTests/unittests.services.userservicetests/","title":"UserServiceTests","text":"<p>Namespace: UnitTests.Services</p> <p>Unit tests for the UserService class, verifying user management operations including retrieval, updates, and deletion.</p> <pre><code>public class UserServiceTests\n</code></pre> <p>Inheritance Object \u2192 UserServiceTests</p>"},{"location":"code/UnitTests/unittests.services.userservicetests/#constructors","title":"Constructors","text":""},{"location":"code/UnitTests/unittests.services.userservicetests/#userservicetests_1","title":"UserServiceTests()","text":"<pre><code>public UserServiceTests()\n</code></pre>"},{"location":"code/UnitTests/unittests.services.userservicetests/#methods","title":"Methods","text":""},{"location":"code/UnitTests/unittests.services.userservicetests/#changepassword_whenexceptionthrown_shouldlogerrorandrethrow","title":"ChangePassword_WhenExceptionThrown_ShouldLogErrorAndRethrow()","text":"<p>Changes a user's password and verifies that an exception is thrown when invalid data is provided.</p> <pre><code>public Task ChangePassword_WhenExceptionThrown_ShouldLogErrorAndRethrow()\n</code></pre>"},{"location":"code/UnitTests/unittests.services.userservicetests/#returns","title":"Returns","text":"<p>Task</p>"},{"location":"code/UnitTests/unittests.services.userservicetests/#changepassword_withvaliddata_shouldchangepasswordsuccessfully","title":"ChangePassword_WithValidData_ShouldChangePasswordSuccessfully()","text":"<p>Changes a user's password and verifies that the password is changed successfully.</p> <pre><code>public Task ChangePassword_WithValidData_ShouldChangePasswordSuccessfully()\n</code></pre>"},{"location":"code/UnitTests/unittests.services.userservicetests/#returns_1","title":"Returns","text":"<p>Task</p>"},{"location":"code/UnitTests/unittests.services.userservicetests/#changeuser_whenexceptionthrown_shouldlogerrorandrethrow","title":"ChangeUser_WhenExceptionThrown_ShouldLogErrorAndRethrow()","text":"<p>Changes a user's information and verifies that an exception is logged and rethrown.</p> <pre><code>public Task ChangeUser_WhenExceptionThrown_ShouldLogErrorAndRethrow()\n</code></pre>"},{"location":"code/UnitTests/unittests.services.userservicetests/#returns_2","title":"Returns","text":"<p>Task</p>"},{"location":"code/UnitTests/unittests.services.userservicetests/#changeuser_withinvaliddata_shouldthrowexception","title":"ChangeUser_WithInvalidData_ShouldThrowException()","text":"<p>Changes a user's information and verifies that an exception is thrown when invalid data is provided.</p> <pre><code>public Task ChangeUser_WithInvalidData_ShouldThrowException()\n</code></pre>"},{"location":"code/UnitTests/unittests.services.userservicetests/#returns_3","title":"Returns","text":"<p>Task</p>"},{"location":"code/UnitTests/unittests.services.userservicetests/#changeuser_withvaliduser_shouldupdateusersuccessfully","title":"ChangeUser_WithValidUser_ShouldUpdateUserSuccessfully()","text":"<p>Changes a user's information and verifies that the user is updated successfully.</p> <pre><code>public Task ChangeUser_WithValidUser_ShouldUpdateUserSuccessfully()\n</code></pre>"},{"location":"code/UnitTests/unittests.services.userservicetests/#returns_4","title":"Returns","text":"<p>Task</p>"},{"location":"code/UnitTests/unittests.services.userservicetests/#deleteuser_whendeletionfails_shouldreturnfalse","title":"DeleteUser_WhenDeletionFails_ShouldReturnFalse()","text":"<p>Deletes a user and verifies that the deletion fails, returning false.</p> <pre><code>public Task DeleteUser_WhenDeletionFails_ShouldReturnFalse()\n</code></pre>"},{"location":"code/UnitTests/unittests.services.userservicetests/#returns_5","title":"Returns","text":"<p>Task</p>"},{"location":"code/UnitTests/unittests.services.userservicetests/#deleteuser_whenexceptionthrown_shouldlogerrorandrethrow","title":"DeleteUser_WhenExceptionThrown_ShouldLogErrorAndRethrow()","text":"<p>Deletes a user and verifies that an exception is logged and rethrown.</p> <pre><code>public Task DeleteUser_WhenExceptionThrown_ShouldLogErrorAndRethrow()\n</code></pre>"},{"location":"code/UnitTests/unittests.services.userservicetests/#returns_6","title":"Returns","text":"<p>Task</p>"},{"location":"code/UnitTests/unittests.services.userservicetests/#deleteuser_withvaliduser_shoulddeleteusersuccessfully","title":"DeleteUser_WithValidUser_ShouldDeleteUserSuccessfully()","text":"<p>Deletes a user and verifies that the deletion is successful, returning true.</p> <pre><code>public Task DeleteUser_WithValidUser_ShouldDeleteUserSuccessfully()\n</code></pre>"},{"location":"code/UnitTests/unittests.services.userservicetests/#returns_7","title":"Returns","text":"<p>Task</p>"},{"location":"code/UnitTests/unittests.services.userservicetests/#getuserbyid_whenexceptionthrown_shouldlogerrorandrethrow","title":"GetUserById_WhenExceptionThrown_ShouldLogErrorAndRethrow()","text":"<p>Gets a user by ID and verifies that an exception is logged and rethrown when an error occurs.</p> <pre><code>public Task GetUserById_WhenExceptionThrown_ShouldLogErrorAndRethrow()\n</code></pre>"},{"location":"code/UnitTests/unittests.services.userservicetests/#returns_8","title":"Returns","text":"<p>Task</p>"},{"location":"code/UnitTests/unittests.services.userservicetests/#getuserbyid_withnonexistentid_shouldreturnnull","title":"GetUserById_WithNonExistentId_ShouldReturnNull()","text":"<p>Gets a user by ID and verifies that null is returned when the user does not exist.</p> <pre><code>public Task GetUserById_WithNonExistentId_ShouldReturnNull()\n</code></pre>"},{"location":"code/UnitTests/unittests.services.userservicetests/#returns_9","title":"Returns","text":"<p>Task</p>"},{"location":"code/UnitTests/unittests.services.userservicetests/#getuserbyid_withvalidid_shouldreturnuser","title":"GetUserById_WithValidId_ShouldReturnUser()","text":"<p>Gets a user by ID and verifies that the user is returned successfully.</p> <pre><code>public Task GetUserById_WithValidId_ShouldReturnUser()\n</code></pre>"},{"location":"code/UnitTests/unittests.services.userservicetests/#returns_10","title":"Returns","text":"<p>Task</p>"},{"location":"code/UnitTests/unittests.services.userservicetests/#getuserinformations_shouldreturnallusers","title":"GetUserInformations_ShouldReturnAllUsers()","text":"<p>Tests that GetUserInformations returns all users from the system.</p> <pre><code>public void GetUserInformations_ShouldReturnAllUsers()\n</code></pre>"},{"location":"code/UnitTests/unittests.services.userservicetests/#getuserinformations_whenexceptionthrown_shouldlogerrorandrethrow","title":"GetUserInformations_WhenExceptionThrown_ShouldLogErrorAndRethrow()","text":"<p>Gets user information and verifies that the user list is returned successfully.</p> <pre><code>public Task GetUserInformations_WhenExceptionThrown_ShouldLogErrorAndRethrow()\n</code></pre>"},{"location":"code/UnitTests/unittests.services.userservicetests/#returns_11","title":"Returns","text":"<p>Task</p>"},{"location":"code/UnitTests/unittests.services.userservicetests/#getuserinformations_whennousers_shouldreturnemptylist","title":"GetUserInformations_WhenNoUsers_ShouldReturnEmptyList()","text":"<p>Gets user information and verifies that an empty list is returned when no users exist.</p> <pre><code>public void GetUserInformations_WhenNoUsers_ShouldReturnEmptyList()\n</code></pre>"},{"location":"code/UnitTests/unittests.services.userservicetests/#setup","title":"Setup()","text":"<p>Sets up test fixtures and initializes mocks before each test execution.</p> <pre><code>public void Setup()\n</code></pre>"},{"location":"code/arduino/md/","title":"Contents pages","text":"<ul> <li>Global contents</li> <li>Files</li> <li>Structures</li> <li>Modules</li> <li>Directories</li> </ul>"},{"location":"code/arduino/md/#index-pages","title":"Index pages","text":"<ul> <li>Global index</li> <li>Files</li> <li>Structures</li> <li>Modules</li> <li>Directories</li> </ul>"},{"location":"code/arduino/md/core_8cpp/","title":"Core 8cpp","text":""},{"location":"code/arduino/md/core_8cpp/#file-corecpp","title":"File core.cpp","text":"<p>Location: <code>src/core.cpp</code></p>"},{"location":"code/arduino/md/core_8cpp/#includes","title":"Includes","text":"<ul> <li>platform.h</li> <li>core.h</li> <li>network.h</li> <li>mqtt.h</li> <li>sensor.h</li> <li>storage.h</li> <li>secrets.h</li> </ul> <pre><code>graph LR\n10[\"core.h\"]\nclick 10 \"core_8h.md#core_8h\"\n\n12[\"mqtt.h\"]\nclick 12 \"mqtt_8h.md#mqtt_8h\"\n12 --&gt; 2\n\n11[\"network.h\"]\nclick 11 \"network_8h.md#network_8h\"\n11 --&gt; 2\n\n2[\"platform.h\"]\nclick 2 \"platform_8h.md#platform_8h\"\n2 --&gt; 3\n2 --&gt; 4\n2 --&gt; 5\n2 --&gt; 6\n2 --&gt; 7\n2 --&gt; 8\n2 --&gt; 9\n\n13[\"sensor.h\"]\nclick 13 \"sensor_8h.md#sensor_8h\"\n13 --&gt; 2\n\n14[\"storage.h\"]\nclick 14 \"storage_8h.md#storage_8h\"\n14 --&gt; 2\n14 --&gt; 15\n\n1[\"src/core.cpp\"]\nclick 1 \"core_8cpp.md#core_8cpp\"\n1 --&gt; 2\n1 --&gt; 10\n1 --&gt; 11\n1 --&gt; 12\n1 --&gt; 13\n1 --&gt; 14\n1 --&gt; 16\n\n7[\"Adafruit_ADT7410.h\"]\n\n3[\"Arduino.h\"]\n\n8[\"ArduinoJson.h\"]\n\n9[\"ArduinoMqttClient.h\"]\n\n6[\"RTClib.h\"]\n\n5[\"SdFat.h\"]\n\n4[\"Wire.h\"]\n\n15[\"cstdio\"]\n\n16[\"secrets.h\"]\n</code></pre>"},{"location":"code/arduino/md/core_8cpp/#variables","title":"Variables","text":""},{"location":"code/arduino/md/core_8cpp/#variable-rtc","title":"Variable rtc","text":"<p>Definition: <code>src/core.cpp</code> (line 17)</p> <pre><code>RTC_DS3231 rtc\n</code></pre> <p>Type: RTC_DS3231</p> <p></p>"},{"location":"code/arduino/md/core_8cpp/#variable-tempsensor","title":"Variable tempsensor","text":"<p>Definition: <code>src/core.cpp</code> (line 18)</p> <pre><code>Adafruit_ADT7410 tempsensor\n</code></pre> <p>Type: Adafruit_ADT7410</p> <p></p>"},{"location":"code/arduino/md/core_8cpp/#variable-sd","title":"Variable sd","text":"<p>Definition: <code>src/core.cpp</code> (line 19)</p> <pre><code>SdFat sd\n</code></pre> <p>Type: SdFat</p> <p></p>"},{"location":"code/arduino/md/core_8cpp/#variable-wificlient","title":"Variable wifiClient","text":"<p>Definition: <code>src/core.cpp</code> (line 20)</p> <pre><code>WiFiClient wifiClient\n</code></pre> <p>Type: WiFiClient</p> <p></p>"},{"location":"code/arduino/md/core_8cpp/#variable-chip_select","title":"Variable CHIP_SELECT","text":"<p>Definition: <code>src/core.cpp</code> (line 29)</p> <pre><code>const uint8_t CHIP_SELECT = 4\n</code></pre> <p>SD card chip select pin.</p> <p>Type: const uint8_t</p> <p></p>"},{"location":"code/arduino/md/core_8cpp/#variable-sensor_id_one","title":"Variable SENSOR_ID_ONE","text":"<p>Definition: <code>src/core.cpp</code> (line 30)</p> <pre><code>const char* SENSOR_ID_ONE = \"Sensor_One\"\n</code></pre> <p>Type: const char *</p> <p></p>"},{"location":"code/arduino/md/core_8cpp/#variable-sensor_id_in_use","title":"Variable SENSOR_ID_IN_USE","text":"<p>Definition: <code>src/core.cpp</code> (line 31)</p> <pre><code>const char* SENSOR_ID_IN_USE = [SENSOR\\_ID\\_ONE](core_8cpp.md#core_8cpp_1adfea6785b2b85c4960d78d8c64a1af5d)\n</code></pre> <p>Type: const char *</p> <p></p>"},{"location":"code/arduino/md/core_8cpp/#variable-sensor_type","title":"Variable SENSOR_TYPE","text":"<p>Definition: <code>src/core.cpp</code> (line 34)</p> <pre><code>const char* SENSOR_TYPE = \"temp\"\n</code></pre> <p>Type: const char *</p> <p></p>"},{"location":"code/arduino/md/core_8cpp/#variable-mqtt_topic","title":"Variable MQTT_TOPIC","text":"<p>Definition: <code>src/core.cpp</code> (line 35)</p> <pre><code>const char* MQTT_TOPIC = \"dhbw/ai/si2023/2/\"\n</code></pre> <p>Type: const char *</p> <p></p>"},{"location":"code/arduino/md/core_8cpp/#variable-wifi_connect_timeout_ms","title":"Variable WIFI_CONNECT_TIMEOUT_MS","text":"<p>Definition: <code>src/core.cpp</code> (line 41)</p> <pre><code>const unsigned long WIFI_CONNECT_TIMEOUT_MS = 15000\n</code></pre> <p>Type: const unsigned long</p> <p></p>"},{"location":"code/arduino/md/core_8cpp/#variable-loop_delay_ms","title":"Variable LOOP_DELAY_MS","text":"<p>Definition: <code>src/core.cpp</code> (line 42)</p> <pre><code>const unsigned long LOOP_DELAY_MS = 1000\n</code></pre> <p>Type: const unsigned long</p> <p></p>"},{"location":"code/arduino/md/core_8cpp/#variable-client_id_buffer_size","title":"Variable CLIENT_ID_BUFFER_SIZE","text":"<p>Definition: <code>src/core.cpp</code> (line 43)</p> <pre><code>const size_t CLIENT_ID_BUFFER_SIZE = 64\n</code></pre> <p>Type: const size_t</p> <p></p>"},{"location":"code/arduino/md/core_8cpp/#variable-sd_sck_frequency_mhz","title":"Variable SD_SCK_FREQUENCY_MHZ","text":"<p>Definition: <code>src/core.cpp</code> (line 45)</p> <pre><code>const uint8_t SD_SCK_FREQUENCY_MHZ = 25\n</code></pre> <p>Type: const uint8_t</p> <p></p>"},{"location":"code/arduino/md/core_8cpp/#variable-reconnect_interval_ms","title":"Variable RECONNECT_INTERVAL_MS","text":"<p>Definition: <code>src/core.cpp</code> (line 47)</p> <pre><code>const int RECONNECT_INTERVAL_MS = 2000\n</code></pre> <p>Type: const int</p> <p></p>"},{"location":"code/arduino/md/core_8cpp/#variable-lastloggedminute","title":"Variable lastLoggedMinute","text":"<p>Definition: <code>src/core.cpp</code> (line 53)</p> <pre><code>int lastLoggedMinute = -1\n</code></pre> <p>Type: int</p> <p></p>"},{"location":"code/arduino/md/core_8cpp/#variable-seqcount","title":"Variable seqCount","text":"<p>Definition: <code>src/core.cpp</code> (line 54)</p> <pre><code>int seqCount = 0\n</code></pre> <p>Type: int</p> <p></p>"},{"location":"code/arduino/md/core_8cpp/#variable-recoverysent","title":"Variable recoverySent","text":"<p>Definition: <code>src/core.cpp</code> (line 55)</p> <pre><code>bool recoverySent = false\n</code></pre> <p>Type: bool</p> <p></p>"},{"location":"code/arduino/md/core_8cpp/#variable-lastreconnectattempt","title":"Variable lastReconnectAttempt","text":"<p>Definition: <code>src/core.cpp</code> (line 56)</p> <pre><code>unsigned long lastReconnectAttempt = 0\n</code></pre> <p>Type: unsigned long</p>"},{"location":"code/arduino/md/core_8cpp/#functions","title":"Functions","text":""},{"location":"code/arduino/md/core_8cpp/#function-mqttclient","title":"Function mqttClient","text":"<pre><code>MqttClient mqttClient(wifiClient)\n</code></pre> <p>Parameters:</p> <ul> <li>wifiClient</li> </ul> <p>Return type: MqttClient</p> <p></p>"},{"location":"code/arduino/md/core_8cpp/#function-iswificonnected","title":"Function IsWifiConnected","text":"<pre><code>bool IsWifiConnected()\n</code></pre> <p>Return type: bool</p> <p></p>"},{"location":"code/arduino/md/core_8cpp/#function-ismqttconnected","title":"Function IsMqttConnected","text":"<pre><code>bool IsMqttConnected()\n</code></pre> <p>Return type: bool</p> <p></p>"},{"location":"code/arduino/md/core_8cpp/#function-fatdatetime","title":"Function FatDateTime","text":"<pre><code>void FatDateTime(uint16_t *date, uint16_t *time)\n</code></pre> <p>Callback function for FAT file system timestamp generation.</p> <p>This function is used by the SdFat library to obtain current date and time for file system operations. It retrieves the time from the RTC and converts it to the FAT file system format using the appropriate macros.</p> <p>Parameters:</p> <ul> <li>date: Pointer to store the encoded FAT date (year, month, day)</li> <li>time: Pointer to store the encoded FAT time (hour, minute, second)</li> </ul> <p>?&gt; This function is registered as a callback with SdFile::dateTimeCallback()</p> <p>See also: FAT_DATE, FAT_TIME macros for encoding format details</p> <p>Parameters:</p> <ul> <li>uint16_t * date</li> <li>uint16_t * time</li> </ul> <p>Return type: void</p> <p></p>"},{"location":"code/arduino/md/core_8cpp/#function-coresetup","title":"Function CoreSetup","text":"<pre><code>void CoreSetup()\n</code></pre> <p>Initializes all core system components and peripherals.</p> <p>This function performs comprehensive system initialization including:</p> <p>Network Setup: * Establishes WiFi connection with timeout handling</p> <ul> <li> <p>Configures MQTT client with unique sensor-based ID</p> </li> <li> <p>Attempts initial MQTT broker connection</p> </li> </ul> <p>Hardware Initialization: * Initializes DS3231 real-time clock module</p> <ul> <li> <p>Adjusts RTC time if power was lost (uses compilation timestamp)</p> </li> <li> <p>Sets up SD card with SPI communication</p> </li> <li> <p>Initializes ADT7410 temperature sensor</p> </li> </ul> <p>Data Recovery: * Registers FAT file system timestamp callback</p> <p>!&gt; Warning \\ This function will halt program execution (infinite loop) if any critical component fails to initialize (RTC, SD card, or temperature sensor)</p> <p>?&gt; The function uses compile-time constants for timeouts and configuration</p> <p>See also: WIFI_CONNECT_TIMEOUT_MS, CLIENT_ID_BUFFER_SIZE, SD_SCK_FREQUENCY_MHZ</p> <p>Return type: void</p> <p></p>"},{"location":"code/arduino/md/core_8cpp/#function-coreloop","title":"Function CoreLoop","text":"<pre><code>void CoreLoop()\n</code></pre> <p>Main operational loop for continuous sensor monitoring, MQTT transmission, and robust data recovery.</p> <p>This function implements the primary logic for the temperature monitoring system, including: * Real-time sensor measurement and transmission via MQTT with QoS 1</p> <ul> <li> <p>Intelligent WiFi and MQTT connection management with automatic reconnection</p> </li> <li> <p>Fallback to CSV batch storage during connectivity outages</p> </li> <li> <p>Recovery and transmission of offline data after successful reconnection</p> </li> <li> <p>Comprehensive error handling and status reporting</p> </li> </ul> <p>Operational Flow: 1. Time Management: Reads current time from RTC, tracks minute changes to avoid duplicate measurements. 2. WiFi Connection: Monitors status, attempts reconnection, falls back to CSV logging if offline. 3. MQTT Connection: Verifies broker connectivity, reconnects as needed, falls back to CSV logging if offline. 4. Data Recovery: Sends pending CSV data after reconnection, ensures recovery only once per cycle. 5. Normal Operation: Measures temperature, transmits via MQTT, polls for incoming messages.</p> <p>Error Handling: * Network or broker failures trigger CSV fallback storage for all measurements.</p> <ul> <li> <p>Connection attempts are rate-limited to prevent resource exhaustion.</p> </li> <li> <p>All measurement data is preserved and recovered after connectivity is restored.</p> </li> </ul> <p>?&gt; Maintains a fixed loop delay for consistent timing and system stability.</p> <p>See also: RECONNECT_INTERVAL_MS, LOOP_DELAY_MS for timing configuration, saveToCsvBatch() for offline data storage, sendPendingData() for data recovery and MQTT retransmission</p> <p>Return type: void</p>"},{"location":"code/arduino/md/core_8cpp/#source","title":"Source","text":"<pre><code>#include \"platform.h\"\n#include \"core.h\"\n#include \"network.h\"\n#include \"mqtt.h\"\n#include \"sensor.h\"\n#include \"storage.h\"\n\n#ifdef UNIT_TEST\n#include \"secrets_example.h\"\n#else\n#include \"secrets.h\"\n#endif\n\n\n#ifndef UNIT_TEST\n// Global hardware objects for real hardware only\nRTC_DS3231 rtc;\nAdafruit_ADT7410 tempsensor;   \nSdFat sd;\nstatic WiFiClient wifiClient;\nMqttClient mqttClient(wifiClient);\n#endif\n\n// =============================================================================\n// SYSTEM CONFIGURATION CONSTANTS\n// =============================================================================\n\nstatic const uint8_t CHIP_SELECT = 4;\nstatic const char* SENSOR_ID_ONE = \"Sensor_One\";\nstatic const char* SENSOR_ID_IN_USE = SENSOR_ID_ONE; \n// static const char* SENSOR_ID_TWO = \"Sensor_Two\";\n// static const char* SENSOR_ID_IN_USE = SENSOR_ID_TWO; // Uncomment to use the second\nstatic const char* SENSOR_TYPE = \"temp\";\nstatic const char* MQTT_TOPIC = \"dhbw/ai/si2023/2/\";\n\n// =============================================================================\n// TIMING AND CONNECTION CONSTANTS\n// =============================================================================\n\nstatic const unsigned long WIFI_CONNECT_TIMEOUT_MS = 15000;\nstatic const unsigned long LOOP_DELAY_MS = 1000;\nstatic const size_t CLIENT_ID_BUFFER_SIZE = 64;\n#ifndef UNIT_TEST\nstatic const uint8_t SD_SCK_FREQUENCY_MHZ = 25;\n#endif\nstatic const int RECONNECT_INTERVAL_MS = 2000;\n\n// =============================================================================\n// SYSTEM STATE VARIABLES\n// =============================================================================\n\nstatic int lastLoggedMinute = -1;\nstatic int seqCount = 0;\nstatic bool recoverySent = false;\nstatic unsigned long lastReconnectAttempt = 0;\n\n// =============================================================================\n// CONNECTION STATUS FUNCTIONS\n// =============================================================================\n\nbool IsWifiConnected() {\n  return WiFi.status() == WL_CONNECTED;\n}\n\nbool IsMqttConnected() {\n  return mqttClient.connected();\n}\n\n// =============================================================================\n// FAT FILE SYSTEM CALLBACK FUNCTIONS\n// =============================================================================\n\nvoid FatDateTime(uint16_t* date, uint16_t* time) {\n  DateTime now = rtc.now();\n  *date = FAT_DATE(now.year(), now.month(), now.day());\n  *time = FAT_TIME(now.hour(), now.minute(), now.second());\n}\n\n// =============================================================================\n// SYSTEM INITIALIZATION FUNCTIONS\n// =============================================================================\n\nvoid CoreSetup() {\n  ConnectToWiFi(WIFI_CONNECT_TIMEOUT_MS);\n\n  char clientId[CLIENT_ID_BUFFER_SIZE];\n  snprintf(clientId, sizeof(clientId), \"IsoPruefi_%s\", SENSOR_ID_IN_USE);\n  mqttClient.setId(clientId);\n\n  if (IsWifiConnected()) {\n    ConnectToMQTT(mqttClient);\n  }\n\n  if (!rtc.begin()) {\n    Serial.println(\"RTC not found!\");\n    while (1);\n  }\n\n  // Set RTC time if power was lost (uses compilation timestamp)\n  if (rtc.lostPower()) {\n    rtc.adjust(DateTime(F(__DATE__), F(__TIME__)));\n  }\n\n  // Register callback for SD file timestamps and initialize SD card\n  SdFile::dateTimeCallback(FatDateTime);\n  if (!sd.begin(CHIP_SELECT, SD_SCK_MHZ(SD_SCK_FREQUENCY_MHZ))) {\n    Serial.println(\"SD card failed.\");\n    while (1);\n  }\n\n  if (!InitSensor(tempsensor)) {\n    Serial.println(\"ADT7410 init failed!\");\n    while (1);\n  }\n\n  DateTime now = rtc.now();\n  Serial.print(\"Current time: \");\n  Serial.println(now.timestamp(DateTime::TIMESTAMP_FULL));\n  Serial.print(\"Lost Power? \"); \n  Serial.println(rtc.lostPower() ? \"YES\" : \"NO\");\n\n  Serial.println(\"Setup complete.\");\n}\n\n// =============================================================================\n// MAIN OPERATIONAL LOOP\n// =============================================================================\n\nvoid CoreLoop() {\n  DateTime now = rtc.now();\n  static bool alreadyLoggedThisMinute = false;\n\n  if (now.minute() != lastLoggedMinute) {\n    lastLoggedMinute = now.minute();\n    alreadyLoggedThisMinute = false;\n  }\n\n  // Step 1: Check WiFi connection\n  if (!IsWifiConnected()) {\n    if (millis() - lastReconnectAttempt &gt; RECONNECT_INTERVAL_MS) {\n      lastReconnectAttempt = millis();\n      Serial.println(\"WiFi not connected. Trying to reconnect...\");\n      ConnectToWiFi(WIFI_CONNECT_TIMEOUT_MS);\n    }\n\n    if (!IsWifiConnected()) {\n      Serial.println(\"WiFi reconnect failed. Skipping loop.\");\n      if (!alreadyLoggedThisMinute) {\n        float c = ReadTemperatureInCelsius();\n        SaveTempToBatchCsv(now, c, seqCount);\n        alreadyLoggedThisMinute = true;\n        seqCount++;\n      }\n      delay(LOOP_DELAY_MS);\n      return;\n    }\n  }\n\n  // Step 2: Check MQTT connection\n  if (!IsMqttConnected()) {\n    Serial.println(\"MQTT not connected. Trying to reconnect...\");\n    if (!ConnectToMQTT(mqttClient)) {\n      Serial.println(\"MQTT reconnect failed. Skipping loop.\");\n      if (!alreadyLoggedThisMinute) {\n        float c = ReadTemperatureInCelsius();\n        SaveTempToBatchCsv(now, c, seqCount);\n        alreadyLoggedThisMinute = true;\n        seqCount++;\n      }\n      delay(LOOP_DELAY_MS);\n      return;\n    }\n\n    Serial.println(\"MQTT reconnected successfully.\");\n    recoverySent = false; // Allow recovery again\n  }\n\n  // Step 3: After successful MQTT reconnect \u2192 send old CSVs\n  if (!recoverySent &amp;&amp; IsConnectedToServer(mqttClient)) {\n    if (SendPendingDataToMqtt(mqttClient, MQTT_TOPIC, SENSOR_TYPE, SENSOR_ID_IN_USE, now)) {\n      recoverySent = true;\n    }\n  }\n\n  // Step 4: Normal measurement and MQTT transmission\n  if (!alreadyLoggedThisMinute &amp;&amp; IsConnectedToServer(mqttClient)) {\n    float c = ReadTemperatureInCelsius();\n    SendTempToMqtt(mqttClient, MQTT_TOPIC, SENSOR_TYPE, SENSOR_ID_IN_USE, c, now, seqCount);\n    alreadyLoggedThisMinute = true;\n    seqCount++;\n  }\n\n  // Step 5: MQTT loop and wait time\n  mqttClient.poll();\n  delay(LOOP_DELAY_MS);\n}\n</code></pre>"},{"location":"code/arduino/md/core_8h/","title":"Core 8h","text":""},{"location":"code/arduino/md/core_8h/#file-coreh","title":"File core.h","text":"<p>Location: <code>include/core.h</code></p>"},{"location":"code/arduino/md/core_8h/#included-by","title":"Included by","text":"<ul> <li>src/core.cpp</li> <li>src/main.cpp</li> </ul> <pre><code>graph RL\n1[\"include/core.h\"]\nclick 1 \"core_8h.md#core_8h\"\n2 --&gt; 1\n3 --&gt; 1\n\n2[\"src/core.cpp\"]\nclick 2 \"core_8cpp.md#core_8cpp\"\n\n3[\"src/main.cpp\"]\nclick 3 \"main_8cpp.md#main_8cpp\"\n</code></pre>"},{"location":"code/arduino/md/core_8h/#functions","title":"Functions","text":""},{"location":"code/arduino/md/core_8h/#function-coresetup","title":"Function CoreSetup","text":"<pre><code>void CoreSetup()\n</code></pre> <p>Initializes all core system components and peripherals.</p> <p>This function performs comprehensive system initialization including:</p> <p>Network Setup: * Establishes WiFi connection with timeout handling</p> <ul> <li> <p>Configures MQTT client with unique sensor-based ID</p> </li> <li> <p>Attempts initial MQTT broker connection</p> </li> </ul> <p>Hardware Initialization: * Initializes DS3231 real-time clock module</p> <ul> <li> <p>Adjusts RTC time if power was lost (uses compilation timestamp)</p> </li> <li> <p>Sets up SD card with SPI communication</p> </li> <li> <p>Initializes ADT7410 temperature sensor</p> </li> </ul> <p>Data Recovery: * Registers FAT file system timestamp callback</p> <p>!&gt; Warning \\ This function will halt program execution (infinite loop) if any critical component fails to initialize (RTC, SD card, or temperature sensor)</p> <p>?&gt; The function uses compile-time constants for timeouts and configuration</p> <p>See also: WIFI_CONNECT_TIMEOUT_MS, CLIENT_ID_BUFFER_SIZE, SD_SCK_FREQUENCY_MHZ</p> <p>Return type: void</p> <p></p>"},{"location":"code/arduino/md/core_8h/#function-coreloop","title":"Function CoreLoop","text":"<pre><code>void CoreLoop()\n</code></pre> <p>Main operational loop for continuous sensor monitoring, MQTT transmission, and robust data recovery.</p> <p>This function implements the primary logic for the temperature monitoring system, including: * Real-time sensor measurement and transmission via MQTT with QoS 1</p> <ul> <li> <p>Intelligent WiFi and MQTT connection management with automatic reconnection</p> </li> <li> <p>Fallback to CSV batch storage during connectivity outages</p> </li> <li> <p>Recovery and transmission of offline data after successful reconnection</p> </li> <li> <p>Comprehensive error handling and status reporting</p> </li> </ul> <p>Operational Flow: 1. Time Management: Reads current time from RTC, tracks minute changes to avoid duplicate measurements. 2. WiFi Connection: Monitors status, attempts reconnection, falls back to CSV logging if offline. 3. MQTT Connection: Verifies broker connectivity, reconnects as needed, falls back to CSV logging if offline. 4. Data Recovery: Sends pending CSV data after reconnection, ensures recovery only once per cycle. 5. Normal Operation: Measures temperature, transmits via MQTT, polls for incoming messages.</p> <p>Error Handling: * Network or broker failures trigger CSV fallback storage for all measurements.</p> <ul> <li> <p>Connection attempts are rate-limited to prevent resource exhaustion.</p> </li> <li> <p>All measurement data is preserved and recovered after connectivity is restored.</p> </li> </ul> <p>?&gt; Maintains a fixed loop delay for consistent timing and system stability.</p> <p>See also: RECONNECT_INTERVAL_MS, LOOP_DELAY_MS for timing configuration, saveToCsvBatch() for offline data storage, sendPendingData() for data recovery and MQTT retransmission</p> <p>Return type: void</p> <p></p>"},{"location":"code/arduino/md/core_8h/#function-iswificonnected","title":"Function IsWifiConnected","text":"<pre><code>bool IsWifiConnected()\n</code></pre> <p>Return type: bool</p> <p></p>"},{"location":"code/arduino/md/core_8h/#function-ismqttconnected","title":"Function IsMqttConnected","text":"<pre><code>bool IsMqttConnected()\n</code></pre> <p>Return type: bool</p> <p></p>"},{"location":"code/arduino/md/core_8h/#function-fatdatetime","title":"Function FatDateTime","text":"<pre><code>void FatDateTime(uint16_t *date, uint16_t *time)\n</code></pre> <p>Callback function for FAT file system timestamp generation.</p> <p>This function is used by the SdFat library to obtain current date and time for file system operations. It retrieves the time from the RTC and converts it to the FAT file system format using the appropriate macros.</p> <p>Parameters:</p> <ul> <li>date: Pointer to store the encoded FAT date (year, month, day)</li> <li>time: Pointer to store the encoded FAT time (hour, minute, second)</li> </ul> <p>?&gt; This function is registered as a callback with SdFile::dateTimeCallback()</p> <p>See also: FAT_DATE, FAT_TIME macros for encoding format details</p> <p>Parameters:</p> <ul> <li>uint16_t * date</li> <li>uint16_t * time</li> </ul> <p>Return type: void</p>"},{"location":"code/arduino/md/core_8h/#source","title":"Source","text":"<pre><code>#pragma once\n\nvoid CoreSetup();\nvoid CoreLoop();\nbool IsWifiConnected();\nbool IsMqttConnected();\nvoid FatDateTime(uint16_t* date, uint16_t* time);\n</code></pre>"},{"location":"code/arduino/md/dir_68267d1309a1af8e8297ef4c3efbcdba/","title":"Dir 68267d1309a1af8e8297ef4c3efbcdba","text":""},{"location":"code/arduino/md/dir_68267d1309a1af8e8297ef4c3efbcdba/#directory-src","title":"Directory src","text":"<p>Location: <code>src/</code></p>"},{"location":"code/arduino/md/dir_68267d1309a1af8e8297ef4c3efbcdba/#files","title":"Files","text":"<ul> <li>core.cpp</li> <li>main.cpp</li> <li>mock_globals.cpp</li> <li>mqtt.cpp</li> <li>network.cpp</li> <li>sensor.cpp</li> <li>storage.cpp</li> </ul>"},{"location":"code/arduino/md/dir_contents/","title":"Directories","text":"<ul> <li>include</li> <li>src</li> </ul>"},{"location":"code/arduino/md/dir_d44c64559bbebec7f509842c48db8b23/","title":"Dir d44c64559bbebec7f509842c48db8b23","text":""},{"location":"code/arduino/md/dir_d44c64559bbebec7f509842c48db8b23/#directory-include","title":"Directory include","text":"<p>Location: <code>include/</code></p>"},{"location":"code/arduino/md/dir_d44c64559bbebec7f509842c48db8b23/#files","title":"Files","text":"<ul> <li>core.h</li> <li>mock_datetime.h</li> <li>mqtt.h</li> <li>network.h</li> <li>platform.h</li> <li>secrets_example.h</li> <li>sensor.h</li> <li>storage.h</li> </ul>"},{"location":"code/arduino/md/dir_index/","title":"Index of Directories","text":""},{"location":"code/arduino/md/dir_index/#i","title":"I","text":"<ul> <li>include</li> </ul>"},{"location":"code/arduino/md/dir_index/#s","title":"S","text":"<ul> <li>src</li> </ul>"},{"location":"code/arduino/md/file_contents/","title":"Files","text":"<ul> <li>core.h</li> <li>mock_datetime.h</li> <li>mqtt.h</li> <li>network.h</li> <li>secrets_example.h</li> <li>storage.h</li> <li>sensor.h</li> <li>platform.h</li> <li>main.cpp</li> <li>mock_globals.cpp</li> <li>core.cpp</li> <li>sensor.cpp</li> <li>mqtt.cpp</li> <li>network.cpp</li> <li>storage.cpp</li> </ul>"},{"location":"code/arduino/md/file_index/","title":"Index of Files","text":""},{"location":"code/arduino/md/file_index/#c","title":"C","text":"<ul> <li>core.h</li> <li>core.cpp</li> </ul>"},{"location":"code/arduino/md/file_index/#m","title":"M","text":"<ul> <li>mock_datetime.h</li> <li>mqtt.h</li> <li>main.cpp</li> <li>mock_globals.cpp</li> <li>mqtt.cpp</li> </ul>"},{"location":"code/arduino/md/file_index/#n","title":"N","text":"<ul> <li>network.h</li> <li>network.cpp</li> </ul>"},{"location":"code/arduino/md/file_index/#p","title":"P","text":"<ul> <li>platform.h</li> </ul>"},{"location":"code/arduino/md/file_index/#s","title":"S","text":"<ul> <li>secrets_example.h</li> <li>storage.h</li> <li>sensor.h</li> <li>sensor.cpp</li> <li>storage.cpp</li> </ul>"},{"location":"code/arduino/md/global_contents/","title":"Contents","text":"<ul> <li>core.h File</li> <li>CoreSetup Function</li> <li>CoreLoop Function</li> <li>IsWifiConnected Function</li> <li>IsMqttConnected Function</li> <li>FatDateTime Function</li> <li>mock_datetime.h File</li> <li>mqtt.h File</li> <li>mqttClient Variable</li> <li>SendTempToMqtt Function</li> <li>SendPendingDataToMqtt Function</li> <li>CreateFullTopic Function</li> <li>MockDateTime Structure</li> <li>_year Variable</li> <li>_month Variable</li> <li>_day Variable</li> <li>_hour Variable</li> <li>_minute Variable</li> <li>_second Variable</li> <li>MockDateTime Function</li> <li>year Function</li> <li>month Function</li> <li>day Function</li> <li>hour Function</li> <li>minute Function</li> <li>second Function</li> <li>unixtime Function</li> <li>network.h File</li> <li>ConnectToWiFi Function</li> <li>ConnectToMQTT Function</li> <li>IsConnectedToServer Function</li> <li>secrets_example.h File</li> <li>SECRET_SSID Macro</li> <li>SECRET_PASS Macro</li> <li>SECRET_MQTT_USER Macro</li> <li>SECRET_MQTT_PASS Macro</li> <li>storage.h File</li> <li>SaveTempToBatchCsv Function</li> <li>DeleteCsvFile Function</li> <li>BuildJson Function</li> <li>BuildRecoveryJsonFromBatchCsv Function</li> <li>CreateFolderName Function</li> <li>CreateCsvFilename Function</li> <li>sensor.h File</li> <li>InitSensor Function</li> <li>ReadTemperatureInCelsius Function</li> <li>platform.h File</li> <li>rtc Variable</li> <li>sd Variable</li> <li>tempsensor Variable</li> <li>main.cpp File</li> <li>setup Function</li> <li>loop Function</li> <li>mock_globals.cpp File</li> <li>core.cpp File</li> <li>rtc Variable</li> <li>tempsensor Variable</li> <li>sd Variable</li> <li>wifiClient Variable</li> <li>CHIP_SELECT Variable</li> <li>SENSOR_ID_ONE Variable</li> <li>SENSOR_ID_IN_USE Variable</li> <li>SENSOR_TYPE Variable</li> <li>MQTT_TOPIC Variable</li> <li>WIFI_CONNECT_TIMEOUT_MS Variable</li> <li>LOOP_DELAY_MS Variable</li> <li>CLIENT_ID_BUFFER_SIZE Variable</li> <li>SD_SCK_FREQUENCY_MHZ Variable</li> <li>RECONNECT_INTERVAL_MS Variable</li> <li>lastLoggedMinute Variable</li> <li>seqCount Variable</li> <li>recoverySent Variable</li> <li>lastReconnectAttempt Variable</li> <li>mqttClient Function</li> <li>IsWifiConnected Function</li> <li>IsMqttConnected Function</li> <li>FatDateTime Function</li> <li>CoreSetup Function</li> <li>CoreLoop Function</li> <li>sensor.cpp File</li> <li>InitSensor Function</li> <li>ReadTemperatureInCelsius Function</li> <li>mqtt.cpp File</li> <li>SMALL_BUFFER_SIZE Variable</li> <li>LARGE_BUFFER_SIZE Variable</li> <li>FILE_NAME_BUFFER_SIZE Variable</li> <li>MAX_RECOVERY_FILES_PER_LOOP Variable</li> <li>FOLDER_NAME_BUFFER_SIZE Variable</li> <li>FULL_PATH_BUFFER_SIZE Variable</li> <li>LINE_BUFFER_SIZE Variable</li> <li>SECONDS_IN_24_HOURS Variable</li> <li>RECOVERY_TIMEOUT_MS Variable</li> <li>ACK_TIMEOUT_MS Variable</li> <li>RECOVERY_ACK_TIMEOUT_MS Variable</li> <li>DELAY_POLLING_LOOP_MS Variable</li> <li>s_ackSeen Variable</li> <li>s_ackSeq Variable</li> <li>s_pubTopic Variable</li> <li>s_ackInit Variable</li> <li>ExtractSequence Function</li> <li>OnMqttEchoMessage Function</li> <li>EnsureAckInit Function</li> <li>CreateFullTopic Function</li> <li>SendTempToMqtt Function</li> <li>SendPendingDataToMqtt Function</li> <li>network.cpp File</li> <li>SSID Variable</li> <li>PASSWORD Variable</li> <li>BROKER Variable</li> <li>port Variable</li> <li>ConnectToWiFi Function</li> <li>ConnectToMQTT Function</li> <li>MQTT ACK/Echo Handling Module</li> <li>include Directory</li> <li>storage.cpp File</li> <li>FOLDER_NAME_BUFFER_SIZE Variable</li> <li>CURRENT_FILENAME_BUFFER_SIZE Variable</li> <li>CSV_LINE_BUFFER_SIZE Variable</li> <li>MAX_LINES_PER_CSV_FILE Variable</li> <li>currentFilename Variable</li> <li>linesInFile Variable</li> <li>SaveTempToBatchCsv Function</li> <li>BuildJson Function</li> <li>BuildRecoveryJsonFromBatchCsv Function</li> <li>DeleteCsvFile Function</li> <li>src Directory</li> </ul>"},{"location":"code/arduino/md/global_index/","title":"Index","text":""},{"location":"code/arduino/md/global_index/#a","title":"A","text":"<ul> <li>ACK_TIMEOUT_MS Variable</li> </ul>"},{"location":"code/arduino/md/global_index/#b","title":"B","text":"<ul> <li>BROKER Variable</li> <li>BuildJson Function</li> <li>BuildJson Function</li> <li>BuildRecoveryJsonFromBatchCsv Function</li> <li>BuildRecoveryJsonFromBatchCsv Function</li> </ul>"},{"location":"code/arduino/md/global_index/#c","title":"C","text":"<ul> <li>CHIP_SELECT Variable</li> <li>CLIENT_ID_BUFFER_SIZE Variable</li> <li>ConnectToMQTT Function</li> <li>ConnectToMQTT Function</li> <li>ConnectToWiFi Function</li> <li>ConnectToWiFi Function</li> <li>core.cpp File</li> <li>core.h File</li> <li>CoreLoop Function</li> <li>CoreLoop Function</li> <li>CoreSetup Function</li> <li>CoreSetup Function</li> <li>CreateCsvFilename Function</li> <li>CreateFolderName Function</li> <li>CreateFullTopic Function</li> <li>CreateFullTopic Function</li> <li>CSV_LINE_BUFFER_SIZE Variable</li> <li>CURRENT_FILENAME_BUFFER_SIZE Variable</li> <li>currentFilename Variable</li> </ul>"},{"location":"code/arduino/md/global_index/#d","title":"D","text":"<ul> <li>day Function</li> <li>DELAY_POLLING_LOOP_MS Variable</li> <li>DeleteCsvFile Function</li> <li>DeleteCsvFile Function</li> </ul>"},{"location":"code/arduino/md/global_index/#e","title":"E","text":"<ul> <li>EnsureAckInit Function</li> <li>ExtractSequence Function</li> </ul>"},{"location":"code/arduino/md/global_index/#f","title":"F","text":"<ul> <li>FatDateTime Function</li> <li>FatDateTime Function</li> <li>FILE_NAME_BUFFER_SIZE Variable</li> <li>FOLDER_NAME_BUFFER_SIZE Variable</li> <li>FOLDER_NAME_BUFFER_SIZE Variable</li> <li>FULL_PATH_BUFFER_SIZE Variable</li> </ul>"},{"location":"code/arduino/md/global_index/#h","title":"H","text":"<ul> <li>hour Function</li> </ul>"},{"location":"code/arduino/md/global_index/#i","title":"I","text":"<ul> <li>include Directory</li> <li>InitSensor Function</li> <li>InitSensor Function</li> <li>IsConnectedToServer Function</li> <li>IsMqttConnected Function</li> <li>IsMqttConnected Function</li> <li>IsWifiConnected Function</li> <li>IsWifiConnected Function</li> </ul>"},{"location":"code/arduino/md/global_index/#l","title":"L","text":"<ul> <li>LARGE_BUFFER_SIZE Variable</li> <li>lastLoggedMinute Variable</li> <li>lastReconnectAttempt Variable</li> <li>LINE_BUFFER_SIZE Variable</li> <li>linesInFile Variable</li> <li>loop Function</li> <li>LOOP_DELAY_MS Variable</li> </ul>"},{"location":"code/arduino/md/global_index/#m","title":"M","text":"<ul> <li>main.cpp File</li> <li>MAX_LINES_PER_CSV_FILE Variable</li> <li>MAX_RECOVERY_FILES_PER_LOOP Variable</li> <li>minute Function</li> <li>mock_datetime.h File</li> <li>mock_globals.cpp File</li> <li>MockDateTime Structure</li> <li>MockDateTime Function</li> <li>month Function</li> <li>MQTT ACK/Echo Handling Module</li> <li>MQTT_TOPIC Variable</li> <li>mqtt.cpp File</li> <li>mqtt.h File</li> <li>mqttClient Variable</li> <li>mqttClient Function</li> </ul>"},{"location":"code/arduino/md/global_index/#n","title":"N","text":"<ul> <li>network.cpp File</li> <li>network.h File</li> </ul>"},{"location":"code/arduino/md/global_index/#o","title":"O","text":"<ul> <li>OnMqttEchoMessage Function</li> </ul>"},{"location":"code/arduino/md/global_index/#p","title":"P","text":"<ul> <li>PASSWORD Variable</li> <li>platform.h File</li> <li>port Variable</li> </ul>"},{"location":"code/arduino/md/global_index/#r","title":"R","text":"<ul> <li>ReadTemperatureInCelsius Function</li> <li>ReadTemperatureInCelsius Function</li> <li>RECONNECT_INTERVAL_MS Variable</li> <li>RECOVERY_ACK_TIMEOUT_MS Variable</li> <li>RECOVERY_TIMEOUT_MS Variable</li> <li>recoverySent Variable</li> <li>rtc Variable</li> <li>rtc Variable</li> </ul>"},{"location":"code/arduino/md/global_index/#s","title":"S","text":"<ul> <li>s_ackInit Variable</li> <li>s_ackSeen Variable</li> <li>s_ackSeq Variable</li> <li>s_pubTopic Variable</li> <li>SaveTempToBatchCsv Function</li> <li>SaveTempToBatchCsv Function</li> <li>sd Variable</li> <li>sd Variable</li> <li>SD_SCK_FREQUENCY_MHZ Variable</li> <li>second Function</li> <li>SECONDS_IN_24_HOURS Variable</li> <li>SECRET_MQTT_PASS Macro</li> <li>SECRET_MQTT_USER Macro</li> <li>SECRET_PASS Macro</li> <li>SECRET_SSID Macro</li> <li>secrets_example.h File</li> <li>SendPendingDataToMqtt Function</li> <li>SendPendingDataToMqtt Function</li> <li>SendTempToMqtt Function</li> <li>SendTempToMqtt Function</li> <li>SENSOR_ID_IN_USE Variable</li> <li>SENSOR_ID_ONE Variable</li> <li>SENSOR_TYPE Variable</li> <li>sensor.cpp File</li> <li>sensor.h File</li> <li>seqCount Variable</li> <li>setup Function</li> <li>SMALL_BUFFER_SIZE Variable</li> <li>src Directory</li> <li>SSID Variable</li> <li>storage.cpp File</li> <li>storage.h File</li> </ul>"},{"location":"code/arduino/md/global_index/#t","title":"T","text":"<ul> <li>tempsensor Variable</li> <li>tempsensor Variable</li> </ul>"},{"location":"code/arduino/md/global_index/#u","title":"U","text":"<ul> <li>unixtime Function</li> </ul>"},{"location":"code/arduino/md/global_index/#w","title":"W","text":"<ul> <li>WIFI_CONNECT_TIMEOUT_MS Variable</li> <li>wifiClient Variable</li> </ul>"},{"location":"code/arduino/md/global_index/#y","title":"Y","text":"<ul> <li>year Function</li> </ul>"},{"location":"code/arduino/md/global_index/#_","title":"_","text":"<ul> <li>_day Variable</li> <li>_hour Variable</li> <li>_minute Variable</li> <li>_month Variable</li> <li>_second Variable</li> <li>_year Variable</li> </ul>"},{"location":"code/arduino/md/group___ack_echo_handling/","title":"Group   ack echo handling","text":""},{"location":"code/arduino/md/group___ack_echo_handling/#mqtt-ackecho-handling","title":"MQTT ACK/Echo Handling","text":"<p>Implements publish acknowledgment and echo logic for reliable MQTT delivery.</p> <p>This section manages the detection and processing of MQTT PUBACK or echo messages from the broker. It tracks acknowledgment state, extracts sequence numbers from echoed JSON payloads, and ensures that published messages are confirmed before considering them delivered. If no acknowledgment is received, data is saved for later recovery.</p> <ul> <li> <p>Uses topic-based filtering to only process echoes for the current publish topic</p> </li> <li> <p>Handles retained messages and ignores them for acknowledgment</p> </li> <li> <p>Extracts sequence numbers from JSON payloads for matching</p> </li> <li> <p>Registers a callback for incoming MQTT messages to detect PUBACK/echo</p> </li> <li> <p>Uses topic-based filtering to only process echoes for the current publish topic</p> </li> <li> <p>Handles retained messages and ignores them for acknowledgment</p> </li> <li> <p>Extracts sequence numbers from JSON payloads for matching</p> </li> <li> <p>Registers a callback for incoming MQTT messages to detect PUBACK/echo</p> </li> <li> <p>Re-subscribes to the publish topic after each reconnect</p> </li> </ul> <p>?&gt; This logic is critical for QoS 1 delivery and robust offline recovery.</p>"},{"location":"code/arduino/md/group_contents/","title":"Modules","text":"<ul> <li>MQTT ACK/Echo Handling: Implements publish acknowledgment and echo logic for reliable MQTT delivery.</li> </ul>"},{"location":"code/arduino/md/group_index/","title":"Index of Modules","text":""},{"location":"code/arduino/md/group_index/#m","title":"M","text":"<ul> <li>MQTT ACK/Echo Handling: Implements publish acknowledgment and echo logic for reliable MQTT delivery.</li> </ul>"},{"location":"code/arduino/md/main_8cpp/","title":"Main 8cpp","text":""},{"location":"code/arduino/md/main_8cpp/#file-maincpp","title":"File main.cpp","text":"<p>Location: <code>src/main.cpp</code></p>"},{"location":"code/arduino/md/main_8cpp/#includes","title":"Includes","text":"<ul> <li>platform.h</li> <li>core.h</li> </ul> <pre><code>graph LR\n10[\"core.h\"]\nclick 10 \"core_8h.md#core_8h\"\n\n2[\"platform.h\"]\nclick 2 \"platform_8h.md#platform_8h\"\n2 --&gt; 3\n2 --&gt; 4\n2 --&gt; 5\n2 --&gt; 6\n2 --&gt; 7\n2 --&gt; 8\n2 --&gt; 9\n\n1[\"src/main.cpp\"]\nclick 1 \"main_8cpp.md#main_8cpp\"\n1 --&gt; 2\n1 --&gt; 10\n\n7[\"Adafruit_ADT7410.h\"]\n\n3[\"Arduino.h\"]\n\n8[\"ArduinoJson.h\"]\n\n9[\"ArduinoMqttClient.h\"]\n\n6[\"RTClib.h\"]\n\n5[\"SdFat.h\"]\n\n4[\"Wire.h\"]\n</code></pre>"},{"location":"code/arduino/md/main_8cpp/#functions","title":"Functions","text":""},{"location":"code/arduino/md/main_8cpp/#function-setup","title":"Function setup","text":"<pre><code>void setup()\n</code></pre> <p>Return type: void</p> <p></p>"},{"location":"code/arduino/md/main_8cpp/#function-loop","title":"Function loop","text":"<pre><code>void loop()\n</code></pre> <p>Return type: void</p>"},{"location":"code/arduino/md/main_8cpp/#source","title":"Source","text":"<pre><code>#include \"platform.h\"\n#include \"core.h\"\n\n#ifndef UNIT_TEST\n\nvoid setup() {\n  Serial.begin(9600);\n  unsigned long startTime = millis();\n  while (!Serial &amp;&amp; (millis() - startTime &lt; 3000));\n  CoreSetup();\n}\n\nvoid loop() {\n  CoreLoop();\n}\n#endif\n</code></pre>"},{"location":"code/arduino/md/mock__datetime_8h/","title":"Mock  datetime 8h","text":""},{"location":"code/arduino/md/mock__datetime_8h/#file-mock_datetimeh","title":"File mock_datetime.h","text":"<p>Location: <code>include/mock\\_datetime.h</code></p>"},{"location":"code/arduino/md/mock__datetime_8h/#classes","title":"Classes","text":"<ul> <li>MockDateTime</li> </ul>"},{"location":"code/arduino/md/mock__datetime_8h/#includes","title":"Includes","text":"<ul> <li> <pre><code>graph LR\n1[\"include/mock_datetime.h\"]\nclick 1 \"mock__datetime_8h.md#mock__datetime_8h\"\n1 --&gt; 2\n\n2[\"cstdint\"]\n</code></pre>"},{"location":"code/arduino/md/mock__datetime_8h/#source","title":"Source","text":"<pre><code>#pragma once\n#include &lt;cstdint&gt;\n\nstruct MockDateTime {\n  int _year, _month, _day, _hour, _minute, _second;\n\n  MockDateTime(int year, int month, int day, int hour, int minute, int second = 0)\n    : _year(year), _month(month), _day(day), _hour(hour), _minute(minute), _second(second) {}\n\n  int year()   const { return _year; }\n  int month()  const { return _month; }\n  int day()    const { return _day; }\n  int hour()   const { return _hour; }\n  int minute() const { return _minute; }\n  int second() const { return _second; }\n\n  uint32_t unixtime() const {\n    return 1753778400; // 26.07.2025 14:55:00 \n  }\n};\n\n#ifdef UNIT_TEST\n  using DateTime = MockDateTime;\n#endif\n</code></pre>"},{"location":"code/arduino/md/mock__globals_8cpp/","title":"Mock  globals 8cpp","text":""},{"location":"code/arduino/md/mock__globals_8cpp/#file-mock_globalscpp","title":"File mock_globals.cpp","text":"<p>Location: <code>src/mock\\_globals.cpp</code></p>"},{"location":"code/arduino/md/mock__globals_8cpp/#source","title":"Source","text":"<pre><code>#ifdef UNIT_TEST\n#include \"platform.h\"\n\n// Global mock objects for testing\nMockSdFat sd;\nMockRTC rtc;\nMockTempSensor tempsensor;\nMockWiFiClass WiFi;\nMockWiFiClient wifiClient;\nMockMqttClient mqttClient(wifiClient);\n\n#endif\n</code></pre>"},{"location":"code/arduino/md/mqtt_8cpp/","title":"Mqtt 8cpp","text":""},{"location":"code/arduino/md/mqtt_8cpp/#file-mqttcpp","title":"File mqtt.cpp","text":"<p>Location: <code>src/mqtt.cpp</code></p>"},{"location":"code/arduino/md/mqtt_8cpp/#includes","title":"Includes","text":"<ul> <li>mqtt.h</li> <li>storage.h</li> </ul> <pre><code>graph LR\n2[\"mqtt.h\"]\nclick 2 \"mqtt_8h.md#mqtt_8h\"\n2 --&gt; 3\n\n3[\"platform.h\"]\nclick 3 \"platform_8h.md#platform_8h\"\n3 --&gt; 4\n3 --&gt; 5\n3 --&gt; 6\n3 --&gt; 7\n3 --&gt; 8\n3 --&gt; 9\n3 --&gt; 10\n\n11[\"storage.h\"]\nclick 11 \"storage_8h.md#storage_8h\"\n11 --&gt; 3\n11 --&gt; 12\n\n1[\"src/mqtt.cpp\"]\nclick 1 \"mqtt_8cpp.md#mqtt_8cpp\"\n1 --&gt; 2\n1 --&gt; 11\n\n8[\"Adafruit_ADT7410.h\"]\n\n4[\"Arduino.h\"]\n\n9[\"ArduinoJson.h\"]\n\n10[\"ArduinoMqttClient.h\"]\n\n7[\"RTClib.h\"]\n\n6[\"SdFat.h\"]\n\n5[\"Wire.h\"]\n\n12[\"cstdio\"]\n</code></pre>"},{"location":"code/arduino/md/mqtt_8cpp/#variables","title":"Variables","text":""},{"location":"code/arduino/md/mqtt_8cpp/#variable-small_buffer_size","title":"Variable SMALL_BUFFER_SIZE","text":"<p>Definition: <code>src/mqtt.cpp</code> (line 9)</p> <pre><code>const size_t SMALL_BUFFER_SIZE = 128\n</code></pre> <p>Buffer size for small MQTT topics, payloads, and JSON documents.</p> <p>Type: const size_t</p> <p></p>"},{"location":"code/arduino/md/mqtt_8cpp/#variable-large_buffer_size","title":"Variable LARGE_BUFFER_SIZE","text":"<p>Definition: <code>src/mqtt.cpp</code> (line 11)</p> <pre><code>const size_t LARGE_BUFFER_SIZE = 2048\n</code></pre> <p>Buffer size for large MQTT payloads and JSON documents (recovery data)</p> <p>Type: const size_t</p> <p></p>"},{"location":"code/arduino/md/mqtt_8cpp/#variable-file_name_buffer_size","title":"Variable FILE_NAME_BUFFER_SIZE","text":"<p>Definition: <code>src/mqtt.cpp</code> (line 12)</p> <pre><code>const size_t FILE_NAME_BUFFER_SIZE = 64\n</code></pre> <p>Type: const size_t</p> <p></p>"},{"location":"code/arduino/md/mqtt_8cpp/#variable-max_recovery_files_per_loop","title":"Variable MAX_RECOVERY_FILES_PER_LOOP","text":"<p>Definition: <code>src/mqtt.cpp</code> (line 13)</p> <pre><code>const int MAX_RECOVERY_FILES_PER_LOOP = 3\n</code></pre> <p>Type: const int</p> <p></p>"},{"location":"code/arduino/md/mqtt_8cpp/#variable-folder_name_buffer_size","title":"Variable FOLDER_NAME_BUFFER_SIZE","text":"<p>Definition: <code>src/mqtt.cpp</code> (line 19)</p> <pre><code>const size_t FOLDER_NAME_BUFFER_SIZE = 8\n</code></pre> <p>Type: const size_t</p> <p></p>"},{"location":"code/arduino/md/mqtt_8cpp/#variable-full_path_buffer_size","title":"Variable FULL_PATH_BUFFER_SIZE","text":"<p>Definition: <code>src/mqtt.cpp</code> (line 20)</p> <pre><code>const size_t FULL_PATH_BUFFER_SIZE = 64\n</code></pre> <p>Type: const size_t</p> <p></p>"},{"location":"code/arduino/md/mqtt_8cpp/#variable-line_buffer_size","title":"Variable LINE_BUFFER_SIZE","text":"<p>Definition: <code>src/mqtt.cpp</code> (line 22)</p> <pre><code>const size_t LINE_BUFFER_SIZE = 64\n</code></pre> <p>Buffer size for reading individual CSV lines.</p> <p>Type: const size_t</p> <p></p>"},{"location":"code/arduino/md/mqtt_8cpp/#variable-seconds_in_24_hours","title":"Variable SECONDS_IN_24_HOURS","text":"<p>Definition: <code>src/mqtt.cpp</code> (line 23)</p> <pre><code>const uint32_t SECONDS_IN_24_HOURS = 86400\n</code></pre> <p>Type: const uint32_t</p> <p></p>"},{"location":"code/arduino/md/mqtt_8cpp/#variable-recovery_timeout_ms","title":"Variable RECOVERY_TIMEOUT_MS","text":"<p>Definition: <code>src/mqtt.cpp</code> (line 25)</p> <pre><code>const unsigned long RECOVERY_TIMEOUT_MS = 60000\n</code></pre> <p>Timeout for recovery operations in milliseconds (60 seconds)</p> <p>Type: const unsigned long</p> <p></p>"},{"location":"code/arduino/md/mqtt_8cpp/#variable-ack_timeout_ms","title":"Variable ACK_TIMEOUT_MS","text":"<p>Definition: <code>src/mqtt.cpp</code> (line 26)</p> <pre><code>const unsigned long ACK_TIMEOUT_MS = 5000\n</code></pre> <p>Type: const unsigned long</p> <p></p>"},{"location":"code/arduino/md/mqtt_8cpp/#variable-recovery_ack_timeout_ms","title":"Variable RECOVERY_ACK_TIMEOUT_MS","text":"<p>Definition: <code>src/mqtt.cpp</code> (line 27)</p> <pre><code>const unsigned long RECOVERY_ACK_TIMEOUT_MS = 10000\n</code></pre> <p>Type: const unsigned long</p> <p></p>"},{"location":"code/arduino/md/mqtt_8cpp/#variable-delay_polling_loop_ms","title":"Variable DELAY_POLLING_LOOP_MS","text":"<p>Definition: <code>src/mqtt.cpp</code> (line 28)</p> <pre><code>const unsigned long DELAY_POLLING_LOOP_MS = 10\n</code></pre> <p>Type: const unsigned long</p> <p></p>"},{"location":"code/arduino/md/mqtt_8cpp/#variable-s_ackseen","title":"Variable s_ackSeen","text":"<p>Definition: <code>src/mqtt.cpp</code> (line 56)</p> <pre><code>volatile bool s_ackSeen = false\n</code></pre> <p>Type: volatile bool</p> <p></p>"},{"location":"code/arduino/md/mqtt_8cpp/#variable-s_ackseq","title":"Variable s_ackSeq","text":"<p>Definition: <code>src/mqtt.cpp</code> (line 57)</p> <pre><code>volatile long s_ackSeq = -1\n</code></pre> <p>Type: volatile long</p> <p></p>"},{"location":"code/arduino/md/mqtt_8cpp/#variable-s_pubtopic","title":"Variable s_pubTopic","text":"<p>Definition: <code>src/mqtt.cpp</code> (line 58)</p> <pre><code>String s_pubTopic\n</code></pre> <p>Type: String</p> <p></p>"},{"location":"code/arduino/md/mqtt_8cpp/#variable-s_ackinit","title":"Variable s_ackInit","text":"<p>Definition: <code>src/mqtt.cpp</code> (line 59)</p> <pre><code>bool s_ackInit = false\n</code></pre> <p>Type: bool</p>"},{"location":"code/arduino/md/mqtt_8cpp/#functions","title":"Functions","text":""},{"location":"code/arduino/md/mqtt_8cpp/#function-extractsequence","title":"Function ExtractSequence","text":"<pre><code>static bool ExtractSequence(const char *json, long &amp;outSeq)\n</code></pre> <p>Extracts the sequence number from a JSON string.</p> <p>Searches for the \"sequence\" field in the provided JSON and parses its value. Returns false if the field is missing or set to null.</p> <p>Parameters:</p> <ul> <li>json: The JSON string to search</li> <li>outSeq: Reference to store the extracted sequence number</li> </ul> <p>Returns:</p> <p>true if a valid sequence number was found, false otherwise</p> <p>Parameters:</p> <ul> <li>const char * json</li> <li>long &amp; outSeq</li> </ul> <p>Return type: bool</p> <p></p>"},{"location":"code/arduino/md/mqtt_8cpp/#function-onmqttechomessage","title":"Function OnMqttEchoMessage","text":"<pre><code>static void OnMqttEchoMessage(int messageSize)\n</code></pre> <p>MQTT message callback to detect PUBACK/echo for published messages.</p> <p>Processes incoming MQTT messages, filtering by MQTT_TOPIC and retain flag. If the message is an echo for the current publish MQTT_TOPIC and not retained, extracts the sequence number and sets acknowledgment flags.</p> <p>Parameters:</p> <ul> <li>messageSize: Size of the incoming message (needed because of the MQTT library's callback interface)</li> </ul> <p>Parameters:</p> <ul> <li>int messageSize</li> </ul> <p>Return type: void</p> <p></p>"},{"location":"code/arduino/md/mqtt_8cpp/#function-ensureackinit","title":"Function EnsureAckInit","text":"<pre><code>static void EnsureAckInit(MqttClient &amp;client, const char *topicPrefix, const char *sensorType, const char *sensorId)\n</code></pre> <p>Initializes ACK/Echo handling and subscribes to the publish MQTT_TOPIC.</p> <p>Sets up the publish MQTT_TOPIC and registers the MQTT message callback for echo detection. Ensures the callback is registered only once, and re-subscribes to the MQTT_TOPIC after each reconnect.</p> <p>Parameters:</p> <ul> <li>client: Reference to the MQTT client</li> <li>topicPrefix: Topic prefix for MQTT publishing</li> <li>sensorType: Sensor type string</li> <li>sensorId: Unique sensor identifier</li> </ul> <p>Parameters:</p> <ul> <li>MqttClient &amp; client</li> <li>const char * topicPrefix</li> <li>const char * sensorType</li> <li>const char * sensorId</li> </ul> <p>Return type: void</p> <p></p>"},{"location":"code/arduino/md/mqtt_8cpp/#function-createfulltopic","title":"Function CreateFullTopic","text":"<pre><code>void CreateFullTopic(char *buffer, size_t bufferSize, const char *topicPrefix, const char *sensorType, const char *sensorId, const char *suffix)\n</code></pre> <p>Parameters:</p> <ul> <li>char * buffer</li> <li>size_t bufferSize</li> <li>const char * topicPrefix</li> <li>const char * sensorType</li> <li>const char * sensorId</li> <li>const char * suffix</li> </ul> <p>Return type: void</p> <p></p>"},{"location":"code/arduino/md/mqtt_8cpp/#function-sendtemptomqtt","title":"Function SendTempToMqtt","text":"<pre><code>bool SendTempToMqtt(MqttClient &amp;mqttClient, const char *topicPrefix, const char *sensorType, const char *sensorId, float celsius, const DateTime &amp;now, int sequence)\n</code></pre> <p>Publishes real-time sensor data to the MQTT broker with QoS 1 delivery.</p> <p>This function builds a JSON payload from the provided sensor data and publishes it to the specified MQTT topic. After publishing, it waits briefly for a PUBACK handshake from the broker to confirm delivery. If no acknowledgment is received within the timeout window, the data is saved to a CSV file for later recovery.</p> <p>Parameters:</p> <ul> <li>mqttClient: Reference to the MQTT client instance</li> <li>topicPrefix: Topic prefix for MQTT publishing (e.g., \"dhbw/ai/si2023/2/\")</li> <li>sensorType: Sensor type string (e.g., \"temp\")</li> <li>sensorId: Unique sensor identifier</li> <li>celsius: Measured temperature value in Celsius</li> <li>now: Current timestamp (DateTime)</li> <li>sequence: Sequence number for the measurement</li> </ul> <p>Returns:</p> <p>true if published and acknowledged by broker, false if fallback to CSV</p> <p>?&gt; Uses QoS 1 for reliable delivery. If broker does not echo/PUBACK within the timeout, data is persisted for later transmission.</p> <p>Parameters:</p> <ul> <li>MqttClient &amp; mqttClient</li> <li>const char * topicPrefix</li> <li>const char * sensorType</li> <li>const char * sensorId</li> <li>float celsius</li> <li>const DateTime &amp; now</li> <li>int sequence</li> </ul> <p>Return type: bool</p> <p></p>"},{"location":"code/arduino/md/mqtt_8cpp/#function-sendpendingdatatomqtt","title":"Function SendPendingDataToMqtt","text":"<pre><code>bool SendPendingDataToMqtt(MqttClient &amp;mqttClient, const char *topicPrefix, const char *sensorType, const char *sensorId, const DateTime &amp;now)\n</code></pre> <p>Processes and transmits pending CSV files from offline periods to the MQTT broker.</p> <p>This function scans the SD card for CSV files containing unsent sensor data from previous offline periods. Each file is converted to a JSON payload and published to the MQTT topic /recovered with QoS 1. After publishing, it waits briefly for a PUBACK handshake from the broker to confirm delivery. If the PUBACK is not received within the timeout period, the file is saved for later transmission. Files are only deleted if the publish operation succeeds. Files older than 24 hours or with invalid data are skipped. <p>Parameters:</p> <ul> <li>mqttClient: Reference to the MQTT client instance</li> <li>topicPrefix: Topic prefix for MQTT publishing (e.g., \"dhbw/ai/si2023/2/\")</li> <li>sensorType: Sensor type string (e.g., \"temp\")</li> <li>sensorId: Unique sensor identifier</li> <li>now: Current timestamp (DateTime)</li> </ul> <p>Returns:</p> <p>true if all valid files were published and deleted, false if any files remain or errors occurred</p> <p>?&gt; Uses QoS 1 for reliable delivery. Skips files older than 24 hours or with invalid content. Aborts if recovery exceeds time limit.</p> <p>Parameters:</p> <ul> <li>MqttClient &amp; mqttClient</li> <li>const char * topicPrefix</li> <li>const char * sensorType</li> <li>const char * sensorId</li> <li>const DateTime &amp; now</li> </ul> <p>Return type: bool</p>"},{"location":"code/arduino/md/mqtt_8cpp/#source","title":"Source","text":"<pre><code>#include \"mqtt.h\"\n#include \"storage.h\"\n\n// =============================================================================\n// BUFFER SIZE CONSTANTS\n// =============================================================================\n\nstatic const size_t SMALL_BUFFER_SIZE = 128;\nstatic const size_t LARGE_BUFFER_SIZE = 2048;\nstatic const size_t FILE_NAME_BUFFER_SIZE = 64;\nstatic const int MAX_RECOVERY_FILES_PER_LOOP = 3;\n\n// =============================================================================\n// FILE SYSTEM AND TIMING CONSTANTS\n// =============================================================================\n\nstatic const size_t FOLDER_NAME_BUFFER_SIZE = 8;\nstatic const size_t FULL_PATH_BUFFER_SIZE = 64;\nstatic const size_t LINE_BUFFER_SIZE = 64;\nstatic const uint32_t SECONDS_IN_24_HOURS = 86400;\nstatic const unsigned long RECOVERY_TIMEOUT_MS = 60000;\nstatic const unsigned long ACK_TIMEOUT_MS = 5000;\nstatic const unsigned long RECOVERY_ACK_TIMEOUT_MS  = 10000;\nstatic const unsigned long DELAY_POLLING_LOOP_MS = 10;\n\n// =============================================================================\n// ACK/ECHO-HANDLING \n// =============================================================================\n\nstatic volatile bool  s_ackSeen   = false;\nstatic volatile long  s_ackSeq    = -1;\nstatic String         s_pubTopic;           // z. B. \"&lt;prefix&gt;temp/Sensor_Two\"\nstatic bool           s_ackInit   = false;\n\nstatic bool ExtractSequence(const char* json, long&amp; outSeq) {\n  const char* p = strstr(json, \"\\\"sequence\\\":\");\n  if (!p) return false;\n  p += 11; // length of \"\\\"sequence\\\":\"\n  // Skip whitespace\n  while (*p == ' ' || *p == '\\t') ++p;\n  // Support null (Recovery may have sequence:null)\n  if (strncmp(p, \"null\", 4) == 0) return false;\n  outSeq = strtol(p, nullptr, 10);\n  return true;\n}\n\nstatic void OnMqttEchoMessage(int messageSize) {\n  (void)messageSize;\n  if (mqttClient.messageTopic() != s_pubTopic) return;\n  if (mqttClient.messageRetain()) return;\n\n  static char buf[SMALL_BUFFER_SIZE * 2];\n  int n = 0;\n  while (mqttClient.available() &amp;&amp; n &lt; (int)sizeof(buf) - 1) {\n    buf[n++] = mqttClient.read();\n  }\n  buf[n] = 0;\n\n  long seq;\n  if (ExtractSequence(buf, seq)) {\n    s_ackSeq  = seq;\n    s_ackSeen = true;\n  }\n}\n\nstatic void EnsureAckInit(MqttClient&amp; client, const char* topicPrefix, const char* sensorType, const char* sensorId) {\n  if (!s_ackInit) {\n    char fullTopic[SMALL_BUFFER_SIZE];\n    if (sensorType &amp;&amp; sensorId) {\n      snprintf(fullTopic, sizeof(fullTopic), \"%s%s/%s\", topicPrefix, sensorType, sensorId);\n      s_pubTopic = fullTopic;\n      s_ackInit  = true;\n    } else {\n      return; \n    }\n    client.onMessage(OnMqttEchoMessage); // Callback register\n  }\n\n  if (client.connected()) {\n    client.subscribe(s_pubTopic.c_str());\n  }\n}\n\n// =============================================================================\n\nvoid CreateFullTopic(char* buffer, size_t bufferSize, const char* topicPrefix,\n                     const char* sensorType, const char* sensorId, const char* suffix) {\n  if (suffix &amp;&amp; strlen(suffix) &gt; 0) {\n    snprintf(buffer, bufferSize, \"%s%s/%s/%s\", topicPrefix, sensorType, sensorId, suffix);\n  } else {\n    snprintf(buffer, bufferSize, \"%s%s/%s\", topicPrefix, sensorType, sensorId);\n  }\n}\n\n// =============================================================================\n// REAL-TIME DATA TRANSMISSION FUNCTIONS\n// =============================================================================\n\nbool SendTempToMqtt(MqttClient&amp; mqttClient, const char* topicPrefix, const char* sensorType,\n                const char* sensorId, float celsius, const DateTime&amp; now, int sequence) {\n  EnsureAckInit(mqttClient, topicPrefix, sensorType, sensorId);\n\n  mqttClient.poll();\n\n  char fullTopic[SMALL_BUFFER_SIZE];\n  CreateFullTopic(fullTopic, sizeof(fullTopic), topicPrefix, sensorType, sensorId);\n\n  StaticJsonDocument&lt;SMALL_BUFFER_SIZE&gt; jsonDoc;\n  BuildJson(jsonDoc, celsius, now, sequence);\n\n  char payload[SMALL_BUFFER_SIZE];\n  serializeJson(jsonDoc, payload, sizeof(payload));\n\n  // Reset ACK-Flags\n  s_ackSeen = false;\n  s_ackSeq  = -1;\n\n\n  if (mqttClient.beginMessage(fullTopic, false, 1)) {\n    mqttClient.print(payload);\n    if (!mqttClient.endMessage()) {\n      Serial.println(\"MQTT endMessage() failed \u2192 saving to CSV.\");\n      SaveTempToBatchCsv(now, celsius, sequence);\n      return false;\n    }\n\n    // delay for a short window to allow poll() to process the PUBACK/echo\n    unsigned long startTime = millis();\n    bool ackOk = false;\n    while (millis() - startTime &lt; ACK_TIMEOUT_MS) {\n      mqttClient.poll();\n      if (s_ackSeen &amp;&amp; s_ackSeq == sequence) {\n        ackOk = true;\n        break;\n      }\n      delay(DELAY_POLLING_LOOP_MS);\n    }\n\n    if (!ackOk) {\n      Serial.println(\"No Echo/PUBACK within timeout \u2192 saving to CSV.\");\n      SaveTempToBatchCsv(now, celsius, sequence);\n      return false;\n    }\n\n    Serial.print(\"Published to \");\n    Serial.println(fullTopic);\n    Serial.println(payload);\n    return true;\n  } else {\n    Serial.println(\"MQTT beginMessage() failed \u2192 saving to CSV.\");\n    SaveTempToBatchCsv(now, celsius, sequence);\n    return false;\n  }\n}\n\n// =============================================================================\n// DATA RECOVERY AND OFFLINE TRANSMISSION FUNCTIONS\n// =============================================================================\n\nbool SendPendingDataToMqtt(MqttClient&amp; mqttClient, const char* topicPrefix, const char* sensorType,\n                     const char* sensorId, const DateTime&amp; now) {\n  Serial.println(\"Looking for pending CSV files...\");\n\n  // Track processing time to prevent infinite loops\n  const unsigned long startMillis = millis();\n  bool allFilesSent = true;\n\n  // Open the current date folder\n  char folder[FOLDER_NAME_BUFFER_SIZE];\n  strncpy(folder, CreateFolderName(now), sizeof(folder));\n  File root = sd.open(folder);\n  if (!root) {\n    Serial.println(\"No folder found for pending data.\");\n    return true;\n  }\n\n  // Initialize processing counters\n  int sentCount = 0;\n  int checkedFiles = 0;\n  int skippedEmptyFiles = 0;\n\n  File entry;\n  while ((entry = root.openNextFile())) {\n    if (entry.isDirectory()) continue;\n\n    char filename[FILE_NAME_BUFFER_SIZE];\n    entry.getName(filename, sizeof(filename));\n    entry.close();\n\n    String nameStr(filename);\n    if (!nameStr.endsWith(\".csv\")) continue;\n\n    checkedFiles++;\n\n    // Validate file age (skip files older than 24 hours)\n    char fullPath[FULL_PATH_BUFFER_SIZE];\n    snprintf(fullPath, sizeof(fullPath), \"%s/%s\", folder, filename);\n    File tsFile = sd.open(fullPath, FILE_READ);\n    if (tsFile) {\n      char line[LINE_BUFFER_SIZE];\n      if (tsFile.fgets(line, sizeof(line)) &gt; 0) {\n        char* p = strtok(line, \",\");\n        if (p) {\n          Serial.print(\"Malformed CSV line (no timestamp): \");\n          Serial.println(line);\n          uint32_t ts = atol(p);\n          if (now.unixtime() - ts &gt; SECONDS_IN_24_HOURS) {\n            Serial.print(\"Skipping old CSV file (&gt;24h): \");\n            Serial.println(nameStr);\n            tsFile.close();\n            continue;\n          }\n        }\n      }\n      tsFile.close();\n    }\n\n    // Convert CSV content to JSON format\n    StaticJsonDocument&lt;LARGE_BUFFER_SIZE&gt; doc;\n    BuildRecoveryJsonFromBatchCsv(doc, fullPath, now);\n\n    // Validate that the file contains usable data\n    if (!doc[\"meta\"].is&lt;JsonObject&gt;() || doc[\"meta\"].size() == 0) {\n      Serial.println(\"No valid data in: \" + nameStr);\n      skippedEmptyFiles++;\n      continue;\n    }\n\n    // Serialize JSON and check payload size\n    char payload[LARGE_BUFFER_SIZE];\n    size_t len = serializeJson(doc, payload, sizeof(payload));\n    if (len &gt;= sizeof(payload)) {\n      Serial.println(\"Payload too large, skipping file: \" + nameStr);\n      allFilesSent = false;\n      continue;\n    }\n\n    char fullTopic[SMALL_BUFFER_SIZE];\n    CreateFullTopic(fullTopic, sizeof(fullTopic), topicPrefix, sensorType, sensorId, \"recovered\");\n\n    Serial.print(\"Publishing recovered CSV: \");\n    Serial.println(nameStr);\n    Serial.print(\"MQTT payload: \");\n    Serial.println(payload);\n\n    bool published = false;\n    if (mqttClient.beginMessage(fullTopic, false, 1)) {\n      mqttClient.print(payload);\n      if (mqttClient.endMessage()) {\n        // wait for echo/PUBACK handshake\n        unsigned long startTime = millis();\n        while (millis() - startTime &lt; RECOVERY_ACK_TIMEOUT_MS) {\n          mqttClient.poll();\n          delay(DELAY_POLLING_LOOP_MS);\n        }\n        published = true;\n      }\n    }\n\n    if (published) {\n      Serial.println(\"Published and deleting file.\");\n      DeleteCsvFile(fullPath);\n      sentCount++;\n    } else {\n      Serial.println(\"Failed to publish. Keeping file: \" + nameStr);\n      allFilesSent = false;\n    }\n\n    // Check for overall timeout to prevent blocking too long\n    if (millis() - startMillis &gt; RECOVERY_TIMEOUT_MS) {\n      Serial.println(\"Aborting recovery: 60s time limit exceeded.\");\n      allFilesSent = false;\n      break;\n    }\n  }\n\n  root.close();\n\n  // Provide summary of recovery operation\n  if (checkedFiles == 0) {\n    Serial.println(\"No CSV recovery files found.\");\n  } else if (sentCount == 0 &amp;&amp; skippedEmptyFiles == checkedFiles) {\n    Serial.println(\"All found recovery files were empty, too old, or invalid.\");\n  } else {\n    Serial.print(\"Recovered files sent this loop: \");\n    Serial.println(sentCount);\n  }\n\n  return allFilesSent;\n}\n</code></pre>"},{"location":"code/arduino/md/mqtt_8h/","title":"Mqtt 8h","text":""},{"location":"code/arduino/md/mqtt_8h/#file-mqtth","title":"File mqtt.h","text":"<p>Location: <code>include/mqtt.h</code></p>"},{"location":"code/arduino/md/mqtt_8h/#includes","title":"Includes","text":"<ul> <li>platform.h</li> </ul> <pre><code>graph LR\n1[\"include/mqtt.h\"]\nclick 1 \"mqtt_8h.md#mqtt_8h\"\n1 --&gt; 2\n\n2[\"platform.h\"]\nclick 2 \"platform_8h.md#platform_8h\"\n2 --&gt; 3\n2 --&gt; 4\n2 --&gt; 5\n2 --&gt; 6\n2 --&gt; 7\n2 --&gt; 8\n2 --&gt; 9\n\n7[\"Adafruit_ADT7410.h\"]\n\n3[\"Arduino.h\"]\n\n8[\"ArduinoJson.h\"]\n\n9[\"ArduinoMqttClient.h\"]\n\n6[\"RTClib.h\"]\n\n5[\"SdFat.h\"]\n\n4[\"Wire.h\"]\n</code></pre>"},{"location":"code/arduino/md/mqtt_8h/#included-by","title":"Included by","text":"<ul> <li>src/core.cpp</li> <li>src/mqtt.cpp</li> <li>src/network.cpp</li> </ul> <pre><code>graph RL\n1[\"include/mqtt.h\"]\nclick 1 \"mqtt_8h.md#mqtt_8h\"\n2 --&gt; 1\n3 --&gt; 1\n4 --&gt; 1\n\n2[\"src/core.cpp\"]\nclick 2 \"core_8cpp.md#core_8cpp\"\n\n3[\"src/mqtt.cpp\"]\nclick 3 \"mqtt_8cpp.md#mqtt_8cpp\"\n\n4[\"src/network.cpp\"]\nclick 4 \"network_8cpp.md#network_8cpp\"\n</code></pre>"},{"location":"code/arduino/md/mqtt_8h/#variables","title":"Variables","text":""},{"location":"code/arduino/md/mqtt_8h/#variable-mqttclient","title":"Variable mqttClient","text":"<p>Definition: <code>include/mqtt.h</code> (line 5)</p> <pre><code>MqttClient mqttClient\n</code></pre> <p>Type: MqttClient</p>"},{"location":"code/arduino/md/mqtt_8h/#functions","title":"Functions","text":""},{"location":"code/arduino/md/mqtt_8h/#function-sendtemptomqtt","title":"Function SendTempToMqtt","text":"<pre><code>bool SendTempToMqtt(MqttClient &amp;mqttClient, const char *topicPrefix, const char *sensorType, const char *sensorId, float celsius, const DateTime &amp;now, int sequence)\n</code></pre> <p>Publishes real-time sensor data to the MQTT broker with QoS 1 delivery.</p> <p>This function builds a JSON payload from the provided sensor data and publishes it to the specified MQTT topic. After publishing, it waits briefly for a PUBACK handshake from the broker to confirm delivery. If no acknowledgment is received within the timeout window, the data is saved to a CSV file for later recovery.</p> <p>Parameters:</p> <ul> <li>mqttClient: Reference to the MQTT client instance</li> <li>topicPrefix: Topic prefix for MQTT publishing (e.g., \"dhbw/ai/si2023/2/\")</li> <li>sensorType: Sensor type string (e.g., \"temp\")</li> <li>sensorId: Unique sensor identifier</li> <li>celsius: Measured temperature value in Celsius</li> <li>now: Current timestamp (DateTime)</li> <li>sequence: Sequence number for the measurement</li> </ul> <p>Returns:</p> <p>true if published and acknowledged by broker, false if fallback to CSV</p> <p>?&gt; Uses QoS 1 for reliable delivery. If broker does not echo/PUBACK within the timeout, data is persisted for later transmission.</p> <p>Parameters:</p> <ul> <li>MqttClient &amp; mqttClient</li> <li>const char * topicPrefix</li> <li>const char * sensorType</li> <li>const char * sensorId</li> <li>float celsius</li> <li>const DateTime &amp; now</li> <li>int sequence</li> </ul> <p>Return type: bool</p> <p></p>"},{"location":"code/arduino/md/mqtt_8h/#function-sendpendingdatatomqtt","title":"Function SendPendingDataToMqtt","text":"<pre><code>bool SendPendingDataToMqtt(MqttClient &amp;mqttClient, const char *topicPrefix, const char *sensorType, const char *sensorId, const DateTime &amp;now)\n</code></pre> <p>Processes and transmits pending CSV files from offline periods to the MQTT broker.</p> <p>This function scans the SD card for CSV files containing unsent sensor data from previous offline periods. Each file is converted to a JSON payload and published to the MQTT topic /recovered with QoS 1. After publishing, it waits briefly for a PUBACK handshake from the broker to confirm delivery. If the PUBACK is not received within the timeout period, the file is saved for later transmission. Files are only deleted if the publish operation succeeds. Files older than 24 hours or with invalid data are skipped. <p>Parameters:</p> <ul> <li>mqttClient: Reference to the MQTT client instance</li> <li>topicPrefix: Topic prefix for MQTT publishing (e.g., \"dhbw/ai/si2023/2/\")</li> <li>sensorType: Sensor type string (e.g., \"temp\")</li> <li>sensorId: Unique sensor identifier</li> <li>now: Current timestamp (DateTime)</li> </ul> <p>Returns:</p> <p>true if all valid files were published and deleted, false if any files remain or errors occurred</p> <p>?&gt; Uses QoS 1 for reliable delivery. Skips files older than 24 hours or with invalid content. Aborts if recovery exceeds time limit.</p> <p>Parameters:</p> <ul> <li>MqttClient &amp; mqttClient</li> <li>const char * topicPrefix</li> <li>const char * sensorType</li> <li>const char * sensorId</li> <li>const DateTime &amp; now</li> </ul> <p>Return type: bool</p> <p></p>"},{"location":"code/arduino/md/mqtt_8h/#function-createfulltopic","title":"Function CreateFullTopic","text":"<pre><code>void CreateFullTopic(char *buffer, size_t bufferSize, const char *topicPrefix, const char *sensorType, const char *sensorId, const char *suffix=\"\")\n</code></pre> <p>Parameters:</p> <ul> <li>char * buffer</li> <li>size_t bufferSize</li> <li>const char * topicPrefix</li> <li>const char * sensorType</li> <li>const char * sensorId</li> <li>const char * suffix = \"\" </li> </ul> <p>Return type: void</p>"},{"location":"code/arduino/md/mqtt_8h/#source","title":"Source","text":"<pre><code>#pragma once\n\n#include \"platform.h\"\n\nextern MqttClient mqttClient;\n\nbool SendTempToMqtt(MqttClient&amp; mqttClient, const char* topicPrefix, const char* sensorType,\n                const char* sensorId, float celsius, const DateTime&amp; now, int sequence);\n\nbool SendPendingDataToMqtt(MqttClient&amp; mqttClient, const char* topicPrefix, const char* sensorType,\n                     const char* sensorId, const DateTime&amp; now);\n\nvoid CreateFullTopic(char* buffer, size_t bufferSize, const char* topicPrefix, const char* sensorType,\n                     const char* sensorId, const char* suffix = \"\");\n</code></pre>"},{"location":"code/arduino/md/network_8cpp/","title":"Network 8cpp","text":""},{"location":"code/arduino/md/network_8cpp/#file-networkcpp","title":"File network.cpp","text":"<p>Location: <code>src/network.cpp</code></p>"},{"location":"code/arduino/md/network_8cpp/#includes","title":"Includes","text":"<ul> <li>network.h</li> <li>secrets.h</li> <li>mqtt.h</li> </ul> <pre><code>graph LR\n12[\"mqtt.h\"]\nclick 12 \"mqtt_8h.md#mqtt_8h\"\n12 --&gt; 3\n\n2[\"network.h\"]\nclick 2 \"network_8h.md#network_8h\"\n2 --&gt; 3\n\n3[\"platform.h\"]\nclick 3 \"platform_8h.md#platform_8h\"\n3 --&gt; 4\n3 --&gt; 5\n3 --&gt; 6\n3 --&gt; 7\n3 --&gt; 8\n3 --&gt; 9\n3 --&gt; 10\n\n1[\"src/network.cpp\"]\nclick 1 \"network_8cpp.md#network_8cpp\"\n1 --&gt; 2\n1 --&gt; 11\n1 --&gt; 12\n\n8[\"Adafruit_ADT7410.h\"]\n\n4[\"Arduino.h\"]\n\n9[\"ArduinoJson.h\"]\n\n10[\"ArduinoMqttClient.h\"]\n\n7[\"RTClib.h\"]\n\n6[\"SdFat.h\"]\n\n5[\"Wire.h\"]\n\n11[\"secrets.h\"]\n</code></pre>"},{"location":"code/arduino/md/network_8cpp/#variables","title":"Variables","text":""},{"location":"code/arduino/md/network_8cpp/#variable-ssid","title":"Variable SSID","text":"<p>Definition: <code>src/network.cpp</code> (line 11)</p> <pre><code>const char SSID[][] = [SECRET\\_SSID](secrets__example_8h.md#secrets__example_8h_1af44aa8face3356c1566d19fcad3e5f8b)\n</code></pre> <p>Type: const char</p> <p></p>"},{"location":"code/arduino/md/network_8cpp/#variable-password","title":"Variable PASSWORD","text":"<p>Definition: <code>src/network.cpp</code> (line 12)</p> <pre><code>const char PASSWORD[][] = [SECRET\\_PASS](secrets__example_8h.md#secrets__example_8h_1af9af3945a9a7c95d2d047a2183832d35)\n</code></pre> <p>Type: const char</p> <p></p>"},{"location":"code/arduino/md/network_8cpp/#variable-broker","title":"Variable BROKER","text":"<p>Definition: <code>src/network.cpp</code> (line 13)</p> <pre><code>const char* BROKER = \"aicon.dhbw-heidenheim.de\"\n</code></pre> <p>Type: const char *</p> <p></p>"},{"location":"code/arduino/md/network_8cpp/#variable-port","title":"Variable port","text":"<p>Definition: <code>src/network.cpp</code> (line 14)</p> <pre><code>const int port = 1883\n</code></pre> <p>Type: const int</p>"},{"location":"code/arduino/md/network_8cpp/#functions","title":"Functions","text":""},{"location":"code/arduino/md/network_8cpp/#function-connecttowifi","title":"Function ConnectToWiFi","text":"<pre><code>bool ConnectToWiFi(unsigned long timeoutMs)\n</code></pre> <p>Establishes a WiFi connection with the configured network.</p> <p>Attempts to connect to the WiFi network using credentials from the secrets file. Provides visual feedback via serial output and enforces a connection timeout.</p> <p>Parameters:</p> <ul> <li>timeoutMs: Maximum time in milliseconds to wait for connection (default: 10000ms).</li> </ul> <p>Returns:</p> <p>true if WiFi connection is successful, false if timeout occurs.</p> <p>Parameters:</p> <ul> <li>unsigned long timeoutMs</li> </ul> <p>Return type: bool</p> <p></p>"},{"location":"code/arduino/md/network_8cpp/#function-connecttomqtt","title":"Function ConnectToMQTT","text":"<pre><code>bool ConnectToMQTT(MqttClient &amp;mqttClient, unsigned long timeoutMs)\n</code></pre> <p>Establishes an authenticated MQTT connection to the broker.</p> <p>Sets up MQTT client credentials using values from the secrets file and attempts to connect to the configured MQTT broker. Provides visual feedback and enforces a connection timeout.</p> <p>Parameters:</p> <ul> <li>mqttClient: Reference to the MQTT client instance to connect.</li> <li>timeoutMs: Maximum time in milliseconds to wait for connection (default: 10000ms).</li> </ul> <p>Returns:</p> <p>true if MQTT connection is successful, false if timeout occurs.</p> <p>Parameters:</p> <ul> <li>MqttClient &amp; mqttClient</li> <li>unsigned long timeoutMs</li> </ul> <p>Return type: bool</p>"},{"location":"code/arduino/md/network_8cpp/#source","title":"Source","text":"<pre><code>#include \"network.h\"\n\n#ifdef UNIT_TEST\n#include \"secrets_example.h\"\n#else\n#include \"secrets.h\"\n#endif\n\n#include \"mqtt.h\"\n\nstatic const char SSID[]     = SECRET_SSID;\nstatic const char PASSWORD[] = SECRET_PASS;\nstatic const char* BROKER    = \"aicon.dhbw-heidenheim.de\";\nstatic const int port        = 1883;\n\nbool ConnectToWiFi(unsigned long timeoutMs) {\n  Serial.print(\"Connecting to WiFi...\");\n  WiFi.begin(SSID, PASSWORD);\n\n  unsigned long startAttemptTime = millis();\n  while (WiFi.status() != WL_CONNECTED) {\n    if (millis() - startAttemptTime &gt;= timeoutMs) {\n      Serial.println(\"WiFi connection timed out.\");\n      return false;\n    }\n    delay(500);\n    Serial.print(\".\");\n  }\n\n  Serial.println(\"WiFi is connected.\");\n  return true;\n}\n\nbool ConnectToMQTT(MqttClient&amp; mqttClient, unsigned long timeoutMs) {\n  Serial.print(\"Connecting to MQTT...\");\n\n  mqttClient.setUsernamePassword(SECRET_MQTT_USER, SECRET_MQTT_PASS);\n\n  unsigned long startAttemptTime = millis();\n\n  while (!mqttClient.connect(BROKER, port)) {\n    if (millis() - startAttemptTime &gt;= timeoutMs) {\n      Serial.println(\"MQTT connection timed out.\");\n      return false;\n    }\n    Serial.print(\".\");\n    delay(1000);\n  }\n\n  Serial.println(\" connected.\");\n  return true;\n}\n</code></pre>"},{"location":"code/arduino/md/network_8h/","title":"Network 8h","text":""},{"location":"code/arduino/md/network_8h/#file-networkh","title":"File network.h","text":"<p>Location: <code>include/network.h</code></p>"},{"location":"code/arduino/md/network_8h/#includes","title":"Includes","text":"<ul> <li>platform.h</li> </ul> <pre><code>graph LR\n1[\"include/network.h\"]\nclick 1 \"network_8h.md#network_8h\"\n1 --&gt; 2\n\n2[\"platform.h\"]\nclick 2 \"platform_8h.md#platform_8h\"\n2 --&gt; 3\n2 --&gt; 4\n2 --&gt; 5\n2 --&gt; 6\n2 --&gt; 7\n2 --&gt; 8\n2 --&gt; 9\n\n7[\"Adafruit_ADT7410.h\"]\n\n3[\"Arduino.h\"]\n\n8[\"ArduinoJson.h\"]\n\n9[\"ArduinoMqttClient.h\"]\n\n6[\"RTClib.h\"]\n\n5[\"SdFat.h\"]\n\n4[\"Wire.h\"]\n</code></pre>"},{"location":"code/arduino/md/network_8h/#included-by","title":"Included by","text":"<ul> <li>src/core.cpp</li> <li>src/network.cpp</li> </ul> <pre><code>graph RL\n1[\"include/network.h\"]\nclick 1 \"network_8h.md#network_8h\"\n2 --&gt; 1\n3 --&gt; 1\n\n2[\"src/core.cpp\"]\nclick 2 \"core_8cpp.md#core_8cpp\"\n\n3[\"src/network.cpp\"]\nclick 3 \"network_8cpp.md#network_8cpp\"\n</code></pre>"},{"location":"code/arduino/md/network_8h/#functions","title":"Functions","text":""},{"location":"code/arduino/md/network_8h/#function-connecttowifi","title":"Function ConnectToWiFi","text":"<pre><code>bool ConnectToWiFi(unsigned long timeoutMs=10000)\n</code></pre> <p>Establishes a WiFi connection with the configured network.</p> <p>Attempts to connect to the WiFi network using credentials from the secrets file. Provides visual feedback via serial output and enforces a connection timeout.</p> <p>Parameters:</p> <ul> <li>timeoutMs: Maximum time in milliseconds to wait for connection (default: 10000ms).</li> </ul> <p>Returns:</p> <p>true if WiFi connection is successful, false if timeout occurs.</p> <p>Parameters:</p> <ul> <li>unsigned long timeoutMs = 10000 </li> </ul> <p>Return type: bool</p> <p></p>"},{"location":"code/arduino/md/network_8h/#function-connecttomqtt","title":"Function ConnectToMQTT","text":"<pre><code>bool ConnectToMQTT(MqttClient &amp;mqttClient, unsigned long timeoutMs=10000)\n</code></pre> <p>Establishes an authenticated MQTT connection to the broker.</p> <p>Sets up MQTT client credentials using values from the secrets file and attempts to connect to the configured MQTT broker. Provides visual feedback and enforces a connection timeout.</p> <p>Parameters:</p> <ul> <li>mqttClient: Reference to the MQTT client instance to connect.</li> <li>timeoutMs: Maximum time in milliseconds to wait for connection (default: 10000ms).</li> </ul> <p>Returns:</p> <p>true if MQTT connection is successful, false if timeout occurs.</p> <p>Parameters:</p> <ul> <li>MqttClient &amp; mqttClient</li> <li>unsigned long timeoutMs = 10000 </li> </ul> <p>Return type: bool</p> <p></p>"},{"location":"code/arduino/md/network_8h/#function-isconnectedtoserver","title":"Function IsConnectedToServer","text":"<pre><code>bool IsConnectedToServer(MqttClient &amp;mqttClient)\n</code></pre> <p>Parameters:</p> <ul> <li>MqttClient &amp; mqttClient</li> </ul> <p>Return type: bool</p>"},{"location":"code/arduino/md/network_8h/#source","title":"Source","text":"<pre><code>#pragma once\n\n#include \"platform.h\"\n\nbool ConnectToWiFi(unsigned long timeoutMs = 10000);\nbool ConnectToMQTT(MqttClient&amp; mqttClient, unsigned long timeoutMs = 10000);\n\ninline bool IsConnectedToServer(MqttClient&amp; mqttClient) {\n  return WiFi.status() == WL_CONNECTED &amp;&amp; mqttClient.connected();\n}\n</code></pre>"},{"location":"code/arduino/md/platform_8h/","title":"Platform 8h","text":""},{"location":"code/arduino/md/platform_8h/#file-platformh","title":"File platform.h","text":"<p>Location: <code>include/platform.h</code></p>"},{"location":"code/arduino/md/platform_8h/#includes","title":"Includes","text":"<ul> <li> <li> <li> <li> <li> <li> <li> <pre><code>graph LR\n1[\"include/platform.h\"]\nclick 1 \"platform_8h.md#platform_8h\"\n1 --&gt; 2\n1 --&gt; 3\n1 --&gt; 4\n1 --&gt; 5\n1 --&gt; 6\n1 --&gt; 7\n1 --&gt; 8\n\n6[\"Adafruit_ADT7410.h\"]\n\n2[\"Arduino.h\"]\n\n7[\"ArduinoJson.h\"]\n\n8[\"ArduinoMqttClient.h\"]\n\n5[\"RTClib.h\"]\n\n4[\"SdFat.h\"]\n\n3[\"Wire.h\"]\n</code></pre>"},{"location":"code/arduino/md/platform_8h/#included-by","title":"Included by","text":"<ul> <li>include/mqtt.h</li> <li>include/network.h</li> <li>include/sensor.h</li> <li>include/storage.h</li> <li>src/core.cpp</li> <li>src/main.cpp</li> </ul> <pre><code>graph RL\n2[\"include/mqtt.h\"]\nclick 2 \"mqtt_8h.md#mqtt_8h\"\n3 --&gt; 2\n4 --&gt; 2\n5 --&gt; 2\n\n6[\"include/network.h\"]\nclick 6 \"network_8h.md#network_8h\"\n3 --&gt; 6\n5 --&gt; 6\n\n1[\"include/platform.h\"]\nclick 1 \"platform_8h.md#platform_8h\"\n2 --&gt; 1\n6 --&gt; 1\n7 --&gt; 1\n9 --&gt; 1\n3 --&gt; 1\n11 --&gt; 1\n\n7[\"include/sensor.h\"]\nclick 7 \"sensor_8h.md#sensor_8h\"\n3 --&gt; 7\n8 --&gt; 7\n\n9[\"include/storage.h\"]\nclick 9 \"storage_8h.md#storage_8h\"\n3 --&gt; 9\n4 --&gt; 9\n10 --&gt; 9\n\n3[\"src/core.cpp\"]\nclick 3 \"core_8cpp.md#core_8cpp\"\n\n11[\"src/main.cpp\"]\nclick 11 \"main_8cpp.md#main_8cpp\"\n\n4[\"src/mqtt.cpp\"]\nclick 4 \"mqtt_8cpp.md#mqtt_8cpp\"\n\n5[\"src/network.cpp\"]\nclick 5 \"network_8cpp.md#network_8cpp\"\n\n8[\"src/sensor.cpp\"]\nclick 8 \"sensor_8cpp.md#sensor_8cpp\"\n\n10[\"src/storage.cpp\"]\nclick 10 \"storage_8cpp.md#storage_8cpp\"\n</code></pre>"},{"location":"code/arduino/md/platform_8h/#variables","title":"Variables","text":""},{"location":"code/arduino/md/platform_8h/#variable-rtc","title":"Variable rtc","text":"<p>Definition: <code>include/platform.h</code> (line 326)</p> <pre><code>RTC_DS3231 rtc\n</code></pre> <p>Type: RTC_DS3231</p> <p></p>"},{"location":"code/arduino/md/platform_8h/#variable-sd","title":"Variable sd","text":"<p>Definition: <code>include/platform.h</code> (line 327)</p> <pre><code>SdFat sd\n</code></pre> <p>Type: SdFat</p> <p></p>"},{"location":"code/arduino/md/platform_8h/#variable-tempsensor","title":"Variable tempsensor","text":"<p>Definition: <code>include/platform.h</code> (line 328)</p> <pre><code>Adafruit_ADT7410 tempsensor\n</code></pre> <p>Type: Adafruit_ADT7410</p>"},{"location":"code/arduino/md/platform_8h/#source","title":"Source","text":"<pre><code>#pragma once\n\n#ifdef UNIT_TEST\n  #include &lt;ArduinoFake.h&gt;\n  #include &lt;string&gt;\n  #include &lt;set&gt;\n  #include &lt;cstdint&gt;\n  #include &lt;cstdio&gt;\n  #include &lt;cstdlib&gt;\n  #include &lt;cstring&gt;\n  #include &lt;cstdarg&gt;\n  #include &lt;map&gt;\n  #include &lt;ArduinoJson.h&gt;\n\n  // Mock DateTime class for RTClib\n  class DateTime {\n    public:\n      DateTime(int y, int m, int d, int h, int min, int s) \n        : _year(y), _month(m), _day(d), _hour(h), _minute(min), _second(s) {}\n      DateTime(const char* date, const char* time) \n        : _year(2025), _month(7), _day(26), _hour(14), _minute(55), _second(0) {} // Mock parsing\n      DateTime(const __FlashStringHelper* date, const __FlashStringHelper* time) \n        : _year(2025), _month(7), _day(26), _hour(14), _minute(55), _second(0) {} // Mock F() macro support\n      int year() const { return _year; }\n      int month() const { return _month; }\n      int day() const { return _day; }\n      int hour() const { return _hour; }\n      int minute() const { return _minute; }\n      int second() const { return _second; }\n      uint32_t unixtime() const { \n        // Simple mock timestamp calculation\n        return 1640995200 + (_year - 2022) * 31536000 + _month * 2628000 + _day * 86400 + _hour * 3600 + _minute * 60 + _second;\n      }\n      String timestamp(int format = 0) const {\n        return String(\"2025-07-26T14:55:00\");\n      }\n\n      // Constants for timestamp formats\n      static const int TIMESTAMP_FULL = 0;\n\n    private:\n      int _year, _month, _day, _hour, _minute, _second;\n  };\n\n  // Mock File class for SdFat\n  class MockFile {\n    public:\n      MockFile() : _isOpen(false), _data(\"\"), _position(0) {}\n      MockFile(bool isOpen) : _isOpen(isOpen), _data(\"\"), _position(0) {}\n\n      // Use std::string internally, convert ArduinoFake String when needed\n      bool print(const char* str) { if(_isOpen) _data += str; return _isOpen; }\n      bool print(const String&amp; str) {\n          if(_isOpen) _data += str.c_str();  // Convert ArduinoFake String to const char*\n          return _isOpen;\n      }\n      void close() { _isOpen = false; }\n      bool available() { return _isOpen &amp;&amp; _position &lt; _data.length(); }\n      size_t fgets(char* buffer, size_t size) {\n        if (!_isOpen || _position &gt;= _data.length()) return 0;\n        size_t i = 0;\n        while (i &lt; size - 1 &amp;&amp; _position &lt; _data.length() &amp;&amp; _data[_position] != '\\n') {\n          buffer[i++] = _data[_position++];\n        }\n        if (_position &lt; _data.length() &amp;&amp; _data[_position] == '\\n') {\n          buffer[i++] = _data[_position++];\n        }\n        buffer[i] = '\\0';\n        return i;\n      }\n      operator bool() const { return _isOpen; }\n\n      // Additional methods needed by the code\n      MockFile openNextFile() { return MockFile(false); } // Mock iterator\n      bool isDirectory() { return false; }\n      void getName(char* buffer, size_t size) {\n        strncpy(buffer, \"test.csv\", size);\n        buffer[size-1] = '\\0';\n      }\n\n      void setTestData(const std::string&amp; data) { _data = data; _position = 0; }\n      std::string getWrittenData() const { return _data; }\n\n    private:\n      bool _isOpen;\n      std::string _data;\n      size_t _position;\n  };\n\n  // Mock SdFat class\n  class MockSdFat {\n    public:\n      bool exists(const char* path) { return _existingFiles.find(std::string(path)) != _existingFiles.end(); }\n      bool mkdir(const char* path) { _existingFiles.insert(std::string(path)); return true; }\n      MockFile open(const char* path, int mode) { \n        std::string pathStr(path);\n        if (mode == 1) { // FILE_WRITE\n          _existingFiles.insert(pathStr);\n          return MockFile(true);\n        }\n        // FILE_READ\n        bool exists = _existingFiles.find(pathStr) != _existingFiles.end();\n        MockFile file(exists);\n        if (exists &amp;&amp; _fileContents.find(pathStr) != _fileContents.end()) {\n          file.setTestData(_fileContents[pathStr]);\n        }\n        return file;\n      }\n      MockFile open(const char* path) { \n        // Default to read mode\n        std::string pathStr(path);\n        bool exists = _existingFiles.find(pathStr) != _existingFiles.end();\n        MockFile file(exists);\n        if (exists &amp;&amp; _fileContents.find(pathStr) != _fileContents.end()) {\n          file.setTestData(_fileContents[pathStr]);\n        }\n        return file;\n      }\n      bool remove(const char* path) { \n        std::string pathStr(path);\n        auto it = _existingFiles.find(pathStr);\n        if (it != _existingFiles.end()) {\n          _existingFiles.erase(it);\n          _fileContents.erase(pathStr);\n          return true;\n        }\n        return false;\n      }\n      bool begin(int chipSelect, int freq) { return true; }\n\n      void addTestFile(const std::string&amp; path) { _existingFiles.insert(path); }\n      void addTestFile(const std::string&amp; path, const std::string&amp; content) { \n        _existingFiles.insert(path); \n        _fileContents[path] = content;\n      }\n      void clearTestFiles() { \n        _existingFiles.clear(); \n        _fileContents.clear();\n      }\n\n    private:\n      std::set&lt;std::string&gt; _existingFiles;\n      std::map&lt;std::string, std::string&gt; _fileContents;\n  };\n\n  // Global mock objects\n  extern MockSdFat sd;\n\n  // Mock WiFi classes\n  class MockWiFiClient {\n    public:\n      MockWiFiClient() : _connected(false) {}\n      int connect(const char* host, uint16_t port) { _connected = true; return 1; }\n      size_t write(uint8_t data) { return 1; }\n      size_t write(const uint8_t* buffer, size_t size) { return size; }\n      int available() { return 0; }\n      int read() { return -1; }\n      int read(uint8_t* buffer, size_t size) { return 0; }\n      int peek() { return -1; }\n      void flush() {}\n      void stop() { _connected = false; }\n      uint8_t connected() { return _connected; }\n      operator bool() { return _connected; }\n\n    private:\n      bool _connected;\n  };\n\n  class MockWiFiClass {\n    public:\n      int begin(const char* ssid, const char* pass) { _status = 3; return 3; } // WL_CONNECTED = 3\n      uint8_t status() { return _status; }\n      void disconnect() { _status = 6; } // WL_DISCONNECTED = 6\n\n    private:\n      uint8_t _status = 6; // Start disconnected\n  };  \n\n    using WiFiClient = MockWiFiClient;\n\n  // Mock MQTT Client\n  class MockMqttClient {\n    public:\n      MockMqttClient(WiFiClient&amp; client) : _connected(false) {}\n\n      void setId(const char* id) { _clientId = id; }\n      void setUsernamePassword(const char* user, const char* pass) { _username = user; _password = pass; }\n      int connect(const char* broker, int port = 1883) { _connected = true; return 1; }\n      bool connected() { return _connected; }\n      void stop() { _connected = false; }\n      void poll() {}\n\n      int beginMessage(const char* MQTT_TOPIC, bool retain = false, int qos = 0) { \n        _currentTopic = MQTT_TOPIC; \n        _messageBuffer = \"\";\n        return 1; \n      }\n      size_t print(const char* data) { _messageBuffer += data; return strlen(data); }\n      size_t print(const String&amp; data) { _messageBuffer += data.c_str(); return data.length(); }\n      int endMessage() { return 1; }\n\n      String messageTopic() { return String(_currentTopic.c_str()); }\n      bool messageRetain() { return false; }\n      int available() { return 0; }\n      int read() { return -1; }\n\n      void setMessageCallback(void (*callback)(int)) { _callback = callback; }\n      void onMessage(void (*callback)(int)) { _callback = callback; }\n      void subscribe(const char* MQTT_TOPIC) { _subscribedTopic = MQTT_TOPIC; }\n      void unsubscribe(const char* MQTT_TOPIC) {}\n\n      // Test helpers\n      std::string getLastMessage() { return _messageBuffer; }\n      void simulateMessage(const std::string&amp; MQTT_TOPIC, const std::string&amp; message) {\n        _currentTopic = MQTT_TOPIC;\n        _messageBuffer = message;\n        if (_callback) _callback(message.length());\n      }\n\n    private:\n      bool _connected;\n      std::string _clientId, _username, _password;\n      std::string _currentTopic, _subscribedTopic, _messageBuffer;\n      void (*_callback)(int) = nullptr;\n  };\n\n  // WiFi status constants\n  #define WL_CONNECTED 3\n  #define WL_DISCONNECTED 6\n\n  // Global WiFi object\n  extern MockWiFiClass WiFi;\n\n  // Mock hardware objects\n  class MockRTC {\n    public:\n      DateTime now() { return DateTime(2025, 7, 26, 14, 55, 0); }\n      bool begin() { return true; }\n      bool lostPower() { return false; }\n      void adjust(const DateTime&amp; dt) {}\n  };\n\n  class MockTempSensor {\n    public:\n      float readTempC() { return 25.5; }\n      bool begin() { return true; }\n      int delayCalled() { return 250; }\n      void setResolution(int resolution) {} \n      bool setResolutionCalled() { return true; }\n  };\n\n  // Type aliases for Arduino library classes - remove Client conflict\n  using RTC_DS3231 = MockRTC;\n  using Adafruit_ADT7410 = MockTempSensor;\n  using MqttClient = MockMqttClient;\n  using File = MockFile;\n\n  extern MockRTC rtc;\n  extern MockTempSensor tempsensor;\n  extern MockWiFiClient wifiClient;\n  extern MockMqttClient mqttClient;\n\n  // File operation constants\n  #define FILE_READ 0\n  #define FILE_WRITE 1\n\n  // SdFat constants\n  #define SD_SCK_MHZ(freq) freq\n  #define SD_SCK_FREQUENCY_MHZ 50\n\n  // ADT7410 constants for mock\n  #define ADT7410_16BIT 3\n\n  // FAT time/date macros\n  #define FAT_DATE(y, m, d) ((((y) - 1980) &lt;&lt; 9) | ((m) &lt;&lt; 5) | (d))\n  #define FAT_TIME(h, m, s) (((h) &lt;&lt; 11) | ((m) &lt;&lt; 5) | ((s) &gt;&gt; 1))\n\n  // SdFile for callback\n  class SdFile {\n    public:\n      static void dateTimeCallback(void (*callback)(uint16_t*, uint16_t*)) {}\n  };\n\n#else\n\n  // --- PLATFORM ARDUINO-INCLUDES ---\n  #include &lt;Arduino.h&gt; \n  #include &lt;Wire.h&gt;\n  #include &lt;SdFat.h&gt;\n  #include &lt;RTClib.h&gt;\n  #include &lt;Adafruit_ADT7410.h&gt;\n  #include &lt;ArduinoJson.h&gt;\n  #include &lt;ArduinoMqttClient.h&gt;\n\n  // Global hardware objects (declaration)\n  extern RTC_DS3231 rtc;\n  extern SdFat sd;\n  extern Adafruit_ADT7410 tempsensor;\n\n  // Unified WiFi header depending on board\n  #if defined(ARDUINO_SAMD_MKRWIFI1010) || defined(ARDUINO_SAMD_NANO_33_IOT) || defined(ARDUINO_AVR_UNO_WIFI_REV2)\n    #include &lt;WiFiNINA.h&gt;\n  #elif defined(ARDUINO_SAMD_MKR1000)\n    #include &lt;WiFi101.h&gt;\n  #elif defined(ARDUINO_ARCH_ESP8266)\n    #include &lt;ESP8266WiFi.h&gt;\n  #elif defined(ARDUINO_PORTENTA_H7_M7) || defined(ARDUINO_NICLA_VISION) || defined(ARDUINO_ARCH_ESP32) || defined(ARDUINO_GIGA) || defined(ARDUINO_OPTA)\n    #include &lt;WiFi.h&gt;\n  #elif defined(ARDUINO_PORTENTA_C33)\n    #include &lt;WiFiC3.h&gt;\n  #elif defined(ARDUINO_UNOR4_WIFI)\n    #include &lt;WiFiS3.h&gt;\n  #else\n    #error \"No supported WiFi driver found for this board\"\n  #endif\n\n#endif\n</code></pre>"},{"location":"code/arduino/md/secrets__example_8h/","title":"Secrets  example 8h","text":""},{"location":"code/arduino/md/secrets__example_8h/#file-secrets_exampleh","title":"File secrets_example.h","text":"<p>Location: <code>include/secrets\\_example.h</code></p>"},{"location":"code/arduino/md/secrets__example_8h/#macros","title":"Macros","text":""},{"location":"code/arduino/md/secrets__example_8h/#macro-secret_ssid","title":"Macro SECRET_SSID","text":"<pre><code>#define SECRET_SSID \"YourSSID\"\n</code></pre>"},{"location":"code/arduino/md/secrets__example_8h/#macro-secret_pass","title":"Macro SECRET_PASS","text":"<pre><code>#define SECRET_PASS \"YourPassword\"\n</code></pre>"},{"location":"code/arduino/md/secrets__example_8h/#macro-secret_mqtt_user","title":"Macro SECRET_MQTT_USER","text":"<pre><code>#define SECRET_MQTT_USER \"YourMQTTUser\"\n</code></pre>"},{"location":"code/arduino/md/secrets__example_8h/#macro-secret_mqtt_pass","title":"Macro SECRET_MQTT_PASS","text":"<pre><code>#define SECRET_MQTT_PASS \"YourMQTTPassword\"\n</code></pre>"},{"location":"code/arduino/md/secrets__example_8h/#source","title":"Source","text":"<pre><code>#define SECRET_SSID \"YourSSID\"\n#define SECRET_PASS \"YourPassword\"\n#define SECRET_MQTT_USER \"YourMQTTUser\"\n#define SECRET_MQTT_PASS \"YourMQTTPassword\"\n</code></pre>"},{"location":"code/arduino/md/sensor_8cpp/","title":"Sensor 8cpp","text":""},{"location":"code/arduino/md/sensor_8cpp/#file-sensorcpp","title":"File sensor.cpp","text":"<p>Location: <code>src/sensor.cpp</code></p>"},{"location":"code/arduino/md/sensor_8cpp/#includes","title":"Includes","text":"<ul> <li>sensor.h</li> </ul> <pre><code>graph LR\n3[\"platform.h\"]\nclick 3 \"platform_8h.md#platform_8h\"\n3 --&gt; 4\n3 --&gt; 5\n3 --&gt; 6\n3 --&gt; 7\n3 --&gt; 8\n3 --&gt; 9\n3 --&gt; 10\n\n2[\"sensor.h\"]\nclick 2 \"sensor_8h.md#sensor_8h\"\n2 --&gt; 3\n\n1[\"src/sensor.cpp\"]\nclick 1 \"sensor_8cpp.md#sensor_8cpp\"\n1 --&gt; 2\n\n8[\"Adafruit_ADT7410.h\"]\n\n4[\"Arduino.h\"]\n\n9[\"ArduinoJson.h\"]\n\n10[\"ArduinoMqttClient.h\"]\n\n7[\"RTClib.h\"]\n\n6[\"SdFat.h\"]\n\n5[\"Wire.h\"]\n</code></pre>"},{"location":"code/arduino/md/sensor_8cpp/#functions","title":"Functions","text":""},{"location":"code/arduino/md/sensor_8cpp/#function-initsensor","title":"Function InitSensor","text":"<pre><code>bool InitSensor(Adafruit_ADT7410 &amp;sensor)\n</code></pre> <p>Parameters:</p> <ul> <li>Adafruit_ADT7410 &amp; sensor</li> </ul> <p>Return type: bool</p> <p></p>"},{"location":"code/arduino/md/sensor_8cpp/#function-readtemperatureincelsius","title":"Function ReadTemperatureInCelsius","text":"<pre><code>float ReadTemperatureInCelsius()\n</code></pre> <p>Return type: float</p>"},{"location":"code/arduino/md/sensor_8cpp/#source","title":"Source","text":"<pre><code>#include \"sensor.h\"\n\nbool InitSensor(Adafruit_ADT7410&amp; sensor) {\n  if (!sensor.begin()) {\n    Serial.println(\"ADT7410 not found!\");\n    return false;\n  }\n  delay(250);\n  sensor.setResolution(ADT7410_16BIT);\n  return true;\n}\n\nfloat ReadTemperatureInCelsius() {\n  return tempsensor.readTempC();  \n}\n</code></pre>"},{"location":"code/arduino/md/sensor_8h/","title":"Sensor 8h","text":""},{"location":"code/arduino/md/sensor_8h/#file-sensorh","title":"File sensor.h","text":"<p>Location: <code>include/sensor.h</code></p>"},{"location":"code/arduino/md/sensor_8h/#includes","title":"Includes","text":"<ul> <li>platform.h</li> </ul> <pre><code>graph LR\n2[\"platform.h\"]\nclick 2 \"platform_8h.md#platform_8h\"\n2 --&gt; 3\n2 --&gt; 4\n2 --&gt; 5\n2 --&gt; 6\n2 --&gt; 7\n2 --&gt; 8\n2 --&gt; 9\n\n1[\"include/sensor.h\"]\nclick 1 \"sensor_8h.md#sensor_8h\"\n1 --&gt; 2\n\n7[\"Adafruit_ADT7410.h\"]\n\n3[\"Arduino.h\"]\n\n8[\"ArduinoJson.h\"]\n\n9[\"ArduinoMqttClient.h\"]\n\n6[\"RTClib.h\"]\n\n5[\"SdFat.h\"]\n\n4[\"Wire.h\"]\n</code></pre>"},{"location":"code/arduino/md/sensor_8h/#included-by","title":"Included by","text":"<ul> <li>src/core.cpp</li> <li>src/sensor.cpp</li> </ul> <pre><code>graph RL\n1[\"include/sensor.h\"]\nclick 1 \"sensor_8h.md#sensor_8h\"\n2 --&gt; 1\n3 --&gt; 1\n\n2[\"src/core.cpp\"]\nclick 2 \"core_8cpp.md#core_8cpp\"\n\n3[\"src/sensor.cpp\"]\nclick 3 \"sensor_8cpp.md#sensor_8cpp\"\n</code></pre>"},{"location":"code/arduino/md/sensor_8h/#functions","title":"Functions","text":""},{"location":"code/arduino/md/sensor_8h/#function-initsensor","title":"Function InitSensor","text":"<pre><code>bool InitSensor(Adafruit_ADT7410 &amp;sensor)\n</code></pre> <p>Parameters:</p> <ul> <li>Adafruit_ADT7410 &amp; sensor</li> </ul> <p>Return type: bool</p> <p></p>"},{"location":"code/arduino/md/sensor_8h/#function-readtemperatureincelsius","title":"Function ReadTemperatureInCelsius","text":"<pre><code>float ReadTemperatureInCelsius()\n</code></pre> <p>Return type: float</p>"},{"location":"code/arduino/md/sensor_8h/#source","title":"Source","text":"<pre><code>#pragma once\n\n#include \"platform.h\"\n\nbool InitSensor(Adafruit_ADT7410&amp; sensor);\nfloat ReadTemperatureInCelsius();\n</code></pre>"},{"location":"code/arduino/md/storage_8cpp/","title":"Storage 8cpp","text":""},{"location":"code/arduino/md/storage_8cpp/#file-storagecpp","title":"File storage.cpp","text":"<p>Location: <code>src/storage.cpp</code></p>"},{"location":"code/arduino/md/storage_8cpp/#includes","title":"Includes","text":"<ul> <li>storage.h</li> </ul> <pre><code>graph LR\n3[\"platform.h\"]\nclick 3 \"platform_8h.md#platform_8h\"\n3 --&gt; 4\n3 --&gt; 5\n3 --&gt; 6\n3 --&gt; 7\n3 --&gt; 8\n3 --&gt; 9\n3 --&gt; 10\n\n2[\"storage.h\"]\nclick 2 \"storage_8h.md#storage_8h\"\n2 --&gt; 3\n2 --&gt; 11\n\n1[\"src/storage.cpp\"]\nclick 1 \"storage_8cpp.md#storage_8cpp\"\n1 --&gt; 2\n\n8[\"Adafruit_ADT7410.h\"]\n\n4[\"Arduino.h\"]\n\n9[\"ArduinoJson.h\"]\n\n10[\"ArduinoMqttClient.h\"]\n\n7[\"RTClib.h\"]\n\n6[\"SdFat.h\"]\n\n5[\"Wire.h\"]\n\n11[\"cstdio\"]\n</code></pre>"},{"location":"code/arduino/md/storage_8cpp/#variables","title":"Variables","text":""},{"location":"code/arduino/md/storage_8cpp/#variable-folder_name_buffer_size","title":"Variable FOLDER_NAME_BUFFER_SIZE","text":"<p>Definition: <code>src/storage.cpp</code> (line 8)</p> <pre><code>const size_t FOLDER_NAME_BUFFER_SIZE = 8\n</code></pre> <p>Buffer size for folder names (e.g., \"2025\")</p> <p>Type: const size_t</p> <p></p>"},{"location":"code/arduino/md/storage_8cpp/#variable-current_filename_buffer_size","title":"Variable CURRENT_FILENAME_BUFFER_SIZE","text":"<p>Definition: <code>src/storage.cpp</code> (line 10)</p> <pre><code>const size_t CURRENT_FILENAME_BUFFER_SIZE = 32\n</code></pre> <p>Buffer size for storing the current active CSV filename.</p> <p>Type: const size_t</p> <p></p>"},{"location":"code/arduino/md/storage_8cpp/#variable-csv_line_buffer_size","title":"Variable CSV_LINE_BUFFER_SIZE","text":"<p>Definition: <code>src/storage.cpp</code> (line 12)</p> <pre><code>const size_t CSV_LINE_BUFFER_SIZE = 64\n</code></pre> <p>Buffer size for reading individual CSV lines.</p> <p>Type: const size_t</p> <p></p>"},{"location":"code/arduino/md/storage_8cpp/#variable-max_lines_per_csv_file","title":"Variable MAX_LINES_PER_CSV_FILE","text":"<p>Definition: <code>src/storage.cpp</code> (line 14)</p> <pre><code>const int MAX_LINES_PER_CSV_FILE = 5\n</code></pre> <p>Maximum number of sensor readings per CSV batch file.</p> <p>Type: const int</p> <p></p>"},{"location":"code/arduino/md/storage_8cpp/#variable-currentfilename","title":"Variable currentFilename","text":"<p>Definition: <code>src/storage.cpp</code> (line 15)</p> <pre><code>char currentFilename[CURRENT_FILENAME_BUFFER_SIZE][CURRENT_FILENAME_BUFFER_SIZE] = \"\"\n</code></pre> <p>Type: char</p> <p></p>"},{"location":"code/arduino/md/storage_8cpp/#variable-linesinfile","title":"Variable linesInFile","text":"<p>Definition: <code>src/storage.cpp</code> (line 17)</p> <pre><code>int linesInFile = 0\n</code></pre> <p>Static variable to track the number of lines in the current CSV file.</p> <p>Type: int</p>"},{"location":"code/arduino/md/storage_8cpp/#functions","title":"Functions","text":""},{"location":"code/arduino/md/storage_8cpp/#function-savetemptobatchcsv","title":"Function SaveTempToBatchCsv","text":"<pre><code>void SaveTempToBatchCsv(const DateTime &amp;now, float celsius, int sequence)\n</code></pre> <p>Saves sensor data to CSV files in batch mode during network outages.</p> <p>This function implements intelligent batch CSV storage that creates new files when needed and manages file rotation. It's designed as a fallback mechanism when MQTT transmission is unavailable due to network connectivity issues.</p> <p>Batch Management: * Maintains a static filename for the current active CSV file</p> <ul> <li> <p>Creates new files when the current file reaches maximum line limit</p> </li> <li> <p>Uses timestamp-based filenames for uniqueness and organization</p> </li> </ul> <p>File Organization: * Creates date-based folders automatically (e.g., \"2025/\")</p> <ul> <li> <p>Stores files with minute-precision timestamps in filename</p> </li> <li> <p>Format: \"YYYY/MMDDHHMM.csv\" (e.g., \"2025/08051430.csv\")</p> </li> </ul> <p>Data Format: * CSV format: timestamp,temperature,sequence</p> <ul> <li> <p>Temperature precision: 5 decimal places</p> </li> <li> <p>Unix timestamp for absolute time reference</p> </li> </ul> <p>Parameters:</p> <ul> <li>now: Current timestamp for folder creation and data logging</li> <li>celsius: Temperature reading in Celsius (stored with 5 decimal precision)</li> <li>sequence: Sequence number for the measurement</li> </ul> <p>?&gt; This function uses static variables to maintain state across calls</p> <p>?&gt; Files are automatically rotated after MAX_LINES_PER_CSV_FILE entries</p> <p>See also: createFolderName() for folder naming convention, createFilename() for CSV filename generation</p> <p>Parameters:</p> <ul> <li>const DateTime &amp; now</li> <li>float celsius</li> <li>int sequence</li> </ul> <p>Return type: void</p> <p></p>"},{"location":"code/arduino/md/storage_8cpp/#function-buildjson","title":"Function BuildJson","text":"<pre><code>void BuildJson(JsonDocument &amp;doc, float celsius, const DateTime &amp;now, int sequence)\n</code></pre> <p>Builds a JSON document from live sensor data for real-time transmission.</p> <p>This function creates a properly formatted JSON document containing current sensor readings for immediate MQTT transmission. The JSON structure follows a standardized format for IoT temperature monitoring systems with metadata support.</p> <p>JSON Structure: <code>json { \"timestamp\": 1737024000, \"value\": [25.12345], \"sequence\": 42, \"meta\": {} }</code></p> <p>Data Precision: * Temperature: 5 decimal places for high precision monitoring</p> <ul> <li> <p>Timestamp: Unix timestamp (seconds since epoch)</p> </li> <li> <p>Sequence: Integer measurement counter</p> </li> <li> <p>Value array: Supports multiple sensor readings</p> </li> </ul> <p>Performance Considerations: * Modifies existing JsonDocument for memory efficiency</p> <ul> <li> <p>Clears previous data to prevent accumulation</p> </li> <li> <p>Optimized for embedded systems with limited memory</p> </li> </ul> <p>Parameters:</p> <ul> <li>doc: JsonDocument reference to populate (cleared before use)</li> <li>celsius: Temperature reading in Celsius (stored with 5 decimal precision)</li> <li>now: Current timestamp for the measurement</li> <li>sequence: Sequence number for the measurement</li> </ul> <p>?&gt; The function clears the document before populating new data</p> <p>See also: buildRecoveredJsonFromCsv() for batch recovery JSON format, saveToCsvBatch() for CSV fallback storage format</p> <p>Parameters:</p> <ul> <li>JsonDocument &amp; doc</li> <li>float celsius</li> <li>const DateTime &amp; now</li> <li>int sequence</li> </ul> <p>Return type: void</p> <p></p>"},{"location":"code/arduino/md/storage_8cpp/#function-buildrecoveryjsonfrombatchcsv","title":"Function BuildRecoveryJsonFromBatchCsv","text":"<pre><code>void BuildRecoveryJsonFromBatchCsv(JsonDocument &amp;doc, const char *filepath, const DateTime &amp;now)\n</code></pre> <p>Builds a JSON document from CSV batch data for recovery transmission.</p> <p>This function processes stored CSV data files and converts them into JSON format for batch transmission when network connectivity is restored. It handles multiple measurements in a metadata array structure for efficient network utilization during recovery operations.</p> <p>Recovery JSON Structure: <code>json { \"timestamp\": 1737024000, \"sequence\": null, \"value\": [null], \"meta\": { \"t\": [1737024000, 1737024060, ..], \"v\": [25.12345, 25.12567, ...], \"s\": [42, 43, ...] } }</code></p> <p>Processing Logic: * Reads each line from the specified CSV file using secure fgets()</p> <ul> <li> <p>Parses CSV format: timestamp,temperature,sequence using strtok()</p> </li> <li> <p>Creates individual JSON objects for each measurement in meta array</p> </li> <li> <p>Uses null placeholders for top-level value and sequence fields</p> </li> </ul> <p>Error Handling: * Returns early if file cannot be opened</p> <ul> <li> <p>Skips malformed lines during CSV parsing</p> </li> <li> <p>Continues processing even if some lines fail</p> </li> <li> <p>Reports total number of successfully recovered entries</p> </li> </ul> <p>Parameters:</p> <ul> <li>doc: JsonDocument reference to populate (cleared before use)</li> <li>filepath: Path to the CSV file containing batch sensor data</li> <li>now: Current timestamp for the recovery operation</li> </ul> <p>?&gt; Uses strtok() for safe CSV parsing with buffer protection</p> <p>?&gt; Clears the document before populating new batch data</p> <p>See also: saveToCsvBatch() for CSV storage format details, sendPendingData() in mqtt.cpp for recovery transmission</p> <p>Parameters:</p> <ul> <li>JsonDocument &amp; doc</li> <li>const char * filepath</li> <li>const DateTime &amp; now</li> </ul> <p>Return type: void</p> <p></p>"},{"location":"code/arduino/md/storage_8cpp/#function-deletecsvfile","title":"Function DeleteCsvFile","text":"<pre><code>void DeleteCsvFile(const char *filepath)\n</code></pre> <p>Deletes a CSV file from the SD card storage system.</p> <p>This function provides safe file deletion with error handling and logging. It's primarily used during the data recovery process to clean up CSV files after they have been successfully transmitted via MQTT.</p> <p>Safety Features: * Checks file existence before attempting deletion</p> <ul> <li> <p>Provides detailed success/failure logging</p> </li> <li> <p>Handles SD card filesystem errors gracefully</p> </li> </ul> <p>Use Cases: * Cleanup after successful batch data transmission</p> <ul> <li> <p>Manual file management during storage maintenance</p> </li> <li> <p>Recovery process completion in data transmission pipeline</p> </li> </ul> <p>Error Scenarios: * File does not exist (silently ignored)</p> <ul> <li> <p>SD card write protection or filesystem errors</p> </li> <li> <p>Insufficient permissions or corrupted filesystem</p> </li> </ul> <p>Parameters:</p> <ul> <li>filepath: Complete path to the CSV file to be deleted</li> </ul> <p>?&gt; Function silently ignores attempts to delete non-existent files</p> <p>?&gt; All operations are logged to Serial for debugging and monitoring</p> <p>See also: buildRecoveredJsonFromCsv() for file processing before deletion, sendPendingData() in mqtt.cpp for recovery workflow integration</p> <p>Parameters:</p> <ul> <li>const char * filepath</li> </ul> <p>Return type: void</p>"},{"location":"code/arduino/md/storage_8cpp/#source","title":"Source","text":"<pre><code>#include \"storage.h\"\n\n// =============================================================================\n// CSV PROCESSING CONSTANTS\n// =============================================================================\n\nstatic const size_t FOLDER_NAME_BUFFER_SIZE = 8;\nstatic const size_t CURRENT_FILENAME_BUFFER_SIZE = 32;\nstatic const size_t CSV_LINE_BUFFER_SIZE = 64;\nstatic const int MAX_LINES_PER_CSV_FILE = 5;\nstatic char currentFilename[CURRENT_FILENAME_BUFFER_SIZE] = \"\";\nstatic int linesInFile = 0;\n\n// =============================================================================\n// CSV BATCH STORAGE FUNCTIONS\n// =============================================================================\n\nvoid SaveTempToBatchCsv(const DateTime&amp; now, float celsius, int sequence) {\n  char folder[FOLDER_NAME_BUFFER_SIZE];\n  strncpy(folder, CreateFolderName(now), sizeof(folder));\n\n  if (!sd.exists(folder)) {\n    sd.mkdir(folder);\n  }\n\n  // Create new file if needed\n  if (strlen(currentFilename) == 0 || linesInFile &gt;= MAX_LINES_PER_CSV_FILE) {\n    CreateCsvFilename(currentFilename, sizeof(currentFilename), now);\n    linesInFile = 0;\n  }\n\n  // Write the sensor data to the current CSV file\n  File file = sd.open(currentFilename, FILE_WRITE);\n  if (file) {\n    char line[CSV_LINE_BUFFER_SIZE];\n    snprintf(line, sizeof(line), \"%lu,%.5f,%d\\n\", now.unixtime(), celsius, sequence);\n    file.print(line);\n    file.close();\n    linesInFile++;\n    Serial.print(\"Saved CSV fallback: \");\n    Serial.println(currentFilename);\n  } else {\n    Serial.println(\"Failed to write CSV fallback.\");\n  }\n}\n\n// =============================================================================\n// JSON DOCUMENT CREATION FUNCTIONS\n// =============================================================================\n\nvoid BuildJson(JsonDocument&amp; doc, float celsius, const DateTime&amp; now, int sequence) {\n  doc.clear();\n  doc[\"timestamp\"] = now.unixtime();\n  JsonArray val = doc[\"value\"].to&lt;JsonArray&gt;();\n  val.add(celsius);\n  doc[\"sequence\"] = sequence;\n  JsonObject meta = doc[\"meta\"].to&lt;JsonObject&gt;();\n}\n\nvoid BuildRecoveryJsonFromBatchCsv(JsonDocument&amp; doc, const char* filepath, const DateTime&amp; now) {\n  File file = sd.open(filepath, FILE_READ);\n  if (!file) {\n    Serial.print(\"CSV not found: \");\n    Serial.println(filepath);\n    return;\n  }\n\n  doc.clear();\n  doc[\"timestamp\"] = now.unixtime();\n  doc[\"sequence\"] = nullptr;\n  JsonArray val = doc[\"value\"].to&lt;JsonArray&gt;();\n  val.add(nullptr);  // Dummy value for compatibility\n\n  JsonObject meta = doc[\"meta\"].to&lt;JsonObject&gt;();\n  JsonArray tArr = meta[\"t\"].to&lt;JsonArray&gt;();  // timestamp\n  JsonArray vArr = meta[\"v\"].to&lt;JsonArray&gt;();  // value\n  JsonArray sArr = meta[\"s\"].to&lt;JsonArray&gt;();  // sequence\n\n  char line[CSV_LINE_BUFFER_SIZE];\n  int added = 0;\n\n  // Process each line of the CSV file safely\n  while (file.available()) {\n    size_t len = file.fgets(line, sizeof(line));\n    if (len == 0) continue;\n\n     // Parse CSV format: timestamp,temperature,sequence\n     char* p = strtok(line, \",\");\n     if (!p) {\n       Serial.print(\"Malformed CSV line (no timestamp): \");\n       Serial.println(line);\n       continue;\n     }\n     uint32_t ts = atol(p);\n\n     p = strtok(nullptr, \",\");\n     if (!p) {\n       Serial.print(\"Malformed CSV line (no temperature): \");\n       Serial.println(line);\n       continue;\n     }\n     float temp = atof(p);\n\n     p = strtok(nullptr, \",\");\n     if (!p) {\n       Serial.print(\"Malformed CSV line (no sequence): \");\n       Serial.println(line);\n       continue;\n     }\n     int seq = atoi(p);\n\n     tArr.add(ts);\n     vArr.add(temp);\n     sArr.add(seq);\n\n     added++;\n   }\n\n   file.close();\n\n  // Report recovery statistics\n   Serial.print(\"Recovered entries added from CSV: \");\n   Serial.print(String(added));\n   Serial.print(\" (\");\n   Serial.print(filepath);\n   Serial.println(\")\");\n}\n\n// =============================================================================\n// FILE MANAGEMENT FUNCTIONS\n// =============================================================================\n\nvoid DeleteCsvFile(const char* filepath) {\n  if (sd.exists(filepath)) {\n    if (sd.remove(filepath)) {\n      Serial.print(\"Deleted CSV file: \");\n      Serial.println(filepath);\n      if (strcmp(filepath, currentFilename) == 0) {\n        currentFilename[0] = '\\0';\n        linesInFile = 0;\n        Serial.println(\"Reset currentFilename after deletion.\");\n      }\n    } else {\n      Serial.print(\"Failed to delete CSV file: \");\n      Serial.println(filepath);\n    }\n  }\n}\n</code></pre>"},{"location":"code/arduino/md/storage_8h/","title":"Storage 8h","text":""},{"location":"code/arduino/md/storage_8h/#file-storageh","title":"File storage.h","text":"<p>Location: <code>include/storage.h</code></p>"},{"location":"code/arduino/md/storage_8h/#includes","title":"Includes","text":"<ul> <li>platform.h</li> <li> <pre><code>graph LR\n2[\"platform.h\"]\nclick 2 \"platform_8h.md#platform_8h\"\n2 --&gt; 3\n2 --&gt; 4\n2 --&gt; 5\n2 --&gt; 6\n2 --&gt; 7\n2 --&gt; 8\n2 --&gt; 9\n\n1[\"include/storage.h\"]\nclick 1 \"storage_8h.md#storage_8h\"\n1 --&gt; 2\n1 --&gt; 10\n\n7[\"Adafruit_ADT7410.h\"]\n\n3[\"Arduino.h\"]\n\n8[\"ArduinoJson.h\"]\n\n9[\"ArduinoMqttClient.h\"]\n\n6[\"RTClib.h\"]\n\n5[\"SdFat.h\"]\n\n4[\"Wire.h\"]\n\n10[\"cstdio\"]\n</code></pre>"},{"location":"code/arduino/md/storage_8h/#included-by","title":"Included by","text":"<ul> <li>src/core.cpp</li> <li>src/mqtt.cpp</li> <li>src/storage.cpp</li> </ul> <pre><code>graph RL\n1[\"include/storage.h\"]\nclick 1 \"storage_8h.md#storage_8h\"\n2 --&gt; 1\n3 --&gt; 1\n4 --&gt; 1\n\n2[\"src/core.cpp\"]\nclick 2 \"core_8cpp.md#core_8cpp\"\n\n3[\"src/mqtt.cpp\"]\nclick 3 \"mqtt_8cpp.md#mqtt_8cpp\"\n\n4[\"src/storage.cpp\"]\nclick 4 \"storage_8cpp.md#storage_8cpp\"\n</code></pre>"},{"location":"code/arduino/md/storage_8h/#functions","title":"Functions","text":""},{"location":"code/arduino/md/storage_8h/#function-savetemptobatchcsv","title":"Function SaveTempToBatchCsv","text":"<pre><code>void SaveTempToBatchCsv(const DateTime &amp;now, float celsius, int sequence)\n</code></pre> <p>Saves sensor data to CSV files in batch mode during network outages.</p> <p>This function implements intelligent batch CSV storage that creates new files when needed and manages file rotation. It's designed as a fallback mechanism when MQTT transmission is unavailable due to network connectivity issues.</p> <p>Batch Management: * Maintains a static filename for the current active CSV file</p> <ul> <li> <p>Creates new files when the current file reaches maximum line limit</p> </li> <li> <p>Uses timestamp-based filenames for uniqueness and organization</p> </li> </ul> <p>File Organization: * Creates date-based folders automatically (e.g., \"2025/\")</p> <ul> <li> <p>Stores files with minute-precision timestamps in filename</p> </li> <li> <p>Format: \"YYYY/MMDDHHMM.csv\" (e.g., \"2025/08051430.csv\")</p> </li> </ul> <p>Data Format: * CSV format: timestamp,temperature,sequence</p> <ul> <li> <p>Temperature precision: 5 decimal places</p> </li> <li> <p>Unix timestamp for absolute time reference</p> </li> </ul> <p>Parameters:</p> <ul> <li>now: Current timestamp for folder creation and data logging</li> <li>celsius: Temperature reading in Celsius (stored with 5 decimal precision)</li> <li>sequence: Sequence number for the measurement</li> </ul> <p>?&gt; This function uses static variables to maintain state across calls</p> <p>?&gt; Files are automatically rotated after MAX_LINES_PER_CSV_FILE entries</p> <p>See also: createFolderName() for folder naming convention, createFilename() for CSV filename generation</p> <p>Parameters:</p> <ul> <li>const DateTime &amp; now</li> <li>float celsius</li> <li>int sequence</li> </ul> <p>Return type: void</p> <p></p>"},{"location":"code/arduino/md/storage_8h/#function-deletecsvfile","title":"Function DeleteCsvFile","text":"<pre><code>void DeleteCsvFile(const char *filepath)\n</code></pre> <p>Deletes a CSV file from the SD card storage system.</p> <p>This function provides safe file deletion with error handling and logging. It's primarily used during the data recovery process to clean up CSV files after they have been successfully transmitted via MQTT.</p> <p>Safety Features: * Checks file existence before attempting deletion</p> <ul> <li> <p>Provides detailed success/failure logging</p> </li> <li> <p>Handles SD card filesystem errors gracefully</p> </li> </ul> <p>Use Cases: * Cleanup after successful batch data transmission</p> <ul> <li> <p>Manual file management during storage maintenance</p> </li> <li> <p>Recovery process completion in data transmission pipeline</p> </li> </ul> <p>Error Scenarios: * File does not exist (silently ignored)</p> <ul> <li> <p>SD card write protection or filesystem errors</p> </li> <li> <p>Insufficient permissions or corrupted filesystem</p> </li> </ul> <p>Parameters:</p> <ul> <li>filepath: Complete path to the CSV file to be deleted</li> </ul> <p>?&gt; Function silently ignores attempts to delete non-existent files</p> <p>?&gt; All operations are logged to Serial for debugging and monitoring</p> <p>See also: buildRecoveredJsonFromCsv() for file processing before deletion, sendPendingData() in mqtt.cpp for recovery workflow integration</p> <p>Parameters:</p> <ul> <li>const char * filepath</li> </ul> <p>Return type: void</p> <p></p>"},{"location":"code/arduino/md/storage_8h/#function-buildjson","title":"Function BuildJson","text":"<pre><code>void BuildJson(JsonDocument &amp;doc, float celsius, const DateTime &amp;now, int sequence)\n</code></pre> <p>Builds a JSON document from live sensor data for real-time transmission.</p> <p>This function creates a properly formatted JSON document containing current sensor readings for immediate MQTT transmission. The JSON structure follows a standardized format for IoT temperature monitoring systems with metadata support.</p> <p>JSON Structure: <code>json { \"timestamp\": 1737024000, \"value\": [25.12345], \"sequence\": 42, \"meta\": {} }</code></p> <p>Data Precision: * Temperature: 5 decimal places for high precision monitoring</p> <ul> <li> <p>Timestamp: Unix timestamp (seconds since epoch)</p> </li> <li> <p>Sequence: Integer measurement counter</p> </li> <li> <p>Value array: Supports multiple sensor readings</p> </li> </ul> <p>Performance Considerations: * Modifies existing JsonDocument for memory efficiency</p> <ul> <li> <p>Clears previous data to prevent accumulation</p> </li> <li> <p>Optimized for embedded systems with limited memory</p> </li> </ul> <p>Parameters:</p> <ul> <li>doc: JsonDocument reference to populate (cleared before use)</li> <li>celsius: Temperature reading in Celsius (stored with 5 decimal precision)</li> <li>now: Current timestamp for the measurement</li> <li>sequence: Sequence number for the measurement</li> </ul> <p>?&gt; The function clears the document before populating new data</p> <p>See also: buildRecoveredJsonFromCsv() for batch recovery JSON format, saveToCsvBatch() for CSV fallback storage format</p> <p>Parameters:</p> <ul> <li>JsonDocument &amp; doc</li> <li>float celsius</li> <li>const DateTime &amp; now</li> <li>int sequence</li> </ul> <p>Return type: void</p> <p></p>"},{"location":"code/arduino/md/storage_8h/#function-buildrecoveryjsonfrombatchcsv","title":"Function BuildRecoveryJsonFromBatchCsv","text":"<pre><code>void BuildRecoveryJsonFromBatchCsv(JsonDocument &amp;doc, const char *filepath, const DateTime &amp;now)\n</code></pre> <p>Builds a JSON document from CSV batch data for recovery transmission.</p> <p>This function processes stored CSV data files and converts them into JSON format for batch transmission when network connectivity is restored. It handles multiple measurements in a metadata array structure for efficient network utilization during recovery operations.</p> <p>Recovery JSON Structure: <code>json { \"timestamp\": 1737024000, \"sequence\": null, \"value\": [null], \"meta\": { \"t\": [1737024000, 1737024060, ..], \"v\": [25.12345, 25.12567, ...], \"s\": [42, 43, ...] } }</code></p> <p>Processing Logic: * Reads each line from the specified CSV file using secure fgets()</p> <ul> <li> <p>Parses CSV format: timestamp,temperature,sequence using strtok()</p> </li> <li> <p>Creates individual JSON objects for each measurement in meta array</p> </li> <li> <p>Uses null placeholders for top-level value and sequence fields</p> </li> </ul> <p>Error Handling: * Returns early if file cannot be opened</p> <ul> <li> <p>Skips malformed lines during CSV parsing</p> </li> <li> <p>Continues processing even if some lines fail</p> </li> <li> <p>Reports total number of successfully recovered entries</p> </li> </ul> <p>Parameters:</p> <ul> <li>doc: JsonDocument reference to populate (cleared before use)</li> <li>filepath: Path to the CSV file containing batch sensor data</li> <li>now: Current timestamp for the recovery operation</li> </ul> <p>?&gt; Uses strtok() for safe CSV parsing with buffer protection</p> <p>?&gt; Clears the document before populating new batch data</p> <p>See also: saveToCsvBatch() for CSV storage format details, sendPendingData() in mqtt.cpp for recovery transmission</p> <p>Parameters:</p> <ul> <li>JsonDocument &amp; doc</li> <li>const char * filepath</li> <li>const DateTime &amp; now</li> </ul> <p>Return type: void</p> <p></p>"},{"location":"code/arduino/md/storage_8h/#function-createfoldername","title":"Function CreateFolderName","text":"<pre><code>const char * CreateFolderName(const DateTime &amp;now)\n</code></pre> <p>Parameters:</p> <ul> <li>const DateTime &amp; now</li> </ul> <p>Return type: const char *</p> <p></p>"},{"location":"code/arduino/md/storage_8h/#function-createcsvfilename","title":"Function CreateCsvFilename","text":"<pre><code>void CreateCsvFilename(char *buffer, size_t bufferSize, const DateTime &amp;now)\n</code></pre> <p>Parameters:</p> <ul> <li>char * buffer</li> <li>size_t bufferSize</li> <li>const DateTime &amp; now</li> </ul> <p>Return type: void</p>"},{"location":"code/arduino/md/storage_8h/#source","title":"Source","text":"<pre><code>#pragma once\n\n#include \"platform.h\"\n#include &lt;cstdio&gt; \n\nvoid SaveTempToBatchCsv(const DateTime&amp; now, float celsius, int sequence);\nvoid DeleteCsvFile(const char* filepath);\n\nvoid BuildJson(JsonDocument&amp; doc, float celsius, const DateTime&amp; now, int sequence);\nvoid BuildRecoveryJsonFromBatchCsv(JsonDocument&amp; doc, const char* filepath, const DateTime&amp; now);\n\n// --- Inline helper functions ---\ninline const char* CreateFolderName(const DateTime&amp; now) {\n    static char folderName[8];\n    std::snprintf(folderName, sizeof(folderName), \"%04d\", now.year());\n    return folderName;\n}\n\ninline void CreateCsvFilename(char* buffer, size_t bufferSize, const DateTime&amp; now) {\n    std::snprintf(buffer, bufferSize, \"%s/%02d%02d%02d%02d.csv\",\n                  CreateFolderName(now),\n                  now.month(), now.day(), now.hour(), now.minute());\n}\n</code></pre>"},{"location":"code/arduino/md/struct_contents/","title":"Structures","text":"<ul> <li>MockDateTime</li> </ul>"},{"location":"code/arduino/md/struct_index/","title":"Index of Structures","text":""},{"location":"code/arduino/md/struct_index/#m","title":"M","text":"<ul> <li>MockDateTime</li> </ul>"},{"location":"code/arduino/md/struct_mock_date_time/","title":"Struct mock date time","text":""},{"location":"code/arduino/md/struct_mock_date_time/#structure-mockdatetime","title":"Structure MockDateTime","text":"<p>Definition: <code>include/mock\\_datetime.h</code> (line 4)</p>"},{"location":"code/arduino/md/struct_mock_date_time/#members","title":"Members","text":"<ul> <li>_day</li> <li>_hour</li> <li>_minute</li> <li>_month</li> <li>_second</li> <li>_year</li> <li>day</li> <li>hour</li> <li>minute</li> <li>MockDateTime</li> <li>month</li> <li>second</li> <li>unixtime</li> <li>year</li> </ul>"},{"location":"code/arduino/md/struct_mock_date_time/#public-attributes","title":"Public attributes","text":""},{"location":"code/arduino/md/struct_mock_date_time/#variable-_year","title":"Variable _year","text":"<p>Definition: <code>include/mock\\_datetime.h</code> (line 5)</p> <pre><code>int MockDateTime::_year\n</code></pre> <p>Type: int</p> <p>TODO:</p> <ul> <li>qualifiedname {\"type\":\"element\",\"name\":\"qualifiedname\",\"attributes\":{},\"children\":[{\"type\":\"text\",\"text\":\"MockDateTime::_year\"}]}</li> </ul> <p></p>"},{"location":"code/arduino/md/struct_mock_date_time/#variable-_month","title":"Variable _month","text":"<p>Definition: <code>include/mock\\_datetime.h</code> (line 5)</p> <pre><code>int MockDateTime::_month\n</code></pre> <p>Type: int</p> <p>TODO:</p> <ul> <li>qualifiedname {\"type\":\"element\",\"name\":\"qualifiedname\",\"attributes\":{},\"children\":[{\"type\":\"text\",\"text\":\"MockDateTime::_month\"}]}</li> </ul> <p></p>"},{"location":"code/arduino/md/struct_mock_date_time/#variable-_day","title":"Variable _day","text":"<p>Definition: <code>include/mock\\_datetime.h</code> (line 5)</p> <pre><code>int MockDateTime::_day\n</code></pre> <p>Type: int</p> <p>TODO:</p> <ul> <li>qualifiedname {\"type\":\"element\",\"name\":\"qualifiedname\",\"attributes\":{},\"children\":[{\"type\":\"text\",\"text\":\"MockDateTime::_day\"}]}</li> </ul> <p></p>"},{"location":"code/arduino/md/struct_mock_date_time/#variable-_hour","title":"Variable _hour","text":"<p>Definition: <code>include/mock\\_datetime.h</code> (line 5)</p> <pre><code>int MockDateTime::_hour\n</code></pre> <p>Type: int</p> <p>TODO:</p> <ul> <li>qualifiedname {\"type\":\"element\",\"name\":\"qualifiedname\",\"attributes\":{},\"children\":[{\"type\":\"text\",\"text\":\"MockDateTime::_hour\"}]}</li> </ul> <p></p>"},{"location":"code/arduino/md/struct_mock_date_time/#variable-_minute","title":"Variable _minute","text":"<p>Definition: <code>include/mock\\_datetime.h</code> (line 5)</p> <pre><code>int MockDateTime::_minute\n</code></pre> <p>Type: int</p> <p>TODO:</p> <ul> <li>qualifiedname {\"type\":\"element\",\"name\":\"qualifiedname\",\"attributes\":{},\"children\":[{\"type\":\"text\",\"text\":\"MockDateTime::_minute\"}]}</li> </ul> <p></p>"},{"location":"code/arduino/md/struct_mock_date_time/#variable-_second","title":"Variable _second","text":"<p>Definition: <code>include/mock\\_datetime.h</code> (line 5)</p> <pre><code>int MockDateTime::_second\n</code></pre> <p>Type: int</p> <p>TODO:</p> <ul> <li>qualifiedname {\"type\":\"element\",\"name\":\"qualifiedname\",\"attributes\":{},\"children\":[{\"type\":\"text\",\"text\":\"MockDateTime::_second\"}]}</li> </ul>"},{"location":"code/arduino/md/struct_mock_date_time/#public-functions","title":"Public functions","text":""},{"location":"code/arduino/md/struct_mock_date_time/#function-mockdatetime","title":"Function MockDateTime","text":"<pre><code>MockDateTime::MockDateTime(int year, int month, int day, int hour, int minute, int second=0)\n</code></pre> <p>Parameters:</p> <ul> <li>int year</li> <li>int month</li> <li>int day</li> <li>int hour</li> <li>int minute</li> <li>int second = 0 </li> </ul> <p>Return type: </p> <p>TODO:</p> <ul> <li>qualifiedname {\"type\":\"element\",\"name\":\"qualifiedname\",\"attributes\":{},\"children\":[{\"type\":\"text\",\"text\":\"MockDateTime::MockDateTime\"}]}</li> </ul> <p></p>"},{"location":"code/arduino/md/struct_mock_date_time/#function-year","title":"Function year","text":"<pre><code>int MockDateTime::year() const\n</code></pre> <p>Return type: int</p> <p>TODO:</p> <ul> <li>qualifiedname {\"type\":\"element\",\"name\":\"qualifiedname\",\"attributes\":{},\"children\":[{\"type\":\"text\",\"text\":\"MockDateTime::year\"}]}</li> </ul> <p></p>"},{"location":"code/arduino/md/struct_mock_date_time/#function-month","title":"Function month","text":"<pre><code>int MockDateTime::month() const\n</code></pre> <p>Return type: int</p> <p>TODO:</p> <ul> <li>qualifiedname {\"type\":\"element\",\"name\":\"qualifiedname\",\"attributes\":{},\"children\":[{\"type\":\"text\",\"text\":\"MockDateTime::month\"}]}</li> </ul> <p></p>"},{"location":"code/arduino/md/struct_mock_date_time/#function-day","title":"Function day","text":"<pre><code>int MockDateTime::day() const\n</code></pre> <p>Return type: int</p> <p>TODO:</p> <ul> <li>qualifiedname {\"type\":\"element\",\"name\":\"qualifiedname\",\"attributes\":{},\"children\":[{\"type\":\"text\",\"text\":\"MockDateTime::day\"}]}</li> </ul> <p></p>"},{"location":"code/arduino/md/struct_mock_date_time/#function-hour","title":"Function hour","text":"<pre><code>int MockDateTime::hour() const\n</code></pre> <p>Return type: int</p> <p>TODO:</p> <ul> <li>qualifiedname {\"type\":\"element\",\"name\":\"qualifiedname\",\"attributes\":{},\"children\":[{\"type\":\"text\",\"text\":\"MockDateTime::hour\"}]}</li> </ul> <p></p>"},{"location":"code/arduino/md/struct_mock_date_time/#function-minute","title":"Function minute","text":"<pre><code>int MockDateTime::minute() const\n</code></pre> <p>Return type: int</p> <p>TODO:</p> <ul> <li>qualifiedname {\"type\":\"element\",\"name\":\"qualifiedname\",\"attributes\":{},\"children\":[{\"type\":\"text\",\"text\":\"MockDateTime::minute\"}]}</li> </ul> <p></p>"},{"location":"code/arduino/md/struct_mock_date_time/#function-second","title":"Function second","text":"<pre><code>int MockDateTime::second() const\n</code></pre> <p>Return type: int</p> <p>TODO:</p> <ul> <li>qualifiedname {\"type\":\"element\",\"name\":\"qualifiedname\",\"attributes\":{},\"children\":[{\"type\":\"text\",\"text\":\"MockDateTime::second\"}]}</li> </ul> <p></p>"},{"location":"code/arduino/md/struct_mock_date_time/#function-unixtime","title":"Function unixtime","text":"<pre><code>uint32_t MockDateTime::unixtime() const\n</code></pre> <p>Return type: uint32_t</p> <p>TODO:</p> <ul> <li>qualifiedname {\"type\":\"element\",\"name\":\"qualifiedname\",\"attributes\":{},\"children\":[{\"type\":\"text\",\"text\":\"MockDateTime::unixtime\"}]}</li> </ul>"},{"location":"code/frontend/","title":"Overview","text":"<p>isopruefi-frontend v1.0.0</p>"},{"location":"code/frontend/#isopruefi-frontend-v100","title":"isopruefi-frontend v1.0.0","text":""},{"location":"code/frontend/#modules","title":"Modules","text":"<ul> <li>api/api-client</li> <li>api/clients</li> <li>App</li> <li>auth/AuthForm</li> <li>auth/SignIn</li> <li>auth/SignUp</li> <li>components/Navbar</li> <li>components/ProtectedRoute</li> <li>components/Weather</li> <li>main</li> <li>pages/AdminPage</li> <li>pages/UserPage</li> <li>pages/Welcome</li> <li>utils/authApi</li> <li>utils/config</li> <li>utils/tokenHelpers</li> </ul>"},{"location":"code/frontend/App/","title":"Index","text":"<p>isopruefi-frontend v1.0.0</p> <p>isopruefi-frontend / App</p>"},{"location":"code/frontend/App/#app","title":"App","text":""},{"location":"code/frontend/App/#functions","title":"Functions","text":"<ul> <li>default</li> </ul>"},{"location":"code/frontend/App/functions/default/","title":"Default","text":"<p>isopruefi-frontend v1.0.0</p> <p>isopruefi-frontend / App / default</p>"},{"location":"code/frontend/App/functions/default/#function-default","title":"Function: default()","text":"<p>default(): <code>Element</code></p> <p>Defined in: App.tsx:12</p>"},{"location":"code/frontend/App/functions/default/#returns","title":"Returns","text":"<p><code>Element</code></p>"},{"location":"code/frontend/api/api-client/","title":"Index","text":"<p>isopruefi-frontend v1.0.0</p> <p>isopruefi-frontend / api/api-client</p>"},{"location":"code/frontend/api/api-client/#apiapi-client","title":"api/api-client","text":""},{"location":"code/frontend/api/api-client/#classes","title":"Classes","text":"<ul> <li>ApiException</li> <li>ApiUser</li> <li>AuthenticationClient</li> <li>ChangePassword</li> <li>IdentityUser</li> <li>IdentityUserOfString</li> <li>JwtToken</li> <li>Login</li> <li>ProblemDetails</li> <li>Register</li> <li>TempClient</li> <li>TemperatureData</li> <li>TemperatureDataClient</li> <li>TemperatureDataOverview</li> <li>TopicClient</li> <li>TopicSetting</li> <li>UserInfoClient</li> </ul>"},{"location":"code/frontend/api/api-client/#interfaces","title":"Interfaces","text":"<ul> <li>FileResponse</li> <li>IApiUser</li> <li>IChangePassword</li> <li>IIdentityUser</li> <li>IIdentityUserOfString</li> <li>IJwtToken</li> <li>ILogin</li> <li>IProblemDetails</li> <li>IRegister</li> <li>ITemperatureData</li> <li>ITemperatureDataOverview</li> <li>ITopicSetting</li> </ul>"},{"location":"code/frontend/api/api-client/classes/ApiException/","title":"ApiException","text":"<p>isopruefi-frontend v1.0.0</p> <p>isopruefi-frontend / api/api-client / ApiException</p>"},{"location":"code/frontend/api/api-client/classes/ApiException/#class-apiexception","title":"Class: ApiException","text":"<p>Defined in: api/api-client.ts:1555</p>"},{"location":"code/frontend/api/api-client/classes/ApiException/#extends","title":"Extends","text":"<ul> <li><code>Error</code></li> </ul>"},{"location":"code/frontend/api/api-client/classes/ApiException/#constructors","title":"Constructors","text":""},{"location":"code/frontend/api/api-client/classes/ApiException/#constructor","title":"Constructor","text":"<p>new ApiException(<code>message</code>, <code>status</code>, <code>response</code>, <code>headers</code>, <code>result</code>): <code>ApiException</code></p> <p>Defined in: api/api-client.ts:1562</p>"},{"location":"code/frontend/api/api-client/classes/ApiException/#parameters","title":"Parameters","text":""},{"location":"code/frontend/api/api-client/classes/ApiException/#message","title":"message","text":"<p><code>string</code></p>"},{"location":"code/frontend/api/api-client/classes/ApiException/#status","title":"status","text":"<p><code>number</code></p>"},{"location":"code/frontend/api/api-client/classes/ApiException/#response","title":"response","text":"<p><code>string</code></p>"},{"location":"code/frontend/api/api-client/classes/ApiException/#headers","title":"headers","text":""},{"location":"code/frontend/api/api-client/classes/ApiException/#result","title":"result","text":"<p><code>any</code></p>"},{"location":"code/frontend/api/api-client/classes/ApiException/#returns","title":"Returns","text":"<p><code>ApiException</code></p>"},{"location":"code/frontend/api/api-client/classes/ApiException/#overrides","title":"Overrides","text":"<p><code>Error.constructor</code></p>"},{"location":"code/frontend/api/api-client/classes/ApiException/#properties","title":"Properties","text":""},{"location":"code/frontend/api/api-client/classes/ApiException/#headers_1","title":"headers","text":"<p>headers: <code>object</code></p> <p>Defined in: api/api-client.ts:1559</p>"},{"location":"code/frontend/api/api-client/classes/ApiException/#index-signature","title":"Index Signature","text":"<p>[<code>key</code>: <code>string</code>]: <code>any</code></p>"},{"location":"code/frontend/api/api-client/classes/ApiException/#isapiexception","title":"isApiException","text":"<p><code>protected</code> isApiException: <code>boolean</code> = <code>true</code></p> <p>Defined in: api/api-client.ts:1572</p>"},{"location":"code/frontend/api/api-client/classes/ApiException/#message_1","title":"message","text":"<p>message: <code>string</code></p> <p>Defined in: api/api-client.ts:1556</p>"},{"location":"code/frontend/api/api-client/classes/ApiException/#overrides_1","title":"Overrides","text":"<p><code>Error.message</code></p>"},{"location":"code/frontend/api/api-client/classes/ApiException/#response_1","title":"response","text":"<p>response: <code>string</code></p> <p>Defined in: api/api-client.ts:1558</p>"},{"location":"code/frontend/api/api-client/classes/ApiException/#result_1","title":"result","text":"<p>result: <code>any</code></p> <p>Defined in: api/api-client.ts:1560</p>"},{"location":"code/frontend/api/api-client/classes/ApiException/#status_1","title":"status","text":"<p>status: <code>number</code></p> <p>Defined in: api/api-client.ts:1557</p>"},{"location":"code/frontend/api/api-client/classes/ApiException/#methods","title":"Methods","text":""},{"location":"code/frontend/api/api-client/classes/ApiException/#isapiexception_1","title":"isApiException()","text":"<p><code>static</code> isApiException(<code>obj</code>): <code>obj is ApiException</code></p> <p>Defined in: api/api-client.ts:1574</p>"},{"location":"code/frontend/api/api-client/classes/ApiException/#parameters_1","title":"Parameters","text":""},{"location":"code/frontend/api/api-client/classes/ApiException/#obj","title":"obj","text":"<p><code>any</code></p>"},{"location":"code/frontend/api/api-client/classes/ApiException/#returns_1","title":"Returns","text":"<p><code>obj is ApiException</code></p>"},{"location":"code/frontend/api/api-client/classes/ApiUser/","title":"ApiUser","text":"<p>isopruefi-frontend v1.0.0</p> <p>isopruefi-frontend / api/api-client / ApiUser</p>"},{"location":"code/frontend/api/api-client/classes/ApiUser/#class-apiuser","title":"Class: ApiUser","text":"<p>Defined in: api/api-client.ts:1520</p> <p>Represents an application user in the system</p>"},{"location":"code/frontend/api/api-client/classes/ApiUser/#extends","title":"Extends","text":"<ul> <li><code>IdentityUser</code></li> </ul>"},{"location":"code/frontend/api/api-client/classes/ApiUser/#implements","title":"Implements","text":"<ul> <li><code>IApiUser</code></li> </ul>"},{"location":"code/frontend/api/api-client/classes/ApiUser/#constructors","title":"Constructors","text":""},{"location":"code/frontend/api/api-client/classes/ApiUser/#constructor","title":"Constructor","text":"<p>new ApiUser(<code>data?</code>): <code>ApiUser</code></p> <p>Defined in: api/api-client.ts:1522</p>"},{"location":"code/frontend/api/api-client/classes/ApiUser/#parameters","title":"Parameters","text":""},{"location":"code/frontend/api/api-client/classes/ApiUser/#data","title":"data?","text":"<p><code>IApiUser</code></p>"},{"location":"code/frontend/api/api-client/classes/ApiUser/#returns","title":"Returns","text":"<p><code>ApiUser</code></p>"},{"location":"code/frontend/api/api-client/classes/ApiUser/#overrides","title":"Overrides","text":"<p><code>IdentityUser</code>.<code>constructor</code></p>"},{"location":"code/frontend/api/api-client/classes/ApiUser/#properties","title":"Properties","text":""},{"location":"code/frontend/api/api-client/classes/ApiUser/#accessfailedcount","title":"accessFailedCount?","text":"<p><code>optional</code> accessFailedCount: <code>number</code></p> <p>Defined in: api/api-client.ts:1397</p> <p>Gets or sets the number of failed login attempts for the current user.</p>"},{"location":"code/frontend/api/api-client/classes/ApiUser/#implementation-of","title":"Implementation of","text":"<p><code>IApiUser</code>.<code>accessFailedCount</code></p>"},{"location":"code/frontend/api/api-client/classes/ApiUser/#inherited-from","title":"Inherited from","text":"<p><code>IdentityUser</code>.<code>accessFailedCount</code></p>"},{"location":"code/frontend/api/api-client/classes/ApiUser/#concurrencystamp","title":"concurrencyStamp?","text":"<p><code>optional</code> concurrencyStamp: <code>string</code></p> <p>Defined in: api/api-client.ts:1385</p> <p>A random value that must change whenever a user is persisted to the store</p>"},{"location":"code/frontend/api/api-client/classes/ApiUser/#implementation-of_1","title":"Implementation of","text":"<p><code>IApiUser</code>.<code>concurrencyStamp</code></p>"},{"location":"code/frontend/api/api-client/classes/ApiUser/#inherited-from_1","title":"Inherited from","text":"<p><code>IdentityUser</code>.<code>concurrencyStamp</code></p>"},{"location":"code/frontend/api/api-client/classes/ApiUser/#email","title":"email?","text":"<p><code>optional</code> email: <code>string</code></p> <p>Defined in: api/api-client.ts:1375</p> <p>Gets or sets the email address for this user.</p>"},{"location":"code/frontend/api/api-client/classes/ApiUser/#implementation-of_2","title":"Implementation of","text":"<p><code>IApiUser</code>.<code>email</code></p>"},{"location":"code/frontend/api/api-client/classes/ApiUser/#inherited-from_2","title":"Inherited from","text":"<p><code>IdentityUser</code>.<code>email</code></p>"},{"location":"code/frontend/api/api-client/classes/ApiUser/#emailconfirmed","title":"emailConfirmed?","text":"<p><code>optional</code> emailConfirmed: <code>boolean</code></p> <p>Defined in: api/api-client.ts:1379</p> <p>Gets or sets a flag indicating if a user has confirmed their email address.</p>"},{"location":"code/frontend/api/api-client/classes/ApiUser/#implementation-of_3","title":"Implementation of","text":"<p><code>IApiUser</code>.<code>emailConfirmed</code></p>"},{"location":"code/frontend/api/api-client/classes/ApiUser/#inherited-from_3","title":"Inherited from","text":"<p><code>IdentityUser</code>.<code>emailConfirmed</code></p>"},{"location":"code/frontend/api/api-client/classes/ApiUser/#id","title":"id?","text":"<p><code>optional</code> id: <code>string</code></p> <p>Defined in: api/api-client.ts:1369</p> <p>Gets or sets the primary key for this user.</p>"},{"location":"code/frontend/api/api-client/classes/ApiUser/#implementation-of_4","title":"Implementation of","text":"<p><code>IApiUser</code>.<code>id</code></p>"},{"location":"code/frontend/api/api-client/classes/ApiUser/#inherited-from_4","title":"Inherited from","text":"<p><code>IdentityUser</code>.<code>id</code></p>"},{"location":"code/frontend/api/api-client/classes/ApiUser/#lockoutenabled","title":"lockoutEnabled?","text":"<p><code>optional</code> lockoutEnabled: <code>boolean</code></p> <p>Defined in: api/api-client.ts:1395</p> <p>Gets or sets a flag indicating if the user could be locked out.</p>"},{"location":"code/frontend/api/api-client/classes/ApiUser/#implementation-of_5","title":"Implementation of","text":"<p><code>IApiUser</code>.<code>lockoutEnabled</code></p>"},{"location":"code/frontend/api/api-client/classes/ApiUser/#inherited-from_5","title":"Inherited from","text":"<p><code>IdentityUser</code>.<code>lockoutEnabled</code></p>"},{"location":"code/frontend/api/api-client/classes/ApiUser/#lockoutend","title":"lockoutEnd?","text":"<p><code>optional</code> lockoutEnd: <code>Date</code></p> <p>Defined in: api/api-client.ts:1393</p> <p>Gets or sets the date and time, in UTC, when any user lockout ends.</p>"},{"location":"code/frontend/api/api-client/classes/ApiUser/#implementation-of_6","title":"Implementation of","text":"<p><code>IApiUser</code>.<code>lockoutEnd</code></p>"},{"location":"code/frontend/api/api-client/classes/ApiUser/#inherited-from_6","title":"Inherited from","text":"<p><code>IdentityUser</code>.<code>lockoutEnd</code></p>"},{"location":"code/frontend/api/api-client/classes/ApiUser/#normalizedemail","title":"normalizedEmail?","text":"<p><code>optional</code> normalizedEmail: <code>string</code></p> <p>Defined in: api/api-client.ts:1377</p> <p>Gets or sets the normalized email address for this user.</p>"},{"location":"code/frontend/api/api-client/classes/ApiUser/#implementation-of_7","title":"Implementation of","text":"<p><code>IApiUser</code>.<code>normalizedEmail</code></p>"},{"location":"code/frontend/api/api-client/classes/ApiUser/#inherited-from_7","title":"Inherited from","text":"<p><code>IdentityUser</code>.<code>normalizedEmail</code></p>"},{"location":"code/frontend/api/api-client/classes/ApiUser/#normalizedusername","title":"normalizedUserName?","text":"<p><code>optional</code> normalizedUserName: <code>string</code></p> <p>Defined in: api/api-client.ts:1373</p> <p>Gets or sets the normalized user name for this user.</p>"},{"location":"code/frontend/api/api-client/classes/ApiUser/#implementation-of_8","title":"Implementation of","text":"<p><code>IApiUser</code>.<code>normalizedUserName</code></p>"},{"location":"code/frontend/api/api-client/classes/ApiUser/#inherited-from_8","title":"Inherited from","text":"<p><code>IdentityUser</code>.<code>normalizedUserName</code></p>"},{"location":"code/frontend/api/api-client/classes/ApiUser/#passwordhash","title":"passwordHash?","text":"<p><code>optional</code> passwordHash: <code>string</code></p> <p>Defined in: api/api-client.ts:1381</p> <p>Gets or sets a salted and hashed representation of the password for this user.</p>"},{"location":"code/frontend/api/api-client/classes/ApiUser/#implementation-of_9","title":"Implementation of","text":"<p><code>IApiUser</code>.<code>passwordHash</code></p>"},{"location":"code/frontend/api/api-client/classes/ApiUser/#inherited-from_9","title":"Inherited from","text":"<p><code>IdentityUser</code>.<code>passwordHash</code></p>"},{"location":"code/frontend/api/api-client/classes/ApiUser/#phonenumber","title":"phoneNumber?","text":"<p><code>optional</code> phoneNumber: <code>string</code></p> <p>Defined in: api/api-client.ts:1387</p> <p>Gets or sets a telephone number for the user.</p>"},{"location":"code/frontend/api/api-client/classes/ApiUser/#implementation-of_10","title":"Implementation of","text":"<p><code>IApiUser</code>.<code>phoneNumber</code></p>"},{"location":"code/frontend/api/api-client/classes/ApiUser/#inherited-from_10","title":"Inherited from","text":"<p><code>IdentityUser</code>.<code>phoneNumber</code></p>"},{"location":"code/frontend/api/api-client/classes/ApiUser/#phonenumberconfirmed","title":"phoneNumberConfirmed?","text":"<p><code>optional</code> phoneNumberConfirmed: <code>boolean</code></p> <p>Defined in: api/api-client.ts:1389</p> <p>Gets or sets a flag indicating if a user has confirmed their telephone address.</p>"},{"location":"code/frontend/api/api-client/classes/ApiUser/#implementation-of_11","title":"Implementation of","text":"<p><code>IApiUser</code>.<code>phoneNumberConfirmed</code></p>"},{"location":"code/frontend/api/api-client/classes/ApiUser/#inherited-from_11","title":"Inherited from","text":"<p><code>IdentityUser</code>.<code>phoneNumberConfirmed</code></p>"},{"location":"code/frontend/api/api-client/classes/ApiUser/#securitystamp","title":"securityStamp?","text":"<p><code>optional</code> securityStamp: <code>string</code></p> <p>Defined in: api/api-client.ts:1383</p> <p>A random value that must change whenever a users credentials change (password changed, login removed)</p>"},{"location":"code/frontend/api/api-client/classes/ApiUser/#implementation-of_12","title":"Implementation of","text":"<p><code>IApiUser</code>.<code>securityStamp</code></p>"},{"location":"code/frontend/api/api-client/classes/ApiUser/#inherited-from_12","title":"Inherited from","text":"<p><code>IdentityUser</code>.<code>securityStamp</code></p>"},{"location":"code/frontend/api/api-client/classes/ApiUser/#twofactorenabled","title":"twoFactorEnabled?","text":"<p><code>optional</code> twoFactorEnabled: <code>boolean</code></p> <p>Defined in: api/api-client.ts:1391</p> <p>Gets or sets a flag indicating if two factor authentication is enabled for this user.</p>"},{"location":"code/frontend/api/api-client/classes/ApiUser/#implementation-of_13","title":"Implementation of","text":"<p><code>IApiUser</code>.<code>twoFactorEnabled</code></p>"},{"location":"code/frontend/api/api-client/classes/ApiUser/#inherited-from_13","title":"Inherited from","text":"<p><code>IdentityUser</code>.<code>twoFactorEnabled</code></p>"},{"location":"code/frontend/api/api-client/classes/ApiUser/#username","title":"userName?","text":"<p><code>optional</code> userName: <code>string</code></p> <p>Defined in: api/api-client.ts:1371</p> <p>Gets or sets the user name for this user.</p>"},{"location":"code/frontend/api/api-client/classes/ApiUser/#implementation-of_14","title":"Implementation of","text":"<p><code>IApiUser</code>.<code>userName</code></p>"},{"location":"code/frontend/api/api-client/classes/ApiUser/#inherited-from_14","title":"Inherited from","text":"<p><code>IdentityUser</code>.<code>userName</code></p>"},{"location":"code/frontend/api/api-client/classes/ApiUser/#methods","title":"Methods","text":""},{"location":"code/frontend/api/api-client/classes/ApiUser/#init","title":"init()","text":"<p>init(<code>_data?</code>): <code>void</code></p> <p>Defined in: api/api-client.ts:1526</p>"},{"location":"code/frontend/api/api-client/classes/ApiUser/#parameters_1","title":"Parameters","text":""},{"location":"code/frontend/api/api-client/classes/ApiUser/#_data","title":"_data?","text":"<p><code>any</code></p>"},{"location":"code/frontend/api/api-client/classes/ApiUser/#returns_1","title":"Returns","text":"<p><code>void</code></p>"},{"location":"code/frontend/api/api-client/classes/ApiUser/#overrides_1","title":"Overrides","text":"<p><code>IdentityUser</code>.<code>init</code></p>"},{"location":"code/frontend/api/api-client/classes/ApiUser/#tojson","title":"toJSON()","text":"<p>toJSON(<code>data?</code>): <code>any</code></p> <p>Defined in: api/api-client.ts:1537</p>"},{"location":"code/frontend/api/api-client/classes/ApiUser/#parameters_2","title":"Parameters","text":""},{"location":"code/frontend/api/api-client/classes/ApiUser/#data_1","title":"data?","text":"<p><code>any</code></p>"},{"location":"code/frontend/api/api-client/classes/ApiUser/#returns_2","title":"Returns","text":"<p><code>any</code></p>"},{"location":"code/frontend/api/api-client/classes/ApiUser/#overrides_2","title":"Overrides","text":"<p><code>IdentityUser</code>.<code>toJSON</code></p>"},{"location":"code/frontend/api/api-client/classes/ApiUser/#fromjs","title":"fromJS()","text":"<p><code>static</code> fromJS(<code>data</code>): <code>ApiUser</code></p> <p>Defined in: api/api-client.ts:1530</p>"},{"location":"code/frontend/api/api-client/classes/ApiUser/#parameters_3","title":"Parameters","text":""},{"location":"code/frontend/api/api-client/classes/ApiUser/#data_2","title":"data","text":"<p><code>any</code></p>"},{"location":"code/frontend/api/api-client/classes/ApiUser/#returns_3","title":"Returns","text":"<p><code>ApiUser</code></p>"},{"location":"code/frontend/api/api-client/classes/ApiUser/#overrides_3","title":"Overrides","text":"<p><code>IdentityUser</code>.<code>fromJS</code></p>"},{"location":"code/frontend/api/api-client/classes/AuthenticationClient/","title":"AuthenticationClient","text":"<p>isopruefi-frontend v1.0.0</p> <p>isopruefi-frontend / api/api-client / AuthenticationClient</p>"},{"location":"code/frontend/api/api-client/classes/AuthenticationClient/#class-authenticationclient","title":"Class: AuthenticationClient","text":"<p>Defined in: api/api-client.ts:11</p>"},{"location":"code/frontend/api/api-client/classes/AuthenticationClient/#constructors","title":"Constructors","text":""},{"location":"code/frontend/api/api-client/classes/AuthenticationClient/#constructor","title":"Constructor","text":"<p>new AuthenticationClient(<code>baseUrl?</code>, <code>http?</code>): <code>AuthenticationClient</code></p> <p>Defined in: api/api-client.ts:16</p>"},{"location":"code/frontend/api/api-client/classes/AuthenticationClient/#parameters","title":"Parameters","text":""},{"location":"code/frontend/api/api-client/classes/AuthenticationClient/#baseurl","title":"baseUrl?","text":"<p><code>string</code></p>"},{"location":"code/frontend/api/api-client/classes/AuthenticationClient/#http","title":"http?","text":""},{"location":"code/frontend/api/api-client/classes/AuthenticationClient/#fetch","title":"fetch","text":""},{"location":"code/frontend/api/api-client/classes/AuthenticationClient/#returns","title":"Returns","text":"<p><code>AuthenticationClient</code></p>"},{"location":"code/frontend/api/api-client/classes/AuthenticationClient/#properties","title":"Properties","text":""},{"location":"code/frontend/api/api-client/classes/AuthenticationClient/#jsonparsereviver","title":"jsonParseReviver","text":"<p><code>protected</code> jsonParseReviver: <code>undefined</code> | (<code>key</code>, <code>value</code>) =&gt; <code>any</code> = <code>undefined</code></p> <p>Defined in: api/api-client.ts:14</p>"},{"location":"code/frontend/api/api-client/classes/AuthenticationClient/#methods","title":"Methods","text":""},{"location":"code/frontend/api/api-client/classes/AuthenticationClient/#login","title":"login()","text":"<p>login(<code>input</code>): <code>Promise</code>\\&lt;<code>FileResponse</code>&gt;</p> <p>Defined in: api/api-client.ts:26</p> <p>Authenticates a user and returns a JWT token for API access.</p>"},{"location":"code/frontend/api/api-client/classes/AuthenticationClient/#parameters_1","title":"Parameters","text":""},{"location":"code/frontend/api/api-client/classes/AuthenticationClient/#input","title":"input","text":"<p><code>Login</code></p> <p>The login credentials containing username and password.</p>"},{"location":"code/frontend/api/api-client/classes/AuthenticationClient/#returns_1","title":"Returns","text":"<p><code>Promise</code>\\&lt;<code>FileResponse</code>&gt;</p> <p>Authentication successful. Returns JWT access token and refresh token.</p>"},{"location":"code/frontend/api/api-client/classes/AuthenticationClient/#processlogin","title":"processLogin()","text":"<p><code>protected</code> processLogin(<code>response</code>): <code>Promise</code>\\&lt;<code>FileResponse</code>&gt;</p> <p>Defined in: api/api-client.ts:46</p>"},{"location":"code/frontend/api/api-client/classes/AuthenticationClient/#parameters_2","title":"Parameters","text":""},{"location":"code/frontend/api/api-client/classes/AuthenticationClient/#response","title":"response","text":"<p><code>Response</code></p>"},{"location":"code/frontend/api/api-client/classes/AuthenticationClient/#returns_2","title":"Returns","text":"<p><code>Promise</code>\\&lt;<code>FileResponse</code>&gt;</p>"},{"location":"code/frontend/api/api-client/classes/AuthenticationClient/#processrefresh","title":"processRefresh()","text":"<p><code>protected</code> processRefresh(<code>response</code>): <code>Promise</code>\\&lt;<code>void</code>&gt;</p> <p>Defined in: api/api-client.ts:156</p>"},{"location":"code/frontend/api/api-client/classes/AuthenticationClient/#parameters_3","title":"Parameters","text":""},{"location":"code/frontend/api/api-client/classes/AuthenticationClient/#response_1","title":"response","text":"<p><code>Response</code></p>"},{"location":"code/frontend/api/api-client/classes/AuthenticationClient/#returns_3","title":"Returns","text":"<p><code>Promise</code>\\&lt;<code>void</code>&gt;</p>"},{"location":"code/frontend/api/api-client/classes/AuthenticationClient/#processregister","title":"processRegister()","text":"<p><code>protected</code> processRegister(<code>response</code>): <code>Promise</code>\\&lt;<code>void</code>&gt;</p> <p>Defined in: api/api-client.ts:92</p>"},{"location":"code/frontend/api/api-client/classes/AuthenticationClient/#parameters_4","title":"Parameters","text":""},{"location":"code/frontend/api/api-client/classes/AuthenticationClient/#response_2","title":"response","text":"<p><code>Response</code></p>"},{"location":"code/frontend/api/api-client/classes/AuthenticationClient/#returns_4","title":"Returns","text":"<p><code>Promise</code>\\&lt;<code>void</code>&gt;</p>"},{"location":"code/frontend/api/api-client/classes/AuthenticationClient/#refresh","title":"refresh()","text":"<p>refresh(<code>token</code>): <code>Promise</code>\\&lt;<code>void</code>&gt;</p> <p>Defined in: api/api-client.ts:137</p> <p>Refreshes an expired JWT access token using a valid refresh token.</p>"},{"location":"code/frontend/api/api-client/classes/AuthenticationClient/#parameters_5","title":"Parameters","text":""},{"location":"code/frontend/api/api-client/classes/AuthenticationClient/#token","title":"token","text":"<p><code>JwtToken</code></p> <p>The JWT token object containing both the expired access token and valid refresh token.</p>"},{"location":"code/frontend/api/api-client/classes/AuthenticationClient/#returns_5","title":"Returns","text":"<p><code>Promise</code>\\&lt;<code>void</code>&gt;</p> <p>Token refresh successful. Returns new access and refresh tokens.</p>"},{"location":"code/frontend/api/api-client/classes/AuthenticationClient/#register","title":"register()","text":"<p>register(<code>input</code>): <code>Promise</code>\\&lt;<code>void</code>&gt;</p> <p>Defined in: api/api-client.ts:73</p> <p>Registers a new user in the system. Admin access required.</p>"},{"location":"code/frontend/api/api-client/classes/AuthenticationClient/#parameters_6","title":"Parameters","text":""},{"location":"code/frontend/api/api-client/classes/AuthenticationClient/#input_1","title":"input","text":"<p><code>Register</code></p> <p>The registration data containing username and password for the new user.</p>"},{"location":"code/frontend/api/api-client/classes/AuthenticationClient/#returns_6","title":"Returns","text":"<p><code>Promise</code>\\&lt;<code>void</code>&gt;</p> <p>User registered successfully.</p>"},{"location":"code/frontend/api/api-client/classes/ChangePassword/","title":"ChangePassword","text":"<p>isopruefi-frontend v1.0.0</p> <p>isopruefi-frontend / api/api-client / ChangePassword</p>"},{"location":"code/frontend/api/api-client/classes/ChangePassword/#class-changepassword","title":"Class: ChangePassword","text":"<p>Defined in: api/api-client.ts:1315</p> <p>Represents a request to change a user's password.</p>"},{"location":"code/frontend/api/api-client/classes/ChangePassword/#implements","title":"Implements","text":"<ul> <li><code>IChangePassword</code></li> </ul>"},{"location":"code/frontend/api/api-client/classes/ChangePassword/#constructors","title":"Constructors","text":""},{"location":"code/frontend/api/api-client/classes/ChangePassword/#constructor","title":"Constructor","text":"<p>new ChangePassword(<code>data?</code>): <code>ChangePassword</code></p> <p>Defined in: api/api-client.ts:1323</p>"},{"location":"code/frontend/api/api-client/classes/ChangePassword/#parameters","title":"Parameters","text":""},{"location":"code/frontend/api/api-client/classes/ChangePassword/#data","title":"data?","text":"<p><code>IChangePassword</code></p>"},{"location":"code/frontend/api/api-client/classes/ChangePassword/#returns","title":"Returns","text":"<p><code>ChangePassword</code></p>"},{"location":"code/frontend/api/api-client/classes/ChangePassword/#properties","title":"Properties","text":""},{"location":"code/frontend/api/api-client/classes/ChangePassword/#currentpassword","title":"currentPassword?","text":"<p><code>optional</code> currentPassword: <code>string</code></p> <p>Defined in: api/api-client.ts:1319</p> <p>Gets or sets the current password of the user.</p>"},{"location":"code/frontend/api/api-client/classes/ChangePassword/#implementation-of","title":"Implementation of","text":"<p><code>IChangePassword</code>.<code>currentPassword</code></p>"},{"location":"code/frontend/api/api-client/classes/ChangePassword/#newpassword","title":"newPassword?","text":"<p><code>optional</code> newPassword: <code>string</code></p> <p>Defined in: api/api-client.ts:1321</p> <p>Gets or sets the new password to be set for the user.</p>"},{"location":"code/frontend/api/api-client/classes/ChangePassword/#implementation-of_1","title":"Implementation of","text":"<p><code>IChangePassword</code>.<code>newPassword</code></p>"},{"location":"code/frontend/api/api-client/classes/ChangePassword/#userid","title":"userId?","text":"<p><code>optional</code> userId: <code>string</code></p> <p>Defined in: api/api-client.ts:1317</p> <p>Gets or sets the unique identifier of the user whose password is to be changed.</p>"},{"location":"code/frontend/api/api-client/classes/ChangePassword/#implementation-of_2","title":"Implementation of","text":"<p><code>IChangePassword</code>.<code>userId</code></p>"},{"location":"code/frontend/api/api-client/classes/ChangePassword/#methods","title":"Methods","text":""},{"location":"code/frontend/api/api-client/classes/ChangePassword/#init","title":"init()","text":"<p>init(<code>_data?</code>): <code>void</code></p> <p>Defined in: api/api-client.ts:1332</p>"},{"location":"code/frontend/api/api-client/classes/ChangePassword/#parameters_1","title":"Parameters","text":""},{"location":"code/frontend/api/api-client/classes/ChangePassword/#_data","title":"_data?","text":"<p><code>any</code></p>"},{"location":"code/frontend/api/api-client/classes/ChangePassword/#returns_1","title":"Returns","text":"<p><code>void</code></p>"},{"location":"code/frontend/api/api-client/classes/ChangePassword/#tojson","title":"toJSON()","text":"<p>toJSON(<code>data?</code>): <code>any</code></p> <p>Defined in: api/api-client.ts:1347</p>"},{"location":"code/frontend/api/api-client/classes/ChangePassword/#parameters_2","title":"Parameters","text":""},{"location":"code/frontend/api/api-client/classes/ChangePassword/#data_1","title":"data?","text":"<p><code>any</code></p>"},{"location":"code/frontend/api/api-client/classes/ChangePassword/#returns_2","title":"Returns","text":"<p><code>any</code></p>"},{"location":"code/frontend/api/api-client/classes/ChangePassword/#fromjs","title":"fromJS()","text":"<p><code>static</code> fromJS(<code>data</code>): <code>ChangePassword</code></p> <p>Defined in: api/api-client.ts:1340</p>"},{"location":"code/frontend/api/api-client/classes/ChangePassword/#parameters_3","title":"Parameters","text":""},{"location":"code/frontend/api/api-client/classes/ChangePassword/#data_2","title":"data","text":"<p><code>any</code></p>"},{"location":"code/frontend/api/api-client/classes/ChangePassword/#returns_3","title":"Returns","text":"<p><code>ChangePassword</code></p>"},{"location":"code/frontend/api/api-client/classes/IdentityUser/","title":"IdentityUser","text":"<p>isopruefi-frontend v1.0.0</p> <p>isopruefi-frontend / api/api-client / IdentityUser</p>"},{"location":"code/frontend/api/api-client/classes/IdentityUser/#class-identityuser","title":"Class: IdentityUser","text":"<p>Defined in: api/api-client.ts:1491</p> <p>The default implementation of IdentityUser`1 which uses a string as a primary key.</p>"},{"location":"code/frontend/api/api-client/classes/IdentityUser/#extends","title":"Extends","text":"<ul> <li><code>IdentityUserOfString</code></li> </ul>"},{"location":"code/frontend/api/api-client/classes/IdentityUser/#extended-by","title":"Extended by","text":"<ul> <li><code>ApiUser</code></li> </ul>"},{"location":"code/frontend/api/api-client/classes/IdentityUser/#implements","title":"Implements","text":"<ul> <li><code>IIdentityUser</code></li> </ul>"},{"location":"code/frontend/api/api-client/classes/IdentityUser/#constructors","title":"Constructors","text":""},{"location":"code/frontend/api/api-client/classes/IdentityUser/#constructor","title":"Constructor","text":"<p>new IdentityUser(<code>data?</code>): <code>IdentityUser</code></p> <p>Defined in: api/api-client.ts:1493</p>"},{"location":"code/frontend/api/api-client/classes/IdentityUser/#parameters","title":"Parameters","text":""},{"location":"code/frontend/api/api-client/classes/IdentityUser/#data","title":"data?","text":"<p><code>IIdentityUser</code></p>"},{"location":"code/frontend/api/api-client/classes/IdentityUser/#returns","title":"Returns","text":"<p><code>IdentityUser</code></p>"},{"location":"code/frontend/api/api-client/classes/IdentityUser/#overrides","title":"Overrides","text":"<p><code>IdentityUserOfString</code>.<code>constructor</code></p>"},{"location":"code/frontend/api/api-client/classes/IdentityUser/#properties","title":"Properties","text":""},{"location":"code/frontend/api/api-client/classes/IdentityUser/#accessfailedcount","title":"accessFailedCount?","text":"<p><code>optional</code> accessFailedCount: <code>number</code></p> <p>Defined in: api/api-client.ts:1397</p> <p>Gets or sets the number of failed login attempts for the current user.</p>"},{"location":"code/frontend/api/api-client/classes/IdentityUser/#implementation-of","title":"Implementation of","text":"<p><code>IIdentityUser</code>.<code>accessFailedCount</code></p>"},{"location":"code/frontend/api/api-client/classes/IdentityUser/#inherited-from","title":"Inherited from","text":"<p><code>IdentityUserOfString</code>.<code>accessFailedCount</code></p>"},{"location":"code/frontend/api/api-client/classes/IdentityUser/#concurrencystamp","title":"concurrencyStamp?","text":"<p><code>optional</code> concurrencyStamp: <code>string</code></p> <p>Defined in: api/api-client.ts:1385</p> <p>A random value that must change whenever a user is persisted to the store</p>"},{"location":"code/frontend/api/api-client/classes/IdentityUser/#implementation-of_1","title":"Implementation of","text":"<p><code>IIdentityUser</code>.<code>concurrencyStamp</code></p>"},{"location":"code/frontend/api/api-client/classes/IdentityUser/#inherited-from_1","title":"Inherited from","text":"<p><code>IdentityUserOfString</code>.<code>concurrencyStamp</code></p>"},{"location":"code/frontend/api/api-client/classes/IdentityUser/#email","title":"email?","text":"<p><code>optional</code> email: <code>string</code></p> <p>Defined in: api/api-client.ts:1375</p> <p>Gets or sets the email address for this user.</p>"},{"location":"code/frontend/api/api-client/classes/IdentityUser/#implementation-of_2","title":"Implementation of","text":"<p><code>IIdentityUser</code>.<code>email</code></p>"},{"location":"code/frontend/api/api-client/classes/IdentityUser/#inherited-from_2","title":"Inherited from","text":"<p><code>IdentityUserOfString</code>.<code>email</code></p>"},{"location":"code/frontend/api/api-client/classes/IdentityUser/#emailconfirmed","title":"emailConfirmed?","text":"<p><code>optional</code> emailConfirmed: <code>boolean</code></p> <p>Defined in: api/api-client.ts:1379</p> <p>Gets or sets a flag indicating if a user has confirmed their email address.</p>"},{"location":"code/frontend/api/api-client/classes/IdentityUser/#implementation-of_3","title":"Implementation of","text":"<p><code>IIdentityUser</code>.<code>emailConfirmed</code></p>"},{"location":"code/frontend/api/api-client/classes/IdentityUser/#inherited-from_3","title":"Inherited from","text":"<p><code>IdentityUserOfString</code>.<code>emailConfirmed</code></p>"},{"location":"code/frontend/api/api-client/classes/IdentityUser/#id","title":"id?","text":"<p><code>optional</code> id: <code>string</code></p> <p>Defined in: api/api-client.ts:1369</p> <p>Gets or sets the primary key for this user.</p>"},{"location":"code/frontend/api/api-client/classes/IdentityUser/#implementation-of_4","title":"Implementation of","text":"<p><code>IIdentityUser</code>.<code>id</code></p>"},{"location":"code/frontend/api/api-client/classes/IdentityUser/#inherited-from_4","title":"Inherited from","text":"<p><code>IdentityUserOfString</code>.<code>id</code></p>"},{"location":"code/frontend/api/api-client/classes/IdentityUser/#lockoutenabled","title":"lockoutEnabled?","text":"<p><code>optional</code> lockoutEnabled: <code>boolean</code></p> <p>Defined in: api/api-client.ts:1395</p> <p>Gets or sets a flag indicating if the user could be locked out.</p>"},{"location":"code/frontend/api/api-client/classes/IdentityUser/#implementation-of_5","title":"Implementation of","text":"<p><code>IIdentityUser</code>.<code>lockoutEnabled</code></p>"},{"location":"code/frontend/api/api-client/classes/IdentityUser/#inherited-from_5","title":"Inherited from","text":"<p><code>IdentityUserOfString</code>.<code>lockoutEnabled</code></p>"},{"location":"code/frontend/api/api-client/classes/IdentityUser/#lockoutend","title":"lockoutEnd?","text":"<p><code>optional</code> lockoutEnd: <code>Date</code></p> <p>Defined in: api/api-client.ts:1393</p> <p>Gets or sets the date and time, in UTC, when any user lockout ends.</p>"},{"location":"code/frontend/api/api-client/classes/IdentityUser/#implementation-of_6","title":"Implementation of","text":"<p><code>IIdentityUser</code>.<code>lockoutEnd</code></p>"},{"location":"code/frontend/api/api-client/classes/IdentityUser/#inherited-from_6","title":"Inherited from","text":"<p><code>IdentityUserOfString</code>.<code>lockoutEnd</code></p>"},{"location":"code/frontend/api/api-client/classes/IdentityUser/#normalizedemail","title":"normalizedEmail?","text":"<p><code>optional</code> normalizedEmail: <code>string</code></p> <p>Defined in: api/api-client.ts:1377</p> <p>Gets or sets the normalized email address for this user.</p>"},{"location":"code/frontend/api/api-client/classes/IdentityUser/#implementation-of_7","title":"Implementation of","text":"<p><code>IIdentityUser</code>.<code>normalizedEmail</code></p>"},{"location":"code/frontend/api/api-client/classes/IdentityUser/#inherited-from_7","title":"Inherited from","text":"<p><code>IdentityUserOfString</code>.<code>normalizedEmail</code></p>"},{"location":"code/frontend/api/api-client/classes/IdentityUser/#normalizedusername","title":"normalizedUserName?","text":"<p><code>optional</code> normalizedUserName: <code>string</code></p> <p>Defined in: api/api-client.ts:1373</p> <p>Gets or sets the normalized user name for this user.</p>"},{"location":"code/frontend/api/api-client/classes/IdentityUser/#implementation-of_8","title":"Implementation of","text":"<p><code>IIdentityUser</code>.<code>normalizedUserName</code></p>"},{"location":"code/frontend/api/api-client/classes/IdentityUser/#inherited-from_8","title":"Inherited from","text":"<p><code>IdentityUserOfString</code>.<code>normalizedUserName</code></p>"},{"location":"code/frontend/api/api-client/classes/IdentityUser/#passwordhash","title":"passwordHash?","text":"<p><code>optional</code> passwordHash: <code>string</code></p> <p>Defined in: api/api-client.ts:1381</p> <p>Gets or sets a salted and hashed representation of the password for this user.</p>"},{"location":"code/frontend/api/api-client/classes/IdentityUser/#implementation-of_9","title":"Implementation of","text":"<p><code>IIdentityUser</code>.<code>passwordHash</code></p>"},{"location":"code/frontend/api/api-client/classes/IdentityUser/#inherited-from_9","title":"Inherited from","text":"<p><code>IdentityUserOfString</code>.<code>passwordHash</code></p>"},{"location":"code/frontend/api/api-client/classes/IdentityUser/#phonenumber","title":"phoneNumber?","text":"<p><code>optional</code> phoneNumber: <code>string</code></p> <p>Defined in: api/api-client.ts:1387</p> <p>Gets or sets a telephone number for the user.</p>"},{"location":"code/frontend/api/api-client/classes/IdentityUser/#implementation-of_10","title":"Implementation of","text":"<p><code>IIdentityUser</code>.<code>phoneNumber</code></p>"},{"location":"code/frontend/api/api-client/classes/IdentityUser/#inherited-from_10","title":"Inherited from","text":"<p><code>IdentityUserOfString</code>.<code>phoneNumber</code></p>"},{"location":"code/frontend/api/api-client/classes/IdentityUser/#phonenumberconfirmed","title":"phoneNumberConfirmed?","text":"<p><code>optional</code> phoneNumberConfirmed: <code>boolean</code></p> <p>Defined in: api/api-client.ts:1389</p> <p>Gets or sets a flag indicating if a user has confirmed their telephone address.</p>"},{"location":"code/frontend/api/api-client/classes/IdentityUser/#implementation-of_11","title":"Implementation of","text":"<p><code>IIdentityUser</code>.<code>phoneNumberConfirmed</code></p>"},{"location":"code/frontend/api/api-client/classes/IdentityUser/#inherited-from_11","title":"Inherited from","text":"<p><code>IdentityUserOfString</code>.<code>phoneNumberConfirmed</code></p>"},{"location":"code/frontend/api/api-client/classes/IdentityUser/#securitystamp","title":"securityStamp?","text":"<p><code>optional</code> securityStamp: <code>string</code></p> <p>Defined in: api/api-client.ts:1383</p> <p>A random value that must change whenever a users credentials change (password changed, login removed)</p>"},{"location":"code/frontend/api/api-client/classes/IdentityUser/#implementation-of_12","title":"Implementation of","text":"<p><code>IIdentityUser</code>.<code>securityStamp</code></p>"},{"location":"code/frontend/api/api-client/classes/IdentityUser/#inherited-from_12","title":"Inherited from","text":"<p><code>IdentityUserOfString</code>.<code>securityStamp</code></p>"},{"location":"code/frontend/api/api-client/classes/IdentityUser/#twofactorenabled","title":"twoFactorEnabled?","text":"<p><code>optional</code> twoFactorEnabled: <code>boolean</code></p> <p>Defined in: api/api-client.ts:1391</p> <p>Gets or sets a flag indicating if two factor authentication is enabled for this user.</p>"},{"location":"code/frontend/api/api-client/classes/IdentityUser/#implementation-of_13","title":"Implementation of","text":"<p><code>IIdentityUser</code>.<code>twoFactorEnabled</code></p>"},{"location":"code/frontend/api/api-client/classes/IdentityUser/#inherited-from_13","title":"Inherited from","text":"<p><code>IdentityUserOfString</code>.<code>twoFactorEnabled</code></p>"},{"location":"code/frontend/api/api-client/classes/IdentityUser/#username","title":"userName?","text":"<p><code>optional</code> userName: <code>string</code></p> <p>Defined in: api/api-client.ts:1371</p> <p>Gets or sets the user name for this user.</p>"},{"location":"code/frontend/api/api-client/classes/IdentityUser/#implementation-of_14","title":"Implementation of","text":"<p><code>IIdentityUser</code>.<code>userName</code></p>"},{"location":"code/frontend/api/api-client/classes/IdentityUser/#inherited-from_14","title":"Inherited from","text":"<p><code>IdentityUserOfString</code>.<code>userName</code></p>"},{"location":"code/frontend/api/api-client/classes/IdentityUser/#methods","title":"Methods","text":""},{"location":"code/frontend/api/api-client/classes/IdentityUser/#init","title":"init()","text":"<p>init(<code>_data?</code>): <code>void</code></p> <p>Defined in: api/api-client.ts:1497</p>"},{"location":"code/frontend/api/api-client/classes/IdentityUser/#parameters_1","title":"Parameters","text":""},{"location":"code/frontend/api/api-client/classes/IdentityUser/#_data","title":"_data?","text":"<p><code>any</code></p>"},{"location":"code/frontend/api/api-client/classes/IdentityUser/#returns_1","title":"Returns","text":"<p><code>void</code></p>"},{"location":"code/frontend/api/api-client/classes/IdentityUser/#overrides_1","title":"Overrides","text":"<p><code>IdentityUserOfString</code>.<code>init</code></p>"},{"location":"code/frontend/api/api-client/classes/IdentityUser/#tojson","title":"toJSON()","text":"<p>toJSON(<code>data?</code>): <code>any</code></p> <p>Defined in: api/api-client.ts:1508</p>"},{"location":"code/frontend/api/api-client/classes/IdentityUser/#parameters_2","title":"Parameters","text":""},{"location":"code/frontend/api/api-client/classes/IdentityUser/#data_1","title":"data?","text":"<p><code>any</code></p>"},{"location":"code/frontend/api/api-client/classes/IdentityUser/#returns_2","title":"Returns","text":"<p><code>any</code></p>"},{"location":"code/frontend/api/api-client/classes/IdentityUser/#overrides_2","title":"Overrides","text":"<p><code>IdentityUserOfString</code>.<code>toJSON</code></p>"},{"location":"code/frontend/api/api-client/classes/IdentityUser/#fromjs","title":"fromJS()","text":"<p><code>static</code> fromJS(<code>data</code>): <code>IdentityUser</code></p> <p>Defined in: api/api-client.ts:1501</p>"},{"location":"code/frontend/api/api-client/classes/IdentityUser/#parameters_3","title":"Parameters","text":""},{"location":"code/frontend/api/api-client/classes/IdentityUser/#data_2","title":"data","text":"<p><code>any</code></p>"},{"location":"code/frontend/api/api-client/classes/IdentityUser/#returns_3","title":"Returns","text":"<p><code>IdentityUser</code></p>"},{"location":"code/frontend/api/api-client/classes/IdentityUser/#overrides_3","title":"Overrides","text":"<p><code>IdentityUserOfString</code>.<code>fromJS</code></p>"},{"location":"code/frontend/api/api-client/classes/IdentityUserOfString/","title":"IdentityUserOfString","text":"<p>isopruefi-frontend v1.0.0</p> <p>isopruefi-frontend / api/api-client / IdentityUserOfString</p>"},{"location":"code/frontend/api/api-client/classes/IdentityUserOfString/#class-identityuserofstring","title":"Class: IdentityUserOfString","text":"<p>Defined in: api/api-client.ts:1367</p> <p>Represents a user in the identity system</p>"},{"location":"code/frontend/api/api-client/classes/IdentityUserOfString/#extended-by","title":"Extended by","text":"<ul> <li><code>IdentityUser</code></li> </ul>"},{"location":"code/frontend/api/api-client/classes/IdentityUserOfString/#implements","title":"Implements","text":"<ul> <li><code>IIdentityUserOfString</code></li> </ul>"},{"location":"code/frontend/api/api-client/classes/IdentityUserOfString/#constructors","title":"Constructors","text":""},{"location":"code/frontend/api/api-client/classes/IdentityUserOfString/#constructor","title":"Constructor","text":"<p>new IdentityUserOfString(<code>data?</code>): <code>IdentityUserOfString</code></p> <p>Defined in: api/api-client.ts:1399</p>"},{"location":"code/frontend/api/api-client/classes/IdentityUserOfString/#parameters","title":"Parameters","text":""},{"location":"code/frontend/api/api-client/classes/IdentityUserOfString/#data","title":"data?","text":"<p><code>IIdentityUserOfString</code></p>"},{"location":"code/frontend/api/api-client/classes/IdentityUserOfString/#returns","title":"Returns","text":"<p><code>IdentityUserOfString</code></p>"},{"location":"code/frontend/api/api-client/classes/IdentityUserOfString/#properties","title":"Properties","text":""},{"location":"code/frontend/api/api-client/classes/IdentityUserOfString/#accessfailedcount","title":"accessFailedCount?","text":"<p><code>optional</code> accessFailedCount: <code>number</code></p> <p>Defined in: api/api-client.ts:1397</p> <p>Gets or sets the number of failed login attempts for the current user.</p>"},{"location":"code/frontend/api/api-client/classes/IdentityUserOfString/#implementation-of","title":"Implementation of","text":"<p><code>IIdentityUserOfString</code>.<code>accessFailedCount</code></p>"},{"location":"code/frontend/api/api-client/classes/IdentityUserOfString/#concurrencystamp","title":"concurrencyStamp?","text":"<p><code>optional</code> concurrencyStamp: <code>string</code></p> <p>Defined in: api/api-client.ts:1385</p> <p>A random value that must change whenever a user is persisted to the store</p>"},{"location":"code/frontend/api/api-client/classes/IdentityUserOfString/#implementation-of_1","title":"Implementation of","text":"<p><code>IIdentityUserOfString</code>.<code>concurrencyStamp</code></p>"},{"location":"code/frontend/api/api-client/classes/IdentityUserOfString/#email","title":"email?","text":"<p><code>optional</code> email: <code>string</code></p> <p>Defined in: api/api-client.ts:1375</p> <p>Gets or sets the email address for this user.</p>"},{"location":"code/frontend/api/api-client/classes/IdentityUserOfString/#implementation-of_2","title":"Implementation of","text":"<p><code>IIdentityUserOfString</code>.<code>email</code></p>"},{"location":"code/frontend/api/api-client/classes/IdentityUserOfString/#emailconfirmed","title":"emailConfirmed?","text":"<p><code>optional</code> emailConfirmed: <code>boolean</code></p> <p>Defined in: api/api-client.ts:1379</p> <p>Gets or sets a flag indicating if a user has confirmed their email address.</p>"},{"location":"code/frontend/api/api-client/classes/IdentityUserOfString/#implementation-of_3","title":"Implementation of","text":"<p><code>IIdentityUserOfString</code>.<code>emailConfirmed</code></p>"},{"location":"code/frontend/api/api-client/classes/IdentityUserOfString/#id","title":"id?","text":"<p><code>optional</code> id: <code>string</code></p> <p>Defined in: api/api-client.ts:1369</p> <p>Gets or sets the primary key for this user.</p>"},{"location":"code/frontend/api/api-client/classes/IdentityUserOfString/#implementation-of_4","title":"Implementation of","text":"<p><code>IIdentityUserOfString</code>.<code>id</code></p>"},{"location":"code/frontend/api/api-client/classes/IdentityUserOfString/#lockoutenabled","title":"lockoutEnabled?","text":"<p><code>optional</code> lockoutEnabled: <code>boolean</code></p> <p>Defined in: api/api-client.ts:1395</p> <p>Gets or sets a flag indicating if the user could be locked out.</p>"},{"location":"code/frontend/api/api-client/classes/IdentityUserOfString/#implementation-of_5","title":"Implementation of","text":"<p><code>IIdentityUserOfString</code>.<code>lockoutEnabled</code></p>"},{"location":"code/frontend/api/api-client/classes/IdentityUserOfString/#lockoutend","title":"lockoutEnd?","text":"<p><code>optional</code> lockoutEnd: <code>Date</code></p> <p>Defined in: api/api-client.ts:1393</p> <p>Gets or sets the date and time, in UTC, when any user lockout ends.</p>"},{"location":"code/frontend/api/api-client/classes/IdentityUserOfString/#implementation-of_6","title":"Implementation of","text":"<p><code>IIdentityUserOfString</code>.<code>lockoutEnd</code></p>"},{"location":"code/frontend/api/api-client/classes/IdentityUserOfString/#normalizedemail","title":"normalizedEmail?","text":"<p><code>optional</code> normalizedEmail: <code>string</code></p> <p>Defined in: api/api-client.ts:1377</p> <p>Gets or sets the normalized email address for this user.</p>"},{"location":"code/frontend/api/api-client/classes/IdentityUserOfString/#implementation-of_7","title":"Implementation of","text":"<p><code>IIdentityUserOfString</code>.<code>normalizedEmail</code></p>"},{"location":"code/frontend/api/api-client/classes/IdentityUserOfString/#normalizedusername","title":"normalizedUserName?","text":"<p><code>optional</code> normalizedUserName: <code>string</code></p> <p>Defined in: api/api-client.ts:1373</p> <p>Gets or sets the normalized user name for this user.</p>"},{"location":"code/frontend/api/api-client/classes/IdentityUserOfString/#implementation-of_8","title":"Implementation of","text":"<p><code>IIdentityUserOfString</code>.<code>normalizedUserName</code></p>"},{"location":"code/frontend/api/api-client/classes/IdentityUserOfString/#passwordhash","title":"passwordHash?","text":"<p><code>optional</code> passwordHash: <code>string</code></p> <p>Defined in: api/api-client.ts:1381</p> <p>Gets or sets a salted and hashed representation of the password for this user.</p>"},{"location":"code/frontend/api/api-client/classes/IdentityUserOfString/#implementation-of_9","title":"Implementation of","text":"<p><code>IIdentityUserOfString</code>.<code>passwordHash</code></p>"},{"location":"code/frontend/api/api-client/classes/IdentityUserOfString/#phonenumber","title":"phoneNumber?","text":"<p><code>optional</code> phoneNumber: <code>string</code></p> <p>Defined in: api/api-client.ts:1387</p> <p>Gets or sets a telephone number for the user.</p>"},{"location":"code/frontend/api/api-client/classes/IdentityUserOfString/#implementation-of_10","title":"Implementation of","text":"<p><code>IIdentityUserOfString</code>.<code>phoneNumber</code></p>"},{"location":"code/frontend/api/api-client/classes/IdentityUserOfString/#phonenumberconfirmed","title":"phoneNumberConfirmed?","text":"<p><code>optional</code> phoneNumberConfirmed: <code>boolean</code></p> <p>Defined in: api/api-client.ts:1389</p> <p>Gets or sets a flag indicating if a user has confirmed their telephone address.</p>"},{"location":"code/frontend/api/api-client/classes/IdentityUserOfString/#implementation-of_11","title":"Implementation of","text":"<p><code>IIdentityUserOfString</code>.<code>phoneNumberConfirmed</code></p>"},{"location":"code/frontend/api/api-client/classes/IdentityUserOfString/#securitystamp","title":"securityStamp?","text":"<p><code>optional</code> securityStamp: <code>string</code></p> <p>Defined in: api/api-client.ts:1383</p> <p>A random value that must change whenever a users credentials change (password changed, login removed)</p>"},{"location":"code/frontend/api/api-client/classes/IdentityUserOfString/#implementation-of_12","title":"Implementation of","text":"<p><code>IIdentityUserOfString</code>.<code>securityStamp</code></p>"},{"location":"code/frontend/api/api-client/classes/IdentityUserOfString/#twofactorenabled","title":"twoFactorEnabled?","text":"<p><code>optional</code> twoFactorEnabled: <code>boolean</code></p> <p>Defined in: api/api-client.ts:1391</p> <p>Gets or sets a flag indicating if two factor authentication is enabled for this user.</p>"},{"location":"code/frontend/api/api-client/classes/IdentityUserOfString/#implementation-of_13","title":"Implementation of","text":"<p><code>IIdentityUserOfString</code>.<code>twoFactorEnabled</code></p>"},{"location":"code/frontend/api/api-client/classes/IdentityUserOfString/#username","title":"userName?","text":"<p><code>optional</code> userName: <code>string</code></p> <p>Defined in: api/api-client.ts:1371</p> <p>Gets or sets the user name for this user.</p>"},{"location":"code/frontend/api/api-client/classes/IdentityUserOfString/#implementation-of_14","title":"Implementation of","text":"<p><code>IIdentityUserOfString</code>.<code>userName</code></p>"},{"location":"code/frontend/api/api-client/classes/IdentityUserOfString/#methods","title":"Methods","text":""},{"location":"code/frontend/api/api-client/classes/IdentityUserOfString/#init","title":"init()","text":"<p>init(<code>_data?</code>): <code>void</code></p> <p>Defined in: api/api-client.ts:1408</p>"},{"location":"code/frontend/api/api-client/classes/IdentityUserOfString/#parameters_1","title":"Parameters","text":""},{"location":"code/frontend/api/api-client/classes/IdentityUserOfString/#_data","title":"_data?","text":"<p><code>any</code></p>"},{"location":"code/frontend/api/api-client/classes/IdentityUserOfString/#returns_1","title":"Returns","text":"<p><code>void</code></p>"},{"location":"code/frontend/api/api-client/classes/IdentityUserOfString/#tojson","title":"toJSON()","text":"<p>toJSON(<code>data?</code>): <code>any</code></p> <p>Defined in: api/api-client.ts:1435</p>"},{"location":"code/frontend/api/api-client/classes/IdentityUserOfString/#parameters_2","title":"Parameters","text":""},{"location":"code/frontend/api/api-client/classes/IdentityUserOfString/#data_1","title":"data?","text":"<p><code>any</code></p>"},{"location":"code/frontend/api/api-client/classes/IdentityUserOfString/#returns_2","title":"Returns","text":"<p><code>any</code></p>"},{"location":"code/frontend/api/api-client/classes/IdentityUserOfString/#fromjs","title":"fromJS()","text":"<p><code>static</code> fromJS(<code>data</code>): <code>IdentityUserOfString</code></p> <p>Defined in: api/api-client.ts:1428</p>"},{"location":"code/frontend/api/api-client/classes/IdentityUserOfString/#parameters_3","title":"Parameters","text":""},{"location":"code/frontend/api/api-client/classes/IdentityUserOfString/#data_2","title":"data","text":"<p><code>any</code></p>"},{"location":"code/frontend/api/api-client/classes/IdentityUserOfString/#returns_3","title":"Returns","text":"<p><code>IdentityUserOfString</code></p>"},{"location":"code/frontend/api/api-client/classes/JwtToken/","title":"JwtToken","text":"<p>isopruefi-frontend v1.0.0</p> <p>isopruefi-frontend / api/api-client / JwtToken</p>"},{"location":"code/frontend/api/api-client/classes/JwtToken/#class-jwttoken","title":"Class: JwtToken","text":"<p>Defined in: api/api-client.ts:1045</p> <p>Represents a JWT token and its associated refresh token and metadata.</p>"},{"location":"code/frontend/api/api-client/classes/JwtToken/#implements","title":"Implements","text":"<ul> <li><code>IJwtToken</code></li> </ul>"},{"location":"code/frontend/api/api-client/classes/JwtToken/#constructors","title":"Constructors","text":""},{"location":"code/frontend/api/api-client/classes/JwtToken/#constructor","title":"Constructor","text":"<p>new JwtToken(<code>data?</code>): <code>JwtToken</code></p> <p>Defined in: api/api-client.ts:1057</p>"},{"location":"code/frontend/api/api-client/classes/JwtToken/#parameters","title":"Parameters","text":""},{"location":"code/frontend/api/api-client/classes/JwtToken/#data","title":"data?","text":"<p><code>IJwtToken</code></p>"},{"location":"code/frontend/api/api-client/classes/JwtToken/#returns","title":"Returns","text":"<p><code>JwtToken</code></p>"},{"location":"code/frontend/api/api-client/classes/JwtToken/#properties","title":"Properties","text":""},{"location":"code/frontend/api/api-client/classes/JwtToken/#createddate","title":"createdDate?","text":"<p><code>optional</code> createdDate: <code>Date</code></p> <p>Defined in: api/api-client.ts:1053</p> <p>Gets or sets the creation date and time of the JWT token.</p>"},{"location":"code/frontend/api/api-client/classes/JwtToken/#implementation-of","title":"Implementation of","text":"<p><code>IJwtToken</code>.<code>createdDate</code></p>"},{"location":"code/frontend/api/api-client/classes/JwtToken/#expirydate","title":"expiryDate?","text":"<p><code>optional</code> expiryDate: <code>Date</code></p> <p>Defined in: api/api-client.ts:1051</p> <p>Gets or sets the expiry date and time of the JWT token.</p>"},{"location":"code/frontend/api/api-client/classes/JwtToken/#implementation-of_1","title":"Implementation of","text":"<p><code>IJwtToken</code>.<code>expiryDate</code></p>"},{"location":"code/frontend/api/api-client/classes/JwtToken/#refreshtoken","title":"refreshToken?","text":"<p><code>optional</code> refreshToken: <code>string</code></p> <p>Defined in: api/api-client.ts:1049</p> <p>Gets or sets the refresh token string.</p>"},{"location":"code/frontend/api/api-client/classes/JwtToken/#implementation-of_2","title":"Implementation of","text":"<p><code>IJwtToken</code>.<code>refreshToken</code></p>"},{"location":"code/frontend/api/api-client/classes/JwtToken/#roles","title":"roles?","text":"<p><code>optional</code> roles: <code>string</code>[]</p> <p>Defined in: api/api-client.ts:1055</p> <p>Gets or sets the user roles associated with the JWT token.</p>"},{"location":"code/frontend/api/api-client/classes/JwtToken/#implementation-of_3","title":"Implementation of","text":"<p><code>IJwtToken</code>.<code>roles</code></p>"},{"location":"code/frontend/api/api-client/classes/JwtToken/#token","title":"token?","text":"<p><code>optional</code> token: <code>string</code></p> <p>Defined in: api/api-client.ts:1047</p> <p>Gets or sets the JWT access token string.</p>"},{"location":"code/frontend/api/api-client/classes/JwtToken/#implementation-of_4","title":"Implementation of","text":"<p><code>IJwtToken</code>.<code>token</code></p>"},{"location":"code/frontend/api/api-client/classes/JwtToken/#methods","title":"Methods","text":""},{"location":"code/frontend/api/api-client/classes/JwtToken/#init","title":"init()","text":"<p>init(<code>_data?</code>): <code>void</code></p> <p>Defined in: api/api-client.ts:1066</p>"},{"location":"code/frontend/api/api-client/classes/JwtToken/#parameters_1","title":"Parameters","text":""},{"location":"code/frontend/api/api-client/classes/JwtToken/#_data","title":"_data?","text":"<p><code>any</code></p>"},{"location":"code/frontend/api/api-client/classes/JwtToken/#returns_1","title":"Returns","text":"<p><code>void</code></p>"},{"location":"code/frontend/api/api-client/classes/JwtToken/#tojson","title":"toJSON()","text":"<p>toJSON(<code>data?</code>): <code>any</code></p> <p>Defined in: api/api-client.ts:1087</p>"},{"location":"code/frontend/api/api-client/classes/JwtToken/#parameters_2","title":"Parameters","text":""},{"location":"code/frontend/api/api-client/classes/JwtToken/#data_1","title":"data?","text":"<p><code>any</code></p>"},{"location":"code/frontend/api/api-client/classes/JwtToken/#returns_2","title":"Returns","text":"<p><code>any</code></p>"},{"location":"code/frontend/api/api-client/classes/JwtToken/#fromjs","title":"fromJS()","text":"<p><code>static</code> fromJS(<code>data</code>): <code>JwtToken</code></p> <p>Defined in: api/api-client.ts:1080</p>"},{"location":"code/frontend/api/api-client/classes/JwtToken/#parameters_3","title":"Parameters","text":""},{"location":"code/frontend/api/api-client/classes/JwtToken/#data_2","title":"data","text":"<p><code>any</code></p>"},{"location":"code/frontend/api/api-client/classes/JwtToken/#returns_3","title":"Returns","text":"<p><code>JwtToken</code></p>"},{"location":"code/frontend/api/api-client/classes/Login/","title":"Login","text":"<p>isopruefi-frontend v1.0.0</p> <p>isopruefi-frontend / api/api-client / Login</p>"},{"location":"code/frontend/api/api-client/classes/Login/#class-login","title":"Class: Login","text":"<p>Defined in: api/api-client.ts:889</p> <p>Represents the login credentials for a user.</p>"},{"location":"code/frontend/api/api-client/classes/Login/#implements","title":"Implements","text":"<ul> <li><code>ILogin</code></li> </ul>"},{"location":"code/frontend/api/api-client/classes/Login/#constructors","title":"Constructors","text":""},{"location":"code/frontend/api/api-client/classes/Login/#constructor","title":"Constructor","text":"<p>new Login(<code>data?</code>): <code>Login</code></p> <p>Defined in: api/api-client.ts:895</p>"},{"location":"code/frontend/api/api-client/classes/Login/#parameters","title":"Parameters","text":""},{"location":"code/frontend/api/api-client/classes/Login/#data","title":"data?","text":"<p><code>ILogin</code></p>"},{"location":"code/frontend/api/api-client/classes/Login/#returns","title":"Returns","text":"<p><code>Login</code></p>"},{"location":"code/frontend/api/api-client/classes/Login/#properties","title":"Properties","text":""},{"location":"code/frontend/api/api-client/classes/Login/#password","title":"password","text":"<p>password: <code>string</code></p> <p>Defined in: api/api-client.ts:893</p> <p>Gets or sets the password of the user.</p>"},{"location":"code/frontend/api/api-client/classes/Login/#implementation-of","title":"Implementation of","text":"<p><code>ILogin</code>.<code>password</code></p>"},{"location":"code/frontend/api/api-client/classes/Login/#username","title":"userName","text":"<p>userName: <code>string</code></p> <p>Defined in: api/api-client.ts:891</p> <p>Gets or sets the username of the user.</p>"},{"location":"code/frontend/api/api-client/classes/Login/#implementation-of_1","title":"Implementation of","text":"<p><code>ILogin</code>.<code>userName</code></p>"},{"location":"code/frontend/api/api-client/classes/Login/#methods","title":"Methods","text":""},{"location":"code/frontend/api/api-client/classes/Login/#init","title":"init()","text":"<p>init(<code>_data?</code>): <code>void</code></p> <p>Defined in: api/api-client.ts:904</p>"},{"location":"code/frontend/api/api-client/classes/Login/#parameters_1","title":"Parameters","text":""},{"location":"code/frontend/api/api-client/classes/Login/#_data","title":"_data?","text":"<p><code>any</code></p>"},{"location":"code/frontend/api/api-client/classes/Login/#returns_1","title":"Returns","text":"<p><code>void</code></p>"},{"location":"code/frontend/api/api-client/classes/Login/#tojson","title":"toJSON()","text":"<p>toJSON(<code>data?</code>): <code>any</code></p> <p>Defined in: api/api-client.ts:918</p>"},{"location":"code/frontend/api/api-client/classes/Login/#parameters_2","title":"Parameters","text":""},{"location":"code/frontend/api/api-client/classes/Login/#data_1","title":"data?","text":"<p><code>any</code></p>"},{"location":"code/frontend/api/api-client/classes/Login/#returns_2","title":"Returns","text":"<p><code>any</code></p>"},{"location":"code/frontend/api/api-client/classes/Login/#fromjs","title":"fromJS()","text":"<p><code>static</code> fromJS(<code>data</code>): <code>Login</code></p> <p>Defined in: api/api-client.ts:911</p>"},{"location":"code/frontend/api/api-client/classes/Login/#parameters_3","title":"Parameters","text":""},{"location":"code/frontend/api/api-client/classes/Login/#data_2","title":"data","text":"<p><code>any</code></p>"},{"location":"code/frontend/api/api-client/classes/Login/#returns_3","title":"Returns","text":"<p><code>Login</code></p>"},{"location":"code/frontend/api/api-client/classes/ProblemDetails/","title":"ProblemDetails","text":"<p>isopruefi-frontend v1.0.0</p> <p>isopruefi-frontend / api/api-client / ProblemDetails</p>"},{"location":"code/frontend/api/api-client/classes/ProblemDetails/#class-problemdetails","title":"Class: ProblemDetails","text":"<p>Defined in: api/api-client.ts:934</p>"},{"location":"code/frontend/api/api-client/classes/ProblemDetails/#implements","title":"Implements","text":"<ul> <li><code>IProblemDetails</code></li> </ul>"},{"location":"code/frontend/api/api-client/classes/ProblemDetails/#indexable","title":"Indexable","text":"<p>[<code>key</code>: <code>string</code>]: <code>any</code></p>"},{"location":"code/frontend/api/api-client/classes/ProblemDetails/#constructors","title":"Constructors","text":""},{"location":"code/frontend/api/api-client/classes/ProblemDetails/#constructor","title":"Constructor","text":"<p>new ProblemDetails(<code>data?</code>): <code>ProblemDetails</code></p> <p>Defined in: api/api-client.ts:943</p>"},{"location":"code/frontend/api/api-client/classes/ProblemDetails/#parameters","title":"Parameters","text":""},{"location":"code/frontend/api/api-client/classes/ProblemDetails/#data","title":"data?","text":"<p><code>IProblemDetails</code></p>"},{"location":"code/frontend/api/api-client/classes/ProblemDetails/#returns","title":"Returns","text":"<p><code>ProblemDetails</code></p>"},{"location":"code/frontend/api/api-client/classes/ProblemDetails/#properties","title":"Properties","text":""},{"location":"code/frontend/api/api-client/classes/ProblemDetails/#detail","title":"detail?","text":"<p><code>optional</code> detail: <code>string</code></p> <p>Defined in: api/api-client.ts:938</p>"},{"location":"code/frontend/api/api-client/classes/ProblemDetails/#implementation-of","title":"Implementation of","text":"<p><code>IProblemDetails</code>.<code>detail</code></p>"},{"location":"code/frontend/api/api-client/classes/ProblemDetails/#instance","title":"instance?","text":"<p><code>optional</code> instance: <code>string</code></p> <p>Defined in: api/api-client.ts:939</p>"},{"location":"code/frontend/api/api-client/classes/ProblemDetails/#implementation-of_1","title":"Implementation of","text":"<p><code>IProblemDetails</code>.<code>instance</code></p>"},{"location":"code/frontend/api/api-client/classes/ProblemDetails/#status","title":"status?","text":"<p><code>optional</code> status: <code>number</code></p> <p>Defined in: api/api-client.ts:937</p>"},{"location":"code/frontend/api/api-client/classes/ProblemDetails/#implementation-of_2","title":"Implementation of","text":"<p><code>IProblemDetails</code>.<code>status</code></p>"},{"location":"code/frontend/api/api-client/classes/ProblemDetails/#title","title":"title?","text":"<p><code>optional</code> title: <code>string</code></p> <p>Defined in: api/api-client.ts:936</p>"},{"location":"code/frontend/api/api-client/classes/ProblemDetails/#implementation-of_3","title":"Implementation of","text":"<p><code>IProblemDetails</code>.<code>title</code></p>"},{"location":"code/frontend/api/api-client/classes/ProblemDetails/#type","title":"type?","text":"<p><code>optional</code> type: <code>string</code></p> <p>Defined in: api/api-client.ts:935</p>"},{"location":"code/frontend/api/api-client/classes/ProblemDetails/#implementation-of_4","title":"Implementation of","text":"<p><code>IProblemDetails</code>.<code>type</code></p>"},{"location":"code/frontend/api/api-client/classes/ProblemDetails/#methods","title":"Methods","text":""},{"location":"code/frontend/api/api-client/classes/ProblemDetails/#init","title":"init()","text":"<p>init(<code>_data?</code>): <code>void</code></p> <p>Defined in: api/api-client.ts:952</p>"},{"location":"code/frontend/api/api-client/classes/ProblemDetails/#parameters_1","title":"Parameters","text":""},{"location":"code/frontend/api/api-client/classes/ProblemDetails/#_data","title":"_data?","text":"<p><code>any</code></p>"},{"location":"code/frontend/api/api-client/classes/ProblemDetails/#returns_1","title":"Returns","text":"<p><code>void</code></p>"},{"location":"code/frontend/api/api-client/classes/ProblemDetails/#tojson","title":"toJSON()","text":"<p>toJSON(<code>data?</code>): <code>any</code></p> <p>Defined in: api/api-client.ts:973</p>"},{"location":"code/frontend/api/api-client/classes/ProblemDetails/#parameters_2","title":"Parameters","text":""},{"location":"code/frontend/api/api-client/classes/ProblemDetails/#data_1","title":"data?","text":"<p><code>any</code></p>"},{"location":"code/frontend/api/api-client/classes/ProblemDetails/#returns_2","title":"Returns","text":"<p><code>any</code></p>"},{"location":"code/frontend/api/api-client/classes/ProblemDetails/#fromjs","title":"fromJS()","text":"<p><code>static</code> fromJS(<code>data</code>): <code>ProblemDetails</code></p> <p>Defined in: api/api-client.ts:966</p>"},{"location":"code/frontend/api/api-client/classes/ProblemDetails/#parameters_3","title":"Parameters","text":""},{"location":"code/frontend/api/api-client/classes/ProblemDetails/#data_2","title":"data","text":"<p><code>any</code></p>"},{"location":"code/frontend/api/api-client/classes/ProblemDetails/#returns_3","title":"Returns","text":"<p><code>ProblemDetails</code></p>"},{"location":"code/frontend/api/api-client/classes/Register/","title":"Register","text":"<p>isopruefi-frontend v1.0.0</p> <p>isopruefi-frontend / api/api-client / Register</p>"},{"location":"code/frontend/api/api-client/classes/Register/#class-register","title":"Class: Register","text":"<p>Defined in: api/api-client.ts:999</p> <p>Represents the registration credentials for a new user.</p>"},{"location":"code/frontend/api/api-client/classes/Register/#implements","title":"Implements","text":"<ul> <li><code>IRegister</code></li> </ul>"},{"location":"code/frontend/api/api-client/classes/Register/#constructors","title":"Constructors","text":""},{"location":"code/frontend/api/api-client/classes/Register/#constructor","title":"Constructor","text":"<p>new Register(<code>data?</code>): <code>Register</code></p> <p>Defined in: api/api-client.ts:1005</p>"},{"location":"code/frontend/api/api-client/classes/Register/#parameters","title":"Parameters","text":""},{"location":"code/frontend/api/api-client/classes/Register/#data","title":"data?","text":"<p><code>IRegister</code></p>"},{"location":"code/frontend/api/api-client/classes/Register/#returns","title":"Returns","text":"<p><code>Register</code></p>"},{"location":"code/frontend/api/api-client/classes/Register/#properties","title":"Properties","text":""},{"location":"code/frontend/api/api-client/classes/Register/#password","title":"password","text":"<p>password: <code>string</code></p> <p>Defined in: api/api-client.ts:1003</p> <p>Gets or sets the password for the new user.</p>"},{"location":"code/frontend/api/api-client/classes/Register/#implementation-of","title":"Implementation of","text":"<p><code>IRegister</code>.<code>password</code></p>"},{"location":"code/frontend/api/api-client/classes/Register/#username","title":"userName","text":"<p>userName: <code>string</code></p> <p>Defined in: api/api-client.ts:1001</p> <p>Gets or sets the username for the new user.</p>"},{"location":"code/frontend/api/api-client/classes/Register/#implementation-of_1","title":"Implementation of","text":"<p><code>IRegister</code>.<code>userName</code></p>"},{"location":"code/frontend/api/api-client/classes/Register/#methods","title":"Methods","text":""},{"location":"code/frontend/api/api-client/classes/Register/#init","title":"init()","text":"<p>init(<code>_data?</code>): <code>void</code></p> <p>Defined in: api/api-client.ts:1014</p>"},{"location":"code/frontend/api/api-client/classes/Register/#parameters_1","title":"Parameters","text":""},{"location":"code/frontend/api/api-client/classes/Register/#_data","title":"_data?","text":"<p><code>any</code></p>"},{"location":"code/frontend/api/api-client/classes/Register/#returns_1","title":"Returns","text":"<p><code>void</code></p>"},{"location":"code/frontend/api/api-client/classes/Register/#tojson","title":"toJSON()","text":"<p>toJSON(<code>data?</code>): <code>any</code></p> <p>Defined in: api/api-client.ts:1028</p>"},{"location":"code/frontend/api/api-client/classes/Register/#parameters_2","title":"Parameters","text":""},{"location":"code/frontend/api/api-client/classes/Register/#data_1","title":"data?","text":"<p><code>any</code></p>"},{"location":"code/frontend/api/api-client/classes/Register/#returns_2","title":"Returns","text":"<p><code>any</code></p>"},{"location":"code/frontend/api/api-client/classes/Register/#fromjs","title":"fromJS()","text":"<p><code>static</code> fromJS(<code>data</code>): <code>Register</code></p> <p>Defined in: api/api-client.ts:1021</p>"},{"location":"code/frontend/api/api-client/classes/Register/#parameters_3","title":"Parameters","text":""},{"location":"code/frontend/api/api-client/classes/Register/#data_2","title":"data","text":"<p><code>any</code></p>"},{"location":"code/frontend/api/api-client/classes/Register/#returns_3","title":"Returns","text":"<p><code>Register</code></p>"},{"location":"code/frontend/api/api-client/classes/TempClient/","title":"TempClient","text":"<p>isopruefi-frontend v1.0.0</p> <p>isopruefi-frontend / api/api-client / TempClient</p>"},{"location":"code/frontend/api/api-client/classes/TempClient/#class-tempclient","title":"Class: TempClient","text":"<p>Defined in: api/api-client.ts:284</p>"},{"location":"code/frontend/api/api-client/classes/TempClient/#constructors","title":"Constructors","text":""},{"location":"code/frontend/api/api-client/classes/TempClient/#constructor","title":"Constructor","text":"<p>new TempClient(<code>baseUrl?</code>, <code>http?</code>): <code>TempClient</code></p> <p>Defined in: api/api-client.ts:289</p>"},{"location":"code/frontend/api/api-client/classes/TempClient/#parameters","title":"Parameters","text":""},{"location":"code/frontend/api/api-client/classes/TempClient/#baseurl","title":"baseUrl?","text":"<p><code>string</code></p>"},{"location":"code/frontend/api/api-client/classes/TempClient/#http","title":"http?","text":""},{"location":"code/frontend/api/api-client/classes/TempClient/#fetch","title":"fetch","text":""},{"location":"code/frontend/api/api-client/classes/TempClient/#returns","title":"Returns","text":"<p><code>TempClient</code></p>"},{"location":"code/frontend/api/api-client/classes/TempClient/#properties","title":"Properties","text":""},{"location":"code/frontend/api/api-client/classes/TempClient/#jsonparsereviver","title":"jsonParseReviver","text":"<p><code>protected</code> jsonParseReviver: <code>undefined</code> | (<code>key</code>, <code>value</code>) =&gt; <code>any</code> = <code>undefined</code></p> <p>Defined in: api/api-client.ts:287</p>"},{"location":"code/frontend/api/api-client/classes/TempClient/#methods","title":"Methods","text":""},{"location":"code/frontend/api/api-client/classes/TempClient/#getallpostalcodes","title":"getAllPostalcodes()","text":"<p>getAllPostalcodes(): <code>Promise</code>\\&lt;<code>FileResponse</code>&gt;</p> <p>Defined in: api/api-client.ts:298</p> <p>Retrieves all saved locations.</p>"},{"location":"code/frontend/api/api-client/classes/TempClient/#returns_1","title":"Returns","text":"<p><code>Promise</code>\\&lt;<code>FileResponse</code>&gt;</p> <p>A list of all postalcodes; otherwise, NotFound.</p>"},{"location":"code/frontend/api/api-client/classes/TempClient/#insertlocation","title":"insertLocation()","text":"<p>insertLocation(<code>postalcode?</code>): <code>Promise</code>\\&lt;<code>FileResponse</code>&gt;</p> <p>Defined in: api/api-client.ts:341</p> <p>Checks for existence of location and if necessary inserts new location.</p>"},{"location":"code/frontend/api/api-client/classes/TempClient/#parameters_1","title":"Parameters","text":""},{"location":"code/frontend/api/api-client/classes/TempClient/#postalcode","title":"postalcode?","text":"<p><code>number</code></p> <p>(optional) Defines the location.</p>"},{"location":"code/frontend/api/api-client/classes/TempClient/#returns_2","title":"Returns","text":"<p><code>Promise</code>\\&lt;<code>FileResponse</code>&gt;</p> <p>Ok if successful; otherwise, an error response.</p>"},{"location":"code/frontend/api/api-client/classes/TempClient/#processgetallpostalcodes","title":"processGetAllPostalcodes()","text":"<p><code>protected</code> processGetAllPostalcodes(<code>response</code>): <code>Promise</code>\\&lt;<code>FileResponse</code>&gt;</p> <p>Defined in: api/api-client.ts:314</p>"},{"location":"code/frontend/api/api-client/classes/TempClient/#parameters_2","title":"Parameters","text":""},{"location":"code/frontend/api/api-client/classes/TempClient/#response","title":"response","text":"<p><code>Response</code></p>"},{"location":"code/frontend/api/api-client/classes/TempClient/#returns_3","title":"Returns","text":"<p><code>Promise</code>\\&lt;<code>FileResponse</code>&gt;</p>"},{"location":"code/frontend/api/api-client/classes/TempClient/#processinsertlocation","title":"processInsertLocation()","text":"<p><code>protected</code> processInsertLocation(<code>response</code>): <code>Promise</code>\\&lt;<code>FileResponse</code>&gt;</p> <p>Defined in: api/api-client.ts:361</p>"},{"location":"code/frontend/api/api-client/classes/TempClient/#parameters_3","title":"Parameters","text":""},{"location":"code/frontend/api/api-client/classes/TempClient/#response_1","title":"response","text":"<p><code>Response</code></p>"},{"location":"code/frontend/api/api-client/classes/TempClient/#returns_4","title":"Returns","text":"<p><code>Promise</code>\\&lt;<code>FileResponse</code>&gt;</p>"},{"location":"code/frontend/api/api-client/classes/TempClient/#processremovepostalcode","title":"processRemovePostalcode()","text":"<p><code>protected</code> processRemovePostalcode(<code>response</code>): <code>Promise</code>\\&lt;<code>void</code>&gt;</p> <p>Defined in: api/api-client.ts:402</p>"},{"location":"code/frontend/api/api-client/classes/TempClient/#parameters_4","title":"Parameters","text":""},{"location":"code/frontend/api/api-client/classes/TempClient/#response_2","title":"response","text":"<p><code>Response</code></p>"},{"location":"code/frontend/api/api-client/classes/TempClient/#returns_5","title":"Returns","text":"<p><code>Promise</code>\\&lt;<code>void</code>&gt;</p>"},{"location":"code/frontend/api/api-client/classes/TempClient/#removepostalcode","title":"removePostalcode()","text":"<p>removePostalcode(<code>postalCode?</code>): <code>Promise</code>\\&lt;<code>void</code>&gt;</p> <p>Defined in: api/api-client.ts:383</p>"},{"location":"code/frontend/api/api-client/classes/TempClient/#parameters_5","title":"Parameters","text":""},{"location":"code/frontend/api/api-client/classes/TempClient/#postalcode_1","title":"postalCode?","text":"<p><code>number</code></p>"},{"location":"code/frontend/api/api-client/classes/TempClient/#returns_6","title":"Returns","text":"<p><code>Promise</code>\\&lt;<code>void</code>&gt;</p>"},{"location":"code/frontend/api/api-client/classes/TemperatureData/","title":"TemperatureData","text":"<p>isopruefi-frontend v1.0.0</p> <p>isopruefi-frontend / api/api-client / TemperatureData</p>"},{"location":"code/frontend/api/api-client/classes/TemperatureData/#class-temperaturedata","title":"Class: TemperatureData","text":"<p>Defined in: api/api-client.ts:1193</p> <p>Represents a single temperature data point with timestamp and value.</p>"},{"location":"code/frontend/api/api-client/classes/TemperatureData/#implements","title":"Implements","text":"<ul> <li><code>ITemperatureData</code></li> </ul>"},{"location":"code/frontend/api/api-client/classes/TemperatureData/#constructors","title":"Constructors","text":""},{"location":"code/frontend/api/api-client/classes/TemperatureData/#constructor","title":"Constructor","text":"<p>new TemperatureData(<code>data?</code>): <code>TemperatureData</code></p> <p>Defined in: api/api-client.ts:1199</p>"},{"location":"code/frontend/api/api-client/classes/TemperatureData/#parameters","title":"Parameters","text":""},{"location":"code/frontend/api/api-client/classes/TemperatureData/#data","title":"data?","text":"<p><code>ITemperatureData</code></p>"},{"location":"code/frontend/api/api-client/classes/TemperatureData/#returns","title":"Returns","text":"<p><code>TemperatureData</code></p>"},{"location":"code/frontend/api/api-client/classes/TemperatureData/#properties","title":"Properties","text":""},{"location":"code/frontend/api/api-client/classes/TemperatureData/#temperature","title":"temperature?","text":"<p><code>optional</code> temperature: <code>number</code></p> <p>Defined in: api/api-client.ts:1197</p> <p>Gets or sets the temperature value.</p>"},{"location":"code/frontend/api/api-client/classes/TemperatureData/#implementation-of","title":"Implementation of","text":"<p><code>ITemperatureData</code>.<code>temperature</code></p>"},{"location":"code/frontend/api/api-client/classes/TemperatureData/#timestamp","title":"timestamp?","text":"<p><code>optional</code> timestamp: <code>Date</code></p> <p>Defined in: api/api-client.ts:1195</p> <p>Gets or sets the timestamp of the temperature measurement.</p>"},{"location":"code/frontend/api/api-client/classes/TemperatureData/#implementation-of_1","title":"Implementation of","text":"<p><code>ITemperatureData</code>.<code>timestamp</code></p>"},{"location":"code/frontend/api/api-client/classes/TemperatureData/#methods","title":"Methods","text":""},{"location":"code/frontend/api/api-client/classes/TemperatureData/#init","title":"init()","text":"<p>init(<code>_data?</code>): <code>void</code></p> <p>Defined in: api/api-client.ts:1208</p>"},{"location":"code/frontend/api/api-client/classes/TemperatureData/#parameters_1","title":"Parameters","text":""},{"location":"code/frontend/api/api-client/classes/TemperatureData/#_data","title":"_data?","text":"<p><code>any</code></p>"},{"location":"code/frontend/api/api-client/classes/TemperatureData/#returns_1","title":"Returns","text":"<p><code>void</code></p>"},{"location":"code/frontend/api/api-client/classes/TemperatureData/#tojson","title":"toJSON()","text":"<p>toJSON(<code>data?</code>): <code>any</code></p> <p>Defined in: api/api-client.ts:1222</p>"},{"location":"code/frontend/api/api-client/classes/TemperatureData/#parameters_2","title":"Parameters","text":""},{"location":"code/frontend/api/api-client/classes/TemperatureData/#data_1","title":"data?","text":"<p><code>any</code></p>"},{"location":"code/frontend/api/api-client/classes/TemperatureData/#returns_2","title":"Returns","text":"<p><code>any</code></p>"},{"location":"code/frontend/api/api-client/classes/TemperatureData/#fromjs","title":"fromJS()","text":"<p><code>static</code> fromJS(<code>data</code>): <code>TemperatureData</code></p> <p>Defined in: api/api-client.ts:1215</p>"},{"location":"code/frontend/api/api-client/classes/TemperatureData/#parameters_3","title":"Parameters","text":""},{"location":"code/frontend/api/api-client/classes/TemperatureData/#data_2","title":"data","text":"<p><code>any</code></p>"},{"location":"code/frontend/api/api-client/classes/TemperatureData/#returns_3","title":"Returns","text":"<p><code>TemperatureData</code></p>"},{"location":"code/frontend/api/api-client/classes/TemperatureDataClient/","title":"TemperatureDataClient","text":"<p>isopruefi-frontend v1.0.0</p> <p>isopruefi-frontend / api/api-client / TemperatureDataClient</p>"},{"location":"code/frontend/api/api-client/classes/TemperatureDataClient/#class-temperaturedataclient","title":"Class: TemperatureDataClient","text":"<p>Defined in: api/api-client.ts:190</p>"},{"location":"code/frontend/api/api-client/classes/TemperatureDataClient/#constructors","title":"Constructors","text":""},{"location":"code/frontend/api/api-client/classes/TemperatureDataClient/#constructor","title":"Constructor","text":"<p>new TemperatureDataClient(<code>baseUrl?</code>, <code>http?</code>): <code>TemperatureDataClient</code></p> <p>Defined in: api/api-client.ts:195</p>"},{"location":"code/frontend/api/api-client/classes/TemperatureDataClient/#parameters","title":"Parameters","text":""},{"location":"code/frontend/api/api-client/classes/TemperatureDataClient/#baseurl","title":"baseUrl?","text":"<p><code>string</code></p>"},{"location":"code/frontend/api/api-client/classes/TemperatureDataClient/#http","title":"http?","text":""},{"location":"code/frontend/api/api-client/classes/TemperatureDataClient/#fetch","title":"fetch","text":""},{"location":"code/frontend/api/api-client/classes/TemperatureDataClient/#returns","title":"Returns","text":"<p><code>TemperatureDataClient</code></p>"},{"location":"code/frontend/api/api-client/classes/TemperatureDataClient/#properties","title":"Properties","text":""},{"location":"code/frontend/api/api-client/classes/TemperatureDataClient/#jsonparsereviver","title":"jsonParseReviver","text":"<p><code>protected</code> jsonParseReviver: <code>undefined</code> | (<code>key</code>, <code>value</code>) =&gt; <code>any</code> = <code>undefined</code></p> <p>Defined in: api/api-client.ts:193</p>"},{"location":"code/frontend/api/api-client/classes/TemperatureDataClient/#methods","title":"Methods","text":""},{"location":"code/frontend/api/api-client/classes/TemperatureDataClient/#gettemperature","title":"getTemperature()","text":"<p>getTemperature(<code>start?</code>, <code>end?</code>, <code>place?</code>, <code>isFahrenheit?</code>): <code>Promise</code>\\&lt;<code>TemperatureDataOverview</code>&gt;</p> <p>Defined in: api/api-client.ts:208</p> <p>Retrieves comprehensive temperature data for a specified time range and location.</p>"},{"location":"code/frontend/api/api-client/classes/TemperatureDataClient/#parameters_1","title":"Parameters","text":""},{"location":"code/frontend/api/api-client/classes/TemperatureDataClient/#start","title":"start?","text":"<p><code>Date</code></p> <p>(optional) Start date and time for the data range (ISO 8601 format).</p>"},{"location":"code/frontend/api/api-client/classes/TemperatureDataClient/#end","title":"end?","text":"<p><code>Date</code></p> <p>(optional) End date and time for the data range (ISO 8601 format).</p>"},{"location":"code/frontend/api/api-client/classes/TemperatureDataClient/#place","title":"place?","text":"<p><code>string</code></p> <p>(optional) Location name for external weather data (e.g., \"Berlin\", \"Munich\").</p>"},{"location":"code/frontend/api/api-client/classes/TemperatureDataClient/#isfahrenheit","title":"isFahrenheit?","text":"<p><code>boolean</code></p> <p>(optional) Optional. If true, converts all temperatures to Fahrenheit. Default is false (Celsius).</p>"},{"location":"code/frontend/api/api-client/classes/TemperatureDataClient/#returns_1","title":"Returns","text":"<p><code>Promise</code>\\&lt;<code>TemperatureDataOverview</code>&gt;</p> <p>Successfully retrieved temperature data. Returns comprehensive temperature overview.</p>"},{"location":"code/frontend/api/api-client/classes/TemperatureDataClient/#processgettemperature","title":"processGetTemperature()","text":"<p><code>protected</code> processGetTemperature(<code>response</code>): <code>Promise</code>\\&lt;<code>TemperatureDataOverview</code>&gt;</p> <p>Defined in: api/api-client.ts:240</p>"},{"location":"code/frontend/api/api-client/classes/TemperatureDataClient/#parameters_2","title":"Parameters","text":""},{"location":"code/frontend/api/api-client/classes/TemperatureDataClient/#response","title":"response","text":"<p><code>Response</code></p>"},{"location":"code/frontend/api/api-client/classes/TemperatureDataClient/#returns_2","title":"Returns","text":"<p><code>Promise</code>\\&lt;<code>TemperatureDataOverview</code>&gt;</p>"},{"location":"code/frontend/api/api-client/classes/TemperatureDataOverview/","title":"TemperatureDataOverview","text":"<p>isopruefi-frontend v1.0.0</p> <p>isopruefi-frontend / api/api-client / TemperatureDataOverview</p>"},{"location":"code/frontend/api/api-client/classes/TemperatureDataOverview/#class-temperaturedataoverview","title":"Class: TemperatureDataOverview","text":"<p>Defined in: api/api-client.ts:1117</p> <p>Represents an overview of temperature data for different locations.</p>"},{"location":"code/frontend/api/api-client/classes/TemperatureDataOverview/#implements","title":"Implements","text":"<ul> <li><code>ITemperatureDataOverview</code></li> </ul>"},{"location":"code/frontend/api/api-client/classes/TemperatureDataOverview/#constructors","title":"Constructors","text":""},{"location":"code/frontend/api/api-client/classes/TemperatureDataOverview/#constructor","title":"Constructor","text":"<p>new TemperatureDataOverview(<code>data?</code>): <code>TemperatureDataOverview</code></p> <p>Defined in: api/api-client.ts:1125</p>"},{"location":"code/frontend/api/api-client/classes/TemperatureDataOverview/#parameters","title":"Parameters","text":""},{"location":"code/frontend/api/api-client/classes/TemperatureDataOverview/#data","title":"data?","text":"<p><code>ITemperatureDataOverview</code></p>"},{"location":"code/frontend/api/api-client/classes/TemperatureDataOverview/#returns","title":"Returns","text":"<p><code>TemperatureDataOverview</code></p>"},{"location":"code/frontend/api/api-client/classes/TemperatureDataOverview/#properties","title":"Properties","text":""},{"location":"code/frontend/api/api-client/classes/TemperatureDataOverview/#temperaturenord","title":"temperatureNord?","text":"<p><code>optional</code> temperatureNord: <code>TemperatureData</code>[]</p> <p>Defined in: api/api-client.ts:1121</p> <p>Gets or sets the list of temperature data for the north location.</p>"},{"location":"code/frontend/api/api-client/classes/TemperatureDataOverview/#implementation-of","title":"Implementation of","text":"<p><code>ITemperatureDataOverview</code>.<code>temperatureNord</code></p>"},{"location":"code/frontend/api/api-client/classes/TemperatureDataOverview/#temperatureoutside","title":"temperatureOutside?","text":"<p><code>optional</code> temperatureOutside: <code>TemperatureData</code>[]</p> <p>Defined in: api/api-client.ts:1123</p> <p>Gets or sets the list of temperature data for the outside location.</p>"},{"location":"code/frontend/api/api-client/classes/TemperatureDataOverview/#implementation-of_1","title":"Implementation of","text":"<p><code>ITemperatureDataOverview</code>.<code>temperatureOutside</code></p>"},{"location":"code/frontend/api/api-client/classes/TemperatureDataOverview/#temperaturesouth","title":"temperatureSouth?","text":"<p><code>optional</code> temperatureSouth: <code>TemperatureData</code>[]</p> <p>Defined in: api/api-client.ts:1119</p> <p>Gets or sets the list of temperature data for the south location.</p>"},{"location":"code/frontend/api/api-client/classes/TemperatureDataOverview/#implementation-of_2","title":"Implementation of","text":"<p><code>ITemperatureDataOverview</code>.<code>temperatureSouth</code></p>"},{"location":"code/frontend/api/api-client/classes/TemperatureDataOverview/#methods","title":"Methods","text":""},{"location":"code/frontend/api/api-client/classes/TemperatureDataOverview/#init","title":"init()","text":"<p>init(<code>_data?</code>): <code>void</code></p> <p>Defined in: api/api-client.ts:1134</p>"},{"location":"code/frontend/api/api-client/classes/TemperatureDataOverview/#parameters_1","title":"Parameters","text":""},{"location":"code/frontend/api/api-client/classes/TemperatureDataOverview/#_data","title":"_data?","text":"<p><code>any</code></p>"},{"location":"code/frontend/api/api-client/classes/TemperatureDataOverview/#returns_1","title":"Returns","text":"<p><code>void</code></p>"},{"location":"code/frontend/api/api-client/classes/TemperatureDataOverview/#tojson","title":"toJSON()","text":"<p>toJSON(<code>data?</code>): <code>any</code></p> <p>Defined in: api/api-client.ts:1161</p>"},{"location":"code/frontend/api/api-client/classes/TemperatureDataOverview/#parameters_2","title":"Parameters","text":""},{"location":"code/frontend/api/api-client/classes/TemperatureDataOverview/#data_1","title":"data?","text":"<p><code>any</code></p>"},{"location":"code/frontend/api/api-client/classes/TemperatureDataOverview/#returns_2","title":"Returns","text":"<p><code>any</code></p>"},{"location":"code/frontend/api/api-client/classes/TemperatureDataOverview/#fromjs","title":"fromJS()","text":"<p><code>static</code> fromJS(<code>data</code>): <code>TemperatureDataOverview</code></p> <p>Defined in: api/api-client.ts:1154</p>"},{"location":"code/frontend/api/api-client/classes/TemperatureDataOverview/#parameters_3","title":"Parameters","text":""},{"location":"code/frontend/api/api-client/classes/TemperatureDataOverview/#data_2","title":"data","text":"<p><code>any</code></p>"},{"location":"code/frontend/api/api-client/classes/TemperatureDataOverview/#returns_3","title":"Returns","text":"<p><code>TemperatureDataOverview</code></p>"},{"location":"code/frontend/api/api-client/classes/TopicClient/","title":"TopicClient","text":"<p>isopruefi-frontend v1.0.0</p> <p>isopruefi-frontend / api/api-client / TopicClient</p>"},{"location":"code/frontend/api/api-client/classes/TopicClient/#class-topicclient","title":"Class: TopicClient","text":"<p>Defined in: api/api-client.ts:418</p>"},{"location":"code/frontend/api/api-client/classes/TopicClient/#constructors","title":"Constructors","text":""},{"location":"code/frontend/api/api-client/classes/TopicClient/#constructor","title":"Constructor","text":"<p>new TopicClient(<code>baseUrl?</code>, <code>http?</code>): <code>TopicClient</code></p> <p>Defined in: api/api-client.ts:423</p>"},{"location":"code/frontend/api/api-client/classes/TopicClient/#parameters","title":"Parameters","text":""},{"location":"code/frontend/api/api-client/classes/TopicClient/#baseurl","title":"baseUrl?","text":"<p><code>string</code></p>"},{"location":"code/frontend/api/api-client/classes/TopicClient/#http","title":"http?","text":""},{"location":"code/frontend/api/api-client/classes/TopicClient/#fetch","title":"fetch","text":""},{"location":"code/frontend/api/api-client/classes/TopicClient/#returns","title":"Returns","text":"<p><code>TopicClient</code></p>"},{"location":"code/frontend/api/api-client/classes/TopicClient/#properties","title":"Properties","text":""},{"location":"code/frontend/api/api-client/classes/TopicClient/#jsonparsereviver","title":"jsonParseReviver","text":"<p><code>protected</code> jsonParseReviver: <code>undefined</code> | (<code>key</code>, <code>value</code>) =&gt; <code>any</code> = <code>undefined</code></p> <p>Defined in: api/api-client.ts:421</p>"},{"location":"code/frontend/api/api-client/classes/TopicClient/#methods","title":"Methods","text":""},{"location":"code/frontend/api/api-client/classes/TopicClient/#createtopic","title":"createTopic()","text":"<p>createTopic(<code>topicSetting</code>): <code>Promise</code>\\&lt;<code>any</code>&gt;</p> <p>Defined in: api/api-client.ts:496</p> <p>Creates a new MQTT topic configuration for sensor monitoring.</p>"},{"location":"code/frontend/api/api-client/classes/TopicClient/#parameters_1","title":"Parameters","text":""},{"location":"code/frontend/api/api-client/classes/TopicClient/#topicsetting","title":"topicSetting","text":"<p><code>TopicSetting</code></p> <p>The complete topic setting configuration to create.</p>"},{"location":"code/frontend/api/api-client/classes/TopicClient/#returns_1","title":"Returns","text":"<p><code>Promise</code>\\&lt;<code>any</code>&gt;</p> <p>Topic setting created successfully. Returns the new topic ID.</p>"},{"location":"code/frontend/api/api-client/classes/TopicClient/#deletetopic","title":"deleteTopic()","text":"<p>deleteTopic(<code>topicSetting</code>): <code>Promise</code>\\&lt;<code>any</code>&gt;</p> <p>Defined in: api/api-client.ts:624</p>"},{"location":"code/frontend/api/api-client/classes/TopicClient/#parameters_2","title":"Parameters","text":""},{"location":"code/frontend/api/api-client/classes/TopicClient/#topicsetting_1","title":"topicSetting","text":"<p><code>TopicSetting</code></p>"},{"location":"code/frontend/api/api-client/classes/TopicClient/#returns_2","title":"Returns","text":"<p><code>Promise</code>\\&lt;<code>any</code>&gt;</p>"},{"location":"code/frontend/api/api-client/classes/TopicClient/#getalltopics","title":"getAllTopics()","text":"<p>getAllTopics(): <code>Promise</code>\\&lt;<code>TopicSetting</code>[]&gt;</p> <p>Defined in: api/api-client.ts:432</p> <p>Retrieves all configured MQTT topic settings from the system.</p>"},{"location":"code/frontend/api/api-client/classes/TopicClient/#returns_3","title":"Returns","text":"<p><code>Promise</code>\\&lt;<code>TopicSetting</code>[]&gt;</p> <p>Successfully retrieved all topic settings.</p>"},{"location":"code/frontend/api/api-client/classes/TopicClient/#processcreatetopic","title":"processCreateTopic()","text":"<p><code>protected</code> processCreateTopic(<code>response</code>): <code>Promise</code>\\&lt;<code>any</code>&gt;</p> <p>Defined in: api/api-client.ts:516</p>"},{"location":"code/frontend/api/api-client/classes/TopicClient/#parameters_3","title":"Parameters","text":""},{"location":"code/frontend/api/api-client/classes/TopicClient/#response","title":"response","text":"<p><code>Response</code></p>"},{"location":"code/frontend/api/api-client/classes/TopicClient/#returns_4","title":"Returns","text":"<p><code>Promise</code>\\&lt;<code>any</code>&gt;</p>"},{"location":"code/frontend/api/api-client/classes/TopicClient/#processdeletetopic","title":"processDeleteTopic()","text":"<p><code>protected</code> processDeleteTopic(<code>response</code>): <code>Promise</code>\\&lt;<code>any</code>&gt;</p> <p>Defined in: api/api-client.ts:644</p>"},{"location":"code/frontend/api/api-client/classes/TopicClient/#parameters_4","title":"Parameters","text":""},{"location":"code/frontend/api/api-client/classes/TopicClient/#response_1","title":"response","text":"<p><code>Response</code></p>"},{"location":"code/frontend/api/api-client/classes/TopicClient/#returns_5","title":"Returns","text":"<p><code>Promise</code>\\&lt;<code>any</code>&gt;</p>"},{"location":"code/frontend/api/api-client/classes/TopicClient/#processgetalltopics","title":"processGetAllTopics()","text":"<p><code>protected</code> processGetAllTopics(<code>response</code>): <code>Promise</code>\\&lt;<code>TopicSetting</code>[]&gt;</p> <p>Defined in: api/api-client.ts:448</p>"},{"location":"code/frontend/api/api-client/classes/TopicClient/#parameters_5","title":"Parameters","text":""},{"location":"code/frontend/api/api-client/classes/TopicClient/#response_2","title":"response","text":"<p><code>Response</code></p>"},{"location":"code/frontend/api/api-client/classes/TopicClient/#returns_6","title":"Returns","text":"<p><code>Promise</code>\\&lt;<code>TopicSetting</code>[]&gt;</p>"},{"location":"code/frontend/api/api-client/classes/TopicClient/#processupdatetopic","title":"processUpdateTopic()","text":"<p><code>protected</code> processUpdateTopic(<code>response</code>): <code>Promise</code>\\&lt;<code>any</code>&gt;</p> <p>Defined in: api/api-client.ts:580</p>"},{"location":"code/frontend/api/api-client/classes/TopicClient/#parameters_6","title":"Parameters","text":""},{"location":"code/frontend/api/api-client/classes/TopicClient/#response_3","title":"response","text":"<p><code>Response</code></p>"},{"location":"code/frontend/api/api-client/classes/TopicClient/#returns_7","title":"Returns","text":"<p><code>Promise</code>\\&lt;<code>any</code>&gt;</p>"},{"location":"code/frontend/api/api-client/classes/TopicClient/#updatetopic","title":"updateTopic()","text":"<p>updateTopic(<code>topicSetting</code>): <code>Promise</code>\\&lt;<code>any</code>&gt;</p> <p>Defined in: api/api-client.ts:560</p>"},{"location":"code/frontend/api/api-client/classes/TopicClient/#parameters_7","title":"Parameters","text":""},{"location":"code/frontend/api/api-client/classes/TopicClient/#topicsetting_2","title":"topicSetting","text":"<p><code>TopicSetting</code></p>"},{"location":"code/frontend/api/api-client/classes/TopicClient/#returns_8","title":"Returns","text":"<p><code>Promise</code>\\&lt;<code>any</code>&gt;</p>"},{"location":"code/frontend/api/api-client/classes/TopicSetting/","title":"TopicSetting","text":"<p>isopruefi-frontend v1.0.0</p> <p>isopruefi-frontend / api/api-client / TopicSetting</p>"},{"location":"code/frontend/api/api-client/classes/TopicSetting/#class-topicsetting","title":"Class: TopicSetting","text":"<p>Defined in: api/api-client.ts:1239</p> <p>Represents the settings for a specific MQTT topic, including default path, group, and sensor information.</p>"},{"location":"code/frontend/api/api-client/classes/TopicSetting/#implements","title":"Implements","text":"<ul> <li><code>ITopicSetting</code></li> </ul>"},{"location":"code/frontend/api/api-client/classes/TopicSetting/#constructors","title":"Constructors","text":""},{"location":"code/frontend/api/api-client/classes/TopicSetting/#constructor","title":"Constructor","text":"<p>new TopicSetting(<code>data?</code>): <code>TopicSetting</code></p> <p>Defined in: api/api-client.ts:1255</p>"},{"location":"code/frontend/api/api-client/classes/TopicSetting/#parameters","title":"Parameters","text":""},{"location":"code/frontend/api/api-client/classes/TopicSetting/#data","title":"data?","text":"<p><code>ITopicSetting</code></p>"},{"location":"code/frontend/api/api-client/classes/TopicSetting/#returns","title":"Returns","text":"<p><code>TopicSetting</code></p>"},{"location":"code/frontend/api/api-client/classes/TopicSetting/#properties","title":"Properties","text":""},{"location":"code/frontend/api/api-client/classes/TopicSetting/#defaulttopicpath","title":"defaultTopicPath?","text":"<p><code>optional</code> defaultTopicPath: <code>string</code></p> <p>Defined in: api/api-client.ts:1243</p> <p>Gets or sets the default MQTT topic path for this setting.</p>"},{"location":"code/frontend/api/api-client/classes/TopicSetting/#implementation-of","title":"Implementation of","text":"<p><code>ITopicSetting</code>.<code>defaultTopicPath</code></p>"},{"location":"code/frontend/api/api-client/classes/TopicSetting/#groupid","title":"groupId?","text":"<p><code>optional</code> groupId: <code>number</code></p> <p>Defined in: api/api-client.ts:1245</p> <p>Gets or sets the group identifier associated with this topic setting.</p>"},{"location":"code/frontend/api/api-client/classes/TopicSetting/#implementation-of_1","title":"Implementation of","text":"<p><code>ITopicSetting</code>.<code>groupId</code></p>"},{"location":"code/frontend/api/api-client/classes/TopicSetting/#hasrecovery","title":"hasRecovery?","text":"<p><code>optional</code> hasRecovery: <code>boolean</code></p> <p>Defined in: api/api-client.ts:1253</p> <p>Gets or sets a value indicating whether this topic setting has recovery enabled.</p>"},{"location":"code/frontend/api/api-client/classes/TopicSetting/#implementation-of_2","title":"Implementation of","text":"<p><code>ITopicSetting</code>.<code>hasRecovery</code></p>"},{"location":"code/frontend/api/api-client/classes/TopicSetting/#sensorlocation","title":"sensorLocation?","text":"<p><code>optional</code> sensorLocation: <code>string</code></p> <p>Defined in: api/api-client.ts:1251</p> <p>Gets or sets the location of the sensor.</p>"},{"location":"code/frontend/api/api-client/classes/TopicSetting/#implementation-of_3","title":"Implementation of","text":"<p><code>ITopicSetting</code>.<code>sensorLocation</code></p>"},{"location":"code/frontend/api/api-client/classes/TopicSetting/#sensorname","title":"sensorName?","text":"<p><code>optional</code> sensorName: <code>string</code></p> <p>Defined in: api/api-client.ts:1249</p> <p>Gets or sets the name of the sensor.</p>"},{"location":"code/frontend/api/api-client/classes/TopicSetting/#implementation-of_4","title":"Implementation of","text":"<p><code>ITopicSetting</code>.<code>sensorName</code></p>"},{"location":"code/frontend/api/api-client/classes/TopicSetting/#sensortype","title":"sensorType?","text":"<p><code>optional</code> sensorType: <code>string</code></p> <p>Defined in: api/api-client.ts:1247</p> <p>Gets or sets the type of sensor (e.g., temperature, humidity).</p>"},{"location":"code/frontend/api/api-client/classes/TopicSetting/#implementation-of_5","title":"Implementation of","text":"<p><code>ITopicSetting</code>.<code>sensorType</code></p>"},{"location":"code/frontend/api/api-client/classes/TopicSetting/#topicsettingid","title":"topicSettingId?","text":"<p><code>optional</code> topicSettingId: <code>number</code></p> <p>Defined in: api/api-client.ts:1241</p> <p>Gets or sets the unique identifier for the TopicSetting entity.</p>"},{"location":"code/frontend/api/api-client/classes/TopicSetting/#implementation-of_6","title":"Implementation of","text":"<p><code>ITopicSetting</code>.<code>topicSettingId</code></p>"},{"location":"code/frontend/api/api-client/classes/TopicSetting/#methods","title":"Methods","text":""},{"location":"code/frontend/api/api-client/classes/TopicSetting/#init","title":"init()","text":"<p>init(<code>_data?</code>): <code>void</code></p> <p>Defined in: api/api-client.ts:1264</p>"},{"location":"code/frontend/api/api-client/classes/TopicSetting/#parameters_1","title":"Parameters","text":""},{"location":"code/frontend/api/api-client/classes/TopicSetting/#_data","title":"_data?","text":"<p><code>any</code></p>"},{"location":"code/frontend/api/api-client/classes/TopicSetting/#returns_1","title":"Returns","text":"<p><code>void</code></p>"},{"location":"code/frontend/api/api-client/classes/TopicSetting/#tojson","title":"toJSON()","text":"<p>toJSON(<code>data?</code>): <code>any</code></p> <p>Defined in: api/api-client.ts:1283</p>"},{"location":"code/frontend/api/api-client/classes/TopicSetting/#parameters_2","title":"Parameters","text":""},{"location":"code/frontend/api/api-client/classes/TopicSetting/#data_1","title":"data?","text":"<p><code>any</code></p>"},{"location":"code/frontend/api/api-client/classes/TopicSetting/#returns_2","title":"Returns","text":"<p><code>any</code></p>"},{"location":"code/frontend/api/api-client/classes/TopicSetting/#fromjs","title":"fromJS()","text":"<p><code>static</code> fromJS(<code>data</code>): <code>TopicSetting</code></p> <p>Defined in: api/api-client.ts:1276</p>"},{"location":"code/frontend/api/api-client/classes/TopicSetting/#parameters_3","title":"Parameters","text":""},{"location":"code/frontend/api/api-client/classes/TopicSetting/#data_2","title":"data","text":"<p><code>any</code></p>"},{"location":"code/frontend/api/api-client/classes/TopicSetting/#returns_3","title":"Returns","text":"<p><code>TopicSetting</code></p>"},{"location":"code/frontend/api/api-client/classes/UserInfoClient/","title":"UserInfoClient","text":"<p>isopruefi-frontend v1.0.0</p> <p>isopruefi-frontend / api/api-client / UserInfoClient</p>"},{"location":"code/frontend/api/api-client/classes/UserInfoClient/#class-userinfoclient","title":"Class: UserInfoClient","text":"<p>Defined in: api/api-client.ts:689</p>"},{"location":"code/frontend/api/api-client/classes/UserInfoClient/#constructors","title":"Constructors","text":""},{"location":"code/frontend/api/api-client/classes/UserInfoClient/#constructor","title":"Constructor","text":"<p>new UserInfoClient(<code>baseUrl?</code>, <code>http?</code>): <code>UserInfoClient</code></p> <p>Defined in: api/api-client.ts:694</p>"},{"location":"code/frontend/api/api-client/classes/UserInfoClient/#parameters","title":"Parameters","text":""},{"location":"code/frontend/api/api-client/classes/UserInfoClient/#baseurl","title":"baseUrl?","text":"<p><code>string</code></p>"},{"location":"code/frontend/api/api-client/classes/UserInfoClient/#http","title":"http?","text":""},{"location":"code/frontend/api/api-client/classes/UserInfoClient/#fetch","title":"fetch","text":""},{"location":"code/frontend/api/api-client/classes/UserInfoClient/#returns","title":"Returns","text":"<p><code>UserInfoClient</code></p>"},{"location":"code/frontend/api/api-client/classes/UserInfoClient/#properties","title":"Properties","text":""},{"location":"code/frontend/api/api-client/classes/UserInfoClient/#jsonparsereviver","title":"jsonParseReviver","text":"<p><code>protected</code> jsonParseReviver: <code>undefined</code> | (<code>key</code>, <code>value</code>) =&gt; <code>any</code> = <code>undefined</code></p> <p>Defined in: api/api-client.ts:692</p>"},{"location":"code/frontend/api/api-client/classes/UserInfoClient/#methods","title":"Methods","text":""},{"location":"code/frontend/api/api-client/classes/UserInfoClient/#changepassword","title":"changePassword()","text":"<p>changePassword(<code>input</code>): <code>Promise</code>\\&lt;<code>FileResponse</code>&gt;</p> <p>Defined in: api/api-client.ts:751</p> <p>Changes the password for a user.</p>"},{"location":"code/frontend/api/api-client/classes/UserInfoClient/#parameters_1","title":"Parameters","text":""},{"location":"code/frontend/api/api-client/classes/UserInfoClient/#input","title":"input","text":"<p><code>ChangePassword</code></p> <p>The change password request containing user ID, current password, and new password.</p>"},{"location":"code/frontend/api/api-client/classes/UserInfoClient/#returns_1","title":"Returns","text":"<p><code>Promise</code>\\&lt;<code>FileResponse</code>&gt;</p> <p>Ok if successful; otherwise, an error response.</p>"},{"location":"code/frontend/api/api-client/classes/UserInfoClient/#changeuser","title":"changeUser()","text":"<p>changeUser(<code>user</code>): <code>Promise</code>\\&lt;<code>FileResponse</code>&gt;</p> <p>Defined in: api/api-client.ts:798</p> <p>Updates user information.</p>"},{"location":"code/frontend/api/api-client/classes/UserInfoClient/#parameters_2","title":"Parameters","text":""},{"location":"code/frontend/api/api-client/classes/UserInfoClient/#user","title":"user","text":"<p><code>ApiUser</code></p> <p>The user object with updated information.</p>"},{"location":"code/frontend/api/api-client/classes/UserInfoClient/#returns_2","title":"Returns","text":"<p><code>Promise</code>\\&lt;<code>FileResponse</code>&gt;</p> <p>Ok if successful; otherwise, an error response.</p>"},{"location":"code/frontend/api/api-client/classes/UserInfoClient/#deleteuser","title":"deleteUser()","text":"<p>deleteUser(<code>userId?</code>): <code>Promise</code>\\&lt;<code>FileResponse</code>&gt;</p> <p>Defined in: api/api-client.ts:845</p> <p>Deletes a user by their unique identifier.</p>"},{"location":"code/frontend/api/api-client/classes/UserInfoClient/#parameters_3","title":"Parameters","text":""},{"location":"code/frontend/api/api-client/classes/UserInfoClient/#userid","title":"userId?","text":"<p><code>string</code></p> <p>(optional) The unique identifier of the user to delete.</p>"},{"location":"code/frontend/api/api-client/classes/UserInfoClient/#returns_3","title":"Returns","text":"<p><code>Promise</code>\\&lt;<code>FileResponse</code>&gt;</p> <p>Ok if successful; otherwise, an error response.</p>"},{"location":"code/frontend/api/api-client/classes/UserInfoClient/#getuserbyid","title":"getUserById()","text":"<p>getUserById(<code>userId?</code>): <code>Promise</code>\\&lt;<code>FileResponse</code>&gt;</p> <p>Defined in: api/api-client.ts:704</p> <p>Retrieves a user by their unique identifier.</p>"},{"location":"code/frontend/api/api-client/classes/UserInfoClient/#parameters_4","title":"Parameters","text":""},{"location":"code/frontend/api/api-client/classes/UserInfoClient/#userid_1","title":"userId?","text":"<p><code>string</code></p> <p>(optional) The unique identifier of the user.</p>"},{"location":"code/frontend/api/api-client/classes/UserInfoClient/#returns_4","title":"Returns","text":"<p><code>Promise</code>\\&lt;<code>FileResponse</code>&gt;</p> <p>The user information if found; otherwise, NotFound.</p>"},{"location":"code/frontend/api/api-client/classes/UserInfoClient/#processchangepassword","title":"processChangePassword()","text":"<p><code>protected</code> processChangePassword(<code>response</code>): <code>Promise</code>\\&lt;<code>FileResponse</code>&gt;</p> <p>Defined in: api/api-client.ts:771</p>"},{"location":"code/frontend/api/api-client/classes/UserInfoClient/#parameters_5","title":"Parameters","text":""},{"location":"code/frontend/api/api-client/classes/UserInfoClient/#response","title":"response","text":"<p><code>Response</code></p>"},{"location":"code/frontend/api/api-client/classes/UserInfoClient/#returns_5","title":"Returns","text":"<p><code>Promise</code>\\&lt;<code>FileResponse</code>&gt;</p>"},{"location":"code/frontend/api/api-client/classes/UserInfoClient/#processchangeuser","title":"processChangeUser()","text":"<p><code>protected</code> processChangeUser(<code>response</code>): <code>Promise</code>\\&lt;<code>FileResponse</code>&gt;</p> <p>Defined in: api/api-client.ts:818</p>"},{"location":"code/frontend/api/api-client/classes/UserInfoClient/#parameters_6","title":"Parameters","text":""},{"location":"code/frontend/api/api-client/classes/UserInfoClient/#response_1","title":"response","text":"<p><code>Response</code></p>"},{"location":"code/frontend/api/api-client/classes/UserInfoClient/#returns_6","title":"Returns","text":"<p><code>Promise</code>\\&lt;<code>FileResponse</code>&gt;</p>"},{"location":"code/frontend/api/api-client/classes/UserInfoClient/#processdeleteuser","title":"processDeleteUser()","text":"<p><code>protected</code> processDeleteUser(<code>response</code>): <code>Promise</code>\\&lt;<code>FileResponse</code>&gt;</p> <p>Defined in: api/api-client.ts:865</p>"},{"location":"code/frontend/api/api-client/classes/UserInfoClient/#parameters_7","title":"Parameters","text":""},{"location":"code/frontend/api/api-client/classes/UserInfoClient/#response_2","title":"response","text":"<p><code>Response</code></p>"},{"location":"code/frontend/api/api-client/classes/UserInfoClient/#returns_7","title":"Returns","text":"<p><code>Promise</code>\\&lt;<code>FileResponse</code>&gt;</p>"},{"location":"code/frontend/api/api-client/classes/UserInfoClient/#processgetuserbyid","title":"processGetUserById()","text":"<p><code>protected</code> processGetUserById(<code>response</code>): <code>Promise</code>\\&lt;<code>FileResponse</code>&gt;</p> <p>Defined in: api/api-client.ts:724</p>"},{"location":"code/frontend/api/api-client/classes/UserInfoClient/#parameters_8","title":"Parameters","text":""},{"location":"code/frontend/api/api-client/classes/UserInfoClient/#response_3","title":"response","text":"<p><code>Response</code></p>"},{"location":"code/frontend/api/api-client/classes/UserInfoClient/#returns_8","title":"Returns","text":"<p><code>Promise</code>\\&lt;<code>FileResponse</code>&gt;</p>"},{"location":"code/frontend/api/api-client/interfaces/FileResponse/","title":"FileResponse","text":"<p>isopruefi-frontend v1.0.0</p> <p>isopruefi-frontend / api/api-client / FileResponse</p>"},{"location":"code/frontend/api/api-client/interfaces/FileResponse/#interface-fileresponse","title":"Interface: FileResponse","text":"<p>Defined in: api/api-client.ts:1548</p>"},{"location":"code/frontend/api/api-client/interfaces/FileResponse/#properties","title":"Properties","text":""},{"location":"code/frontend/api/api-client/interfaces/FileResponse/#data","title":"data","text":"<p>data: <code>Blob</code></p> <p>Defined in: api/api-client.ts:1549</p>"},{"location":"code/frontend/api/api-client/interfaces/FileResponse/#filename","title":"fileName?","text":"<p><code>optional</code> fileName: <code>string</code></p> <p>Defined in: api/api-client.ts:1551</p>"},{"location":"code/frontend/api/api-client/interfaces/FileResponse/#headers","title":"headers?","text":"<p><code>optional</code> headers: <code>object</code></p> <p>Defined in: api/api-client.ts:1552</p>"},{"location":"code/frontend/api/api-client/interfaces/FileResponse/#index-signature","title":"Index Signature","text":"<p>[<code>name</code>: <code>string</code>]: <code>any</code></p>"},{"location":"code/frontend/api/api-client/interfaces/FileResponse/#status","title":"status","text":"<p>status: <code>number</code></p> <p>Defined in: api/api-client.ts:1550</p>"},{"location":"code/frontend/api/api-client/interfaces/IApiUser/","title":"IApiUser","text":"<p>isopruefi-frontend v1.0.0</p> <p>isopruefi-frontend / api/api-client / IApiUser</p>"},{"location":"code/frontend/api/api-client/interfaces/IApiUser/#interface-iapiuser","title":"Interface: IApiUser","text":"<p>Defined in: api/api-client.ts:1545</p> <p>Represents an application user in the system</p>"},{"location":"code/frontend/api/api-client/interfaces/IApiUser/#extends","title":"Extends","text":"<ul> <li><code>IIdentityUser</code></li> </ul>"},{"location":"code/frontend/api/api-client/interfaces/IApiUser/#properties","title":"Properties","text":""},{"location":"code/frontend/api/api-client/interfaces/IApiUser/#accessfailedcount","title":"accessFailedCount?","text":"<p><code>optional</code> accessFailedCount: <code>number</code></p> <p>Defined in: api/api-client.ts:1487</p> <p>Gets or sets the number of failed login attempts for the current user.</p>"},{"location":"code/frontend/api/api-client/interfaces/IApiUser/#inherited-from","title":"Inherited from","text":"<p><code>IIdentityUser</code>.<code>accessFailedCount</code></p>"},{"location":"code/frontend/api/api-client/interfaces/IApiUser/#concurrencystamp","title":"concurrencyStamp?","text":"<p><code>optional</code> concurrencyStamp: <code>string</code></p> <p>Defined in: api/api-client.ts:1475</p> <p>A random value that must change whenever a user is persisted to the store</p>"},{"location":"code/frontend/api/api-client/interfaces/IApiUser/#inherited-from_1","title":"Inherited from","text":"<p><code>IIdentityUser</code>.<code>concurrencyStamp</code></p>"},{"location":"code/frontend/api/api-client/interfaces/IApiUser/#email","title":"email?","text":"<p><code>optional</code> email: <code>string</code></p> <p>Defined in: api/api-client.ts:1465</p> <p>Gets or sets the email address for this user.</p>"},{"location":"code/frontend/api/api-client/interfaces/IApiUser/#inherited-from_2","title":"Inherited from","text":"<p><code>IIdentityUser</code>.<code>email</code></p>"},{"location":"code/frontend/api/api-client/interfaces/IApiUser/#emailconfirmed","title":"emailConfirmed?","text":"<p><code>optional</code> emailConfirmed: <code>boolean</code></p> <p>Defined in: api/api-client.ts:1469</p> <p>Gets or sets a flag indicating if a user has confirmed their email address.</p>"},{"location":"code/frontend/api/api-client/interfaces/IApiUser/#inherited-from_3","title":"Inherited from","text":"<p><code>IIdentityUser</code>.<code>emailConfirmed</code></p>"},{"location":"code/frontend/api/api-client/interfaces/IApiUser/#id","title":"id?","text":"<p><code>optional</code> id: <code>string</code></p> <p>Defined in: api/api-client.ts:1459</p> <p>Gets or sets the primary key for this user.</p>"},{"location":"code/frontend/api/api-client/interfaces/IApiUser/#inherited-from_4","title":"Inherited from","text":"<p><code>IIdentityUser</code>.<code>id</code></p>"},{"location":"code/frontend/api/api-client/interfaces/IApiUser/#lockoutenabled","title":"lockoutEnabled?","text":"<p><code>optional</code> lockoutEnabled: <code>boolean</code></p> <p>Defined in: api/api-client.ts:1485</p> <p>Gets or sets a flag indicating if the user could be locked out.</p>"},{"location":"code/frontend/api/api-client/interfaces/IApiUser/#inherited-from_5","title":"Inherited from","text":"<p><code>IIdentityUser</code>.<code>lockoutEnabled</code></p>"},{"location":"code/frontend/api/api-client/interfaces/IApiUser/#lockoutend","title":"lockoutEnd?","text":"<p><code>optional</code> lockoutEnd: <code>Date</code></p> <p>Defined in: api/api-client.ts:1483</p> <p>Gets or sets the date and time, in UTC, when any user lockout ends.</p>"},{"location":"code/frontend/api/api-client/interfaces/IApiUser/#inherited-from_6","title":"Inherited from","text":"<p><code>IIdentityUser</code>.<code>lockoutEnd</code></p>"},{"location":"code/frontend/api/api-client/interfaces/IApiUser/#normalizedemail","title":"normalizedEmail?","text":"<p><code>optional</code> normalizedEmail: <code>string</code></p> <p>Defined in: api/api-client.ts:1467</p> <p>Gets or sets the normalized email address for this user.</p>"},{"location":"code/frontend/api/api-client/interfaces/IApiUser/#inherited-from_7","title":"Inherited from","text":"<p><code>IIdentityUser</code>.<code>normalizedEmail</code></p>"},{"location":"code/frontend/api/api-client/interfaces/IApiUser/#normalizedusername","title":"normalizedUserName?","text":"<p><code>optional</code> normalizedUserName: <code>string</code></p> <p>Defined in: api/api-client.ts:1463</p> <p>Gets or sets the normalized user name for this user.</p>"},{"location":"code/frontend/api/api-client/interfaces/IApiUser/#inherited-from_8","title":"Inherited from","text":"<p><code>IIdentityUser</code>.<code>normalizedUserName</code></p>"},{"location":"code/frontend/api/api-client/interfaces/IApiUser/#passwordhash","title":"passwordHash?","text":"<p><code>optional</code> passwordHash: <code>string</code></p> <p>Defined in: api/api-client.ts:1471</p> <p>Gets or sets a salted and hashed representation of the password for this user.</p>"},{"location":"code/frontend/api/api-client/interfaces/IApiUser/#inherited-from_9","title":"Inherited from","text":"<p><code>IIdentityUser</code>.<code>passwordHash</code></p>"},{"location":"code/frontend/api/api-client/interfaces/IApiUser/#phonenumber","title":"phoneNumber?","text":"<p><code>optional</code> phoneNumber: <code>string</code></p> <p>Defined in: api/api-client.ts:1477</p> <p>Gets or sets a telephone number for the user.</p>"},{"location":"code/frontend/api/api-client/interfaces/IApiUser/#inherited-from_10","title":"Inherited from","text":"<p><code>IIdentityUser</code>.<code>phoneNumber</code></p>"},{"location":"code/frontend/api/api-client/interfaces/IApiUser/#phonenumberconfirmed","title":"phoneNumberConfirmed?","text":"<p><code>optional</code> phoneNumberConfirmed: <code>boolean</code></p> <p>Defined in: api/api-client.ts:1479</p> <p>Gets or sets a flag indicating if a user has confirmed their telephone address.</p>"},{"location":"code/frontend/api/api-client/interfaces/IApiUser/#inherited-from_11","title":"Inherited from","text":"<p><code>IIdentityUser</code>.<code>phoneNumberConfirmed</code></p>"},{"location":"code/frontend/api/api-client/interfaces/IApiUser/#securitystamp","title":"securityStamp?","text":"<p><code>optional</code> securityStamp: <code>string</code></p> <p>Defined in: api/api-client.ts:1473</p> <p>A random value that must change whenever a users credentials change (password changed, login removed)</p>"},{"location":"code/frontend/api/api-client/interfaces/IApiUser/#inherited-from_12","title":"Inherited from","text":"<p><code>IIdentityUser</code>.<code>securityStamp</code></p>"},{"location":"code/frontend/api/api-client/interfaces/IApiUser/#twofactorenabled","title":"twoFactorEnabled?","text":"<p><code>optional</code> twoFactorEnabled: <code>boolean</code></p> <p>Defined in: api/api-client.ts:1481</p> <p>Gets or sets a flag indicating if two factor authentication is enabled for this user.</p>"},{"location":"code/frontend/api/api-client/interfaces/IApiUser/#inherited-from_13","title":"Inherited from","text":"<p><code>IIdentityUser</code>.<code>twoFactorEnabled</code></p>"},{"location":"code/frontend/api/api-client/interfaces/IApiUser/#username","title":"userName?","text":"<p><code>optional</code> userName: <code>string</code></p> <p>Defined in: api/api-client.ts:1461</p> <p>Gets or sets the user name for this user.</p>"},{"location":"code/frontend/api/api-client/interfaces/IApiUser/#inherited-from_14","title":"Inherited from","text":"<p><code>IIdentityUser</code>.<code>userName</code></p>"},{"location":"code/frontend/api/api-client/interfaces/IChangePassword/","title":"IChangePassword","text":"<p>isopruefi-frontend v1.0.0</p> <p>isopruefi-frontend / api/api-client / IChangePassword</p>"},{"location":"code/frontend/api/api-client/interfaces/IChangePassword/#interface-ichangepassword","title":"Interface: IChangePassword","text":"<p>Defined in: api/api-client.ts:1357</p> <p>Represents a request to change a user's password.</p>"},{"location":"code/frontend/api/api-client/interfaces/IChangePassword/#properties","title":"Properties","text":""},{"location":"code/frontend/api/api-client/interfaces/IChangePassword/#currentpassword","title":"currentPassword?","text":"<p><code>optional</code> currentPassword: <code>string</code></p> <p>Defined in: api/api-client.ts:1361</p> <p>Gets or sets the current password of the user.</p>"},{"location":"code/frontend/api/api-client/interfaces/IChangePassword/#newpassword","title":"newPassword?","text":"<p><code>optional</code> newPassword: <code>string</code></p> <p>Defined in: api/api-client.ts:1363</p> <p>Gets or sets the new password to be set for the user.</p>"},{"location":"code/frontend/api/api-client/interfaces/IChangePassword/#userid","title":"userId?","text":"<p><code>optional</code> userId: <code>string</code></p> <p>Defined in: api/api-client.ts:1359</p> <p>Gets or sets the unique identifier of the user whose password is to be changed.</p>"},{"location":"code/frontend/api/api-client/interfaces/IIdentityUser/","title":"IIdentityUser","text":"<p>isopruefi-frontend v1.0.0</p> <p>isopruefi-frontend / api/api-client / IIdentityUser</p>"},{"location":"code/frontend/api/api-client/interfaces/IIdentityUser/#interface-iidentityuser","title":"Interface: IIdentityUser","text":"<p>Defined in: api/api-client.ts:1516</p> <p>The default implementation of IdentityUser`1 which uses a string as a primary key.</p>"},{"location":"code/frontend/api/api-client/interfaces/IIdentityUser/#extends","title":"Extends","text":"<ul> <li><code>IIdentityUserOfString</code></li> </ul>"},{"location":"code/frontend/api/api-client/interfaces/IIdentityUser/#extended-by","title":"Extended by","text":"<ul> <li><code>IApiUser</code></li> </ul>"},{"location":"code/frontend/api/api-client/interfaces/IIdentityUser/#properties","title":"Properties","text":""},{"location":"code/frontend/api/api-client/interfaces/IIdentityUser/#accessfailedcount","title":"accessFailedCount?","text":"<p><code>optional</code> accessFailedCount: <code>number</code></p> <p>Defined in: api/api-client.ts:1487</p> <p>Gets or sets the number of failed login attempts for the current user.</p>"},{"location":"code/frontend/api/api-client/interfaces/IIdentityUser/#inherited-from","title":"Inherited from","text":"<p><code>IIdentityUserOfString</code>.<code>accessFailedCount</code></p>"},{"location":"code/frontend/api/api-client/interfaces/IIdentityUser/#concurrencystamp","title":"concurrencyStamp?","text":"<p><code>optional</code> concurrencyStamp: <code>string</code></p> <p>Defined in: api/api-client.ts:1475</p> <p>A random value that must change whenever a user is persisted to the store</p>"},{"location":"code/frontend/api/api-client/interfaces/IIdentityUser/#inherited-from_1","title":"Inherited from","text":"<p><code>IIdentityUserOfString</code>.<code>concurrencyStamp</code></p>"},{"location":"code/frontend/api/api-client/interfaces/IIdentityUser/#email","title":"email?","text":"<p><code>optional</code> email: <code>string</code></p> <p>Defined in: api/api-client.ts:1465</p> <p>Gets or sets the email address for this user.</p>"},{"location":"code/frontend/api/api-client/interfaces/IIdentityUser/#inherited-from_2","title":"Inherited from","text":"<p><code>IIdentityUserOfString</code>.<code>email</code></p>"},{"location":"code/frontend/api/api-client/interfaces/IIdentityUser/#emailconfirmed","title":"emailConfirmed?","text":"<p><code>optional</code> emailConfirmed: <code>boolean</code></p> <p>Defined in: api/api-client.ts:1469</p> <p>Gets or sets a flag indicating if a user has confirmed their email address.</p>"},{"location":"code/frontend/api/api-client/interfaces/IIdentityUser/#inherited-from_3","title":"Inherited from","text":"<p><code>IIdentityUserOfString</code>.<code>emailConfirmed</code></p>"},{"location":"code/frontend/api/api-client/interfaces/IIdentityUser/#id","title":"id?","text":"<p><code>optional</code> id: <code>string</code></p> <p>Defined in: api/api-client.ts:1459</p> <p>Gets or sets the primary key for this user.</p>"},{"location":"code/frontend/api/api-client/interfaces/IIdentityUser/#inherited-from_4","title":"Inherited from","text":"<p><code>IIdentityUserOfString</code>.<code>id</code></p>"},{"location":"code/frontend/api/api-client/interfaces/IIdentityUser/#lockoutenabled","title":"lockoutEnabled?","text":"<p><code>optional</code> lockoutEnabled: <code>boolean</code></p> <p>Defined in: api/api-client.ts:1485</p> <p>Gets or sets a flag indicating if the user could be locked out.</p>"},{"location":"code/frontend/api/api-client/interfaces/IIdentityUser/#inherited-from_5","title":"Inherited from","text":"<p><code>IIdentityUserOfString</code>.<code>lockoutEnabled</code></p>"},{"location":"code/frontend/api/api-client/interfaces/IIdentityUser/#lockoutend","title":"lockoutEnd?","text":"<p><code>optional</code> lockoutEnd: <code>Date</code></p> <p>Defined in: api/api-client.ts:1483</p> <p>Gets or sets the date and time, in UTC, when any user lockout ends.</p>"},{"location":"code/frontend/api/api-client/interfaces/IIdentityUser/#inherited-from_6","title":"Inherited from","text":"<p><code>IIdentityUserOfString</code>.<code>lockoutEnd</code></p>"},{"location":"code/frontend/api/api-client/interfaces/IIdentityUser/#normalizedemail","title":"normalizedEmail?","text":"<p><code>optional</code> normalizedEmail: <code>string</code></p> <p>Defined in: api/api-client.ts:1467</p> <p>Gets or sets the normalized email address for this user.</p>"},{"location":"code/frontend/api/api-client/interfaces/IIdentityUser/#inherited-from_7","title":"Inherited from","text":"<p><code>IIdentityUserOfString</code>.<code>normalizedEmail</code></p>"},{"location":"code/frontend/api/api-client/interfaces/IIdentityUser/#normalizedusername","title":"normalizedUserName?","text":"<p><code>optional</code> normalizedUserName: <code>string</code></p> <p>Defined in: api/api-client.ts:1463</p> <p>Gets or sets the normalized user name for this user.</p>"},{"location":"code/frontend/api/api-client/interfaces/IIdentityUser/#inherited-from_8","title":"Inherited from","text":"<p><code>IIdentityUserOfString</code>.<code>normalizedUserName</code></p>"},{"location":"code/frontend/api/api-client/interfaces/IIdentityUser/#passwordhash","title":"passwordHash?","text":"<p><code>optional</code> passwordHash: <code>string</code></p> <p>Defined in: api/api-client.ts:1471</p> <p>Gets or sets a salted and hashed representation of the password for this user.</p>"},{"location":"code/frontend/api/api-client/interfaces/IIdentityUser/#inherited-from_9","title":"Inherited from","text":"<p><code>IIdentityUserOfString</code>.<code>passwordHash</code></p>"},{"location":"code/frontend/api/api-client/interfaces/IIdentityUser/#phonenumber","title":"phoneNumber?","text":"<p><code>optional</code> phoneNumber: <code>string</code></p> <p>Defined in: api/api-client.ts:1477</p> <p>Gets or sets a telephone number for the user.</p>"},{"location":"code/frontend/api/api-client/interfaces/IIdentityUser/#inherited-from_10","title":"Inherited from","text":"<p><code>IIdentityUserOfString</code>.<code>phoneNumber</code></p>"},{"location":"code/frontend/api/api-client/interfaces/IIdentityUser/#phonenumberconfirmed","title":"phoneNumberConfirmed?","text":"<p><code>optional</code> phoneNumberConfirmed: <code>boolean</code></p> <p>Defined in: api/api-client.ts:1479</p> <p>Gets or sets a flag indicating if a user has confirmed their telephone address.</p>"},{"location":"code/frontend/api/api-client/interfaces/IIdentityUser/#inherited-from_11","title":"Inherited from","text":"<p><code>IIdentityUserOfString</code>.<code>phoneNumberConfirmed</code></p>"},{"location":"code/frontend/api/api-client/interfaces/IIdentityUser/#securitystamp","title":"securityStamp?","text":"<p><code>optional</code> securityStamp: <code>string</code></p> <p>Defined in: api/api-client.ts:1473</p> <p>A random value that must change whenever a users credentials change (password changed, login removed)</p>"},{"location":"code/frontend/api/api-client/interfaces/IIdentityUser/#inherited-from_12","title":"Inherited from","text":"<p><code>IIdentityUserOfString</code>.<code>securityStamp</code></p>"},{"location":"code/frontend/api/api-client/interfaces/IIdentityUser/#twofactorenabled","title":"twoFactorEnabled?","text":"<p><code>optional</code> twoFactorEnabled: <code>boolean</code></p> <p>Defined in: api/api-client.ts:1481</p> <p>Gets or sets a flag indicating if two factor authentication is enabled for this user.</p>"},{"location":"code/frontend/api/api-client/interfaces/IIdentityUser/#inherited-from_13","title":"Inherited from","text":"<p><code>IIdentityUserOfString</code>.<code>twoFactorEnabled</code></p>"},{"location":"code/frontend/api/api-client/interfaces/IIdentityUser/#username","title":"userName?","text":"<p><code>optional</code> userName: <code>string</code></p> <p>Defined in: api/api-client.ts:1461</p> <p>Gets or sets the user name for this user.</p>"},{"location":"code/frontend/api/api-client/interfaces/IIdentityUser/#inherited-from_14","title":"Inherited from","text":"<p><code>IIdentityUserOfString</code>.<code>userName</code></p>"},{"location":"code/frontend/api/api-client/interfaces/IIdentityUserOfString/","title":"IIdentityUserOfString","text":"<p>isopruefi-frontend v1.0.0</p> <p>isopruefi-frontend / api/api-client / IIdentityUserOfString</p>"},{"location":"code/frontend/api/api-client/interfaces/IIdentityUserOfString/#interface-iidentityuserofstring","title":"Interface: IIdentityUserOfString","text":"<p>Defined in: api/api-client.ts:1457</p> <p>Represents a user in the identity system</p>"},{"location":"code/frontend/api/api-client/interfaces/IIdentityUserOfString/#extended-by","title":"Extended by","text":"<ul> <li><code>IIdentityUser</code></li> </ul>"},{"location":"code/frontend/api/api-client/interfaces/IIdentityUserOfString/#properties","title":"Properties","text":""},{"location":"code/frontend/api/api-client/interfaces/IIdentityUserOfString/#accessfailedcount","title":"accessFailedCount?","text":"<p><code>optional</code> accessFailedCount: <code>number</code></p> <p>Defined in: api/api-client.ts:1487</p> <p>Gets or sets the number of failed login attempts for the current user.</p>"},{"location":"code/frontend/api/api-client/interfaces/IIdentityUserOfString/#concurrencystamp","title":"concurrencyStamp?","text":"<p><code>optional</code> concurrencyStamp: <code>string</code></p> <p>Defined in: api/api-client.ts:1475</p> <p>A random value that must change whenever a user is persisted to the store</p>"},{"location":"code/frontend/api/api-client/interfaces/IIdentityUserOfString/#email","title":"email?","text":"<p><code>optional</code> email: <code>string</code></p> <p>Defined in: api/api-client.ts:1465</p> <p>Gets or sets the email address for this user.</p>"},{"location":"code/frontend/api/api-client/interfaces/IIdentityUserOfString/#emailconfirmed","title":"emailConfirmed?","text":"<p><code>optional</code> emailConfirmed: <code>boolean</code></p> <p>Defined in: api/api-client.ts:1469</p> <p>Gets or sets a flag indicating if a user has confirmed their email address.</p>"},{"location":"code/frontend/api/api-client/interfaces/IIdentityUserOfString/#id","title":"id?","text":"<p><code>optional</code> id: <code>string</code></p> <p>Defined in: api/api-client.ts:1459</p> <p>Gets or sets the primary key for this user.</p>"},{"location":"code/frontend/api/api-client/interfaces/IIdentityUserOfString/#lockoutenabled","title":"lockoutEnabled?","text":"<p><code>optional</code> lockoutEnabled: <code>boolean</code></p> <p>Defined in: api/api-client.ts:1485</p> <p>Gets or sets a flag indicating if the user could be locked out.</p>"},{"location":"code/frontend/api/api-client/interfaces/IIdentityUserOfString/#lockoutend","title":"lockoutEnd?","text":"<p><code>optional</code> lockoutEnd: <code>Date</code></p> <p>Defined in: api/api-client.ts:1483</p> <p>Gets or sets the date and time, in UTC, when any user lockout ends.</p>"},{"location":"code/frontend/api/api-client/interfaces/IIdentityUserOfString/#normalizedemail","title":"normalizedEmail?","text":"<p><code>optional</code> normalizedEmail: <code>string</code></p> <p>Defined in: api/api-client.ts:1467</p> <p>Gets or sets the normalized email address for this user.</p>"},{"location":"code/frontend/api/api-client/interfaces/IIdentityUserOfString/#normalizedusername","title":"normalizedUserName?","text":"<p><code>optional</code> normalizedUserName: <code>string</code></p> <p>Defined in: api/api-client.ts:1463</p> <p>Gets or sets the normalized user name for this user.</p>"},{"location":"code/frontend/api/api-client/interfaces/IIdentityUserOfString/#passwordhash","title":"passwordHash?","text":"<p><code>optional</code> passwordHash: <code>string</code></p> <p>Defined in: api/api-client.ts:1471</p> <p>Gets or sets a salted and hashed representation of the password for this user.</p>"},{"location":"code/frontend/api/api-client/interfaces/IIdentityUserOfString/#phonenumber","title":"phoneNumber?","text":"<p><code>optional</code> phoneNumber: <code>string</code></p> <p>Defined in: api/api-client.ts:1477</p> <p>Gets or sets a telephone number for the user.</p>"},{"location":"code/frontend/api/api-client/interfaces/IIdentityUserOfString/#phonenumberconfirmed","title":"phoneNumberConfirmed?","text":"<p><code>optional</code> phoneNumberConfirmed: <code>boolean</code></p> <p>Defined in: api/api-client.ts:1479</p> <p>Gets or sets a flag indicating if a user has confirmed their telephone address.</p>"},{"location":"code/frontend/api/api-client/interfaces/IIdentityUserOfString/#securitystamp","title":"securityStamp?","text":"<p><code>optional</code> securityStamp: <code>string</code></p> <p>Defined in: api/api-client.ts:1473</p> <p>A random value that must change whenever a users credentials change (password changed, login removed)</p>"},{"location":"code/frontend/api/api-client/interfaces/IIdentityUserOfString/#twofactorenabled","title":"twoFactorEnabled?","text":"<p><code>optional</code> twoFactorEnabled: <code>boolean</code></p> <p>Defined in: api/api-client.ts:1481</p> <p>Gets or sets a flag indicating if two factor authentication is enabled for this user.</p>"},{"location":"code/frontend/api/api-client/interfaces/IIdentityUserOfString/#username","title":"userName?","text":"<p><code>optional</code> userName: <code>string</code></p> <p>Defined in: api/api-client.ts:1461</p> <p>Gets or sets the user name for this user.</p>"},{"location":"code/frontend/api/api-client/interfaces/IJwtToken/","title":"IJwtToken","text":"<p>isopruefi-frontend v1.0.0</p> <p>isopruefi-frontend / api/api-client / IJwtToken</p>"},{"location":"code/frontend/api/api-client/interfaces/IJwtToken/#interface-ijwttoken","title":"Interface: IJwtToken","text":"<p>Defined in: api/api-client.ts:1103</p> <p>Represents a JWT token and its associated refresh token and metadata.</p>"},{"location":"code/frontend/api/api-client/interfaces/IJwtToken/#properties","title":"Properties","text":""},{"location":"code/frontend/api/api-client/interfaces/IJwtToken/#createddate","title":"createdDate?","text":"<p><code>optional</code> createdDate: <code>Date</code></p> <p>Defined in: api/api-client.ts:1111</p> <p>Gets or sets the creation date and time of the JWT token.</p>"},{"location":"code/frontend/api/api-client/interfaces/IJwtToken/#expirydate","title":"expiryDate?","text":"<p><code>optional</code> expiryDate: <code>Date</code></p> <p>Defined in: api/api-client.ts:1109</p> <p>Gets or sets the expiry date and time of the JWT token.</p>"},{"location":"code/frontend/api/api-client/interfaces/IJwtToken/#refreshtoken","title":"refreshToken?","text":"<p><code>optional</code> refreshToken: <code>string</code></p> <p>Defined in: api/api-client.ts:1107</p> <p>Gets or sets the refresh token string.</p>"},{"location":"code/frontend/api/api-client/interfaces/IJwtToken/#roles","title":"roles?","text":"<p><code>optional</code> roles: <code>string</code>[]</p> <p>Defined in: api/api-client.ts:1113</p> <p>Gets or sets the user roles associated with the JWT token.</p>"},{"location":"code/frontend/api/api-client/interfaces/IJwtToken/#token","title":"token?","text":"<p><code>optional</code> token: <code>string</code></p> <p>Defined in: api/api-client.ts:1105</p> <p>Gets or sets the JWT access token string.</p>"},{"location":"code/frontend/api/api-client/interfaces/ILogin/","title":"ILogin","text":"<p>isopruefi-frontend v1.0.0</p> <p>isopruefi-frontend / api/api-client / ILogin</p>"},{"location":"code/frontend/api/api-client/interfaces/ILogin/#interface-ilogin","title":"Interface: ILogin","text":"<p>Defined in: api/api-client.ts:927</p> <p>Represents the login credentials for a user.</p>"},{"location":"code/frontend/api/api-client/interfaces/ILogin/#properties","title":"Properties","text":""},{"location":"code/frontend/api/api-client/interfaces/ILogin/#password","title":"password","text":"<p>password: <code>string</code></p> <p>Defined in: api/api-client.ts:931</p> <p>Gets or sets the password of the user.</p>"},{"location":"code/frontend/api/api-client/interfaces/ILogin/#username","title":"userName","text":"<p>userName: <code>string</code></p> <p>Defined in: api/api-client.ts:929</p> <p>Gets or sets the username of the user.</p>"},{"location":"code/frontend/api/api-client/interfaces/IProblemDetails/","title":"IProblemDetails","text":"<p>isopruefi-frontend v1.0.0</p> <p>isopruefi-frontend / api/api-client / IProblemDetails</p>"},{"location":"code/frontend/api/api-client/interfaces/IProblemDetails/#interface-iproblemdetails","title":"Interface: IProblemDetails","text":"<p>Defined in: api/api-client.ts:988</p>"},{"location":"code/frontend/api/api-client/interfaces/IProblemDetails/#indexable","title":"Indexable","text":"<p>[<code>key</code>: <code>string</code>]: <code>any</code></p>"},{"location":"code/frontend/api/api-client/interfaces/IProblemDetails/#properties","title":"Properties","text":""},{"location":"code/frontend/api/api-client/interfaces/IProblemDetails/#detail","title":"detail?","text":"<p><code>optional</code> detail: <code>string</code></p> <p>Defined in: api/api-client.ts:992</p>"},{"location":"code/frontend/api/api-client/interfaces/IProblemDetails/#instance","title":"instance?","text":"<p><code>optional</code> instance: <code>string</code></p> <p>Defined in: api/api-client.ts:993</p>"},{"location":"code/frontend/api/api-client/interfaces/IProblemDetails/#status","title":"status?","text":"<p><code>optional</code> status: <code>number</code></p> <p>Defined in: api/api-client.ts:991</p>"},{"location":"code/frontend/api/api-client/interfaces/IProblemDetails/#title","title":"title?","text":"<p><code>optional</code> title: <code>string</code></p> <p>Defined in: api/api-client.ts:990</p>"},{"location":"code/frontend/api/api-client/interfaces/IProblemDetails/#type","title":"type?","text":"<p><code>optional</code> type: <code>string</code></p> <p>Defined in: api/api-client.ts:989</p>"},{"location":"code/frontend/api/api-client/interfaces/IRegister/","title":"IRegister","text":"<p>isopruefi-frontend v1.0.0</p> <p>isopruefi-frontend / api/api-client / IRegister</p>"},{"location":"code/frontend/api/api-client/interfaces/IRegister/#interface-iregister","title":"Interface: IRegister","text":"<p>Defined in: api/api-client.ts:1037</p> <p>Represents the registration credentials for a new user.</p>"},{"location":"code/frontend/api/api-client/interfaces/IRegister/#properties","title":"Properties","text":""},{"location":"code/frontend/api/api-client/interfaces/IRegister/#password","title":"password","text":"<p>password: <code>string</code></p> <p>Defined in: api/api-client.ts:1041</p> <p>Gets or sets the password for the new user.</p>"},{"location":"code/frontend/api/api-client/interfaces/IRegister/#username","title":"userName","text":"<p>userName: <code>string</code></p> <p>Defined in: api/api-client.ts:1039</p> <p>Gets or sets the username for the new user.</p>"},{"location":"code/frontend/api/api-client/interfaces/ITemperatureData/","title":"ITemperatureData","text":"<p>isopruefi-frontend v1.0.0</p> <p>isopruefi-frontend / api/api-client / ITemperatureData</p>"},{"location":"code/frontend/api/api-client/interfaces/ITemperatureData/#interface-itemperaturedata","title":"Interface: ITemperatureData","text":"<p>Defined in: api/api-client.ts:1231</p> <p>Represents a single temperature data point with timestamp and value.</p>"},{"location":"code/frontend/api/api-client/interfaces/ITemperatureData/#properties","title":"Properties","text":""},{"location":"code/frontend/api/api-client/interfaces/ITemperatureData/#temperature","title":"temperature?","text":"<p><code>optional</code> temperature: <code>number</code></p> <p>Defined in: api/api-client.ts:1235</p> <p>Gets or sets the temperature value.</p>"},{"location":"code/frontend/api/api-client/interfaces/ITemperatureData/#timestamp","title":"timestamp?","text":"<p><code>optional</code> timestamp: <code>Date</code></p> <p>Defined in: api/api-client.ts:1233</p> <p>Gets or sets the timestamp of the temperature measurement.</p>"},{"location":"code/frontend/api/api-client/interfaces/ITemperatureDataOverview/","title":"ITemperatureDataOverview","text":"<p>isopruefi-frontend v1.0.0</p> <p>isopruefi-frontend / api/api-client / ITemperatureDataOverview</p>"},{"location":"code/frontend/api/api-client/interfaces/ITemperatureDataOverview/#interface-itemperaturedataoverview","title":"Interface: ITemperatureDataOverview","text":"<p>Defined in: api/api-client.ts:1183</p> <p>Represents an overview of temperature data for different locations.</p>"},{"location":"code/frontend/api/api-client/interfaces/ITemperatureDataOverview/#properties","title":"Properties","text":""},{"location":"code/frontend/api/api-client/interfaces/ITemperatureDataOverview/#temperaturenord","title":"temperatureNord?","text":"<p><code>optional</code> temperatureNord: <code>TemperatureData</code>[]</p> <p>Defined in: api/api-client.ts:1187</p> <p>Gets or sets the list of temperature data for the north location.</p>"},{"location":"code/frontend/api/api-client/interfaces/ITemperatureDataOverview/#temperatureoutside","title":"temperatureOutside?","text":"<p><code>optional</code> temperatureOutside: <code>TemperatureData</code>[]</p> <p>Defined in: api/api-client.ts:1189</p> <p>Gets or sets the list of temperature data for the outside location.</p>"},{"location":"code/frontend/api/api-client/interfaces/ITemperatureDataOverview/#temperaturesouth","title":"temperatureSouth?","text":"<p><code>optional</code> temperatureSouth: <code>TemperatureData</code>[]</p> <p>Defined in: api/api-client.ts:1185</p> <p>Gets or sets the list of temperature data for the south location.</p>"},{"location":"code/frontend/api/api-client/interfaces/ITopicSetting/","title":"ITopicSetting","text":"<p>isopruefi-frontend v1.0.0</p> <p>isopruefi-frontend / api/api-client / ITopicSetting</p>"},{"location":"code/frontend/api/api-client/interfaces/ITopicSetting/#interface-itopicsetting","title":"Interface: ITopicSetting","text":"<p>Defined in: api/api-client.ts:1297</p> <p>Represents the settings for a specific MQTT topic, including default path, group, and sensor information.</p>"},{"location":"code/frontend/api/api-client/interfaces/ITopicSetting/#properties","title":"Properties","text":""},{"location":"code/frontend/api/api-client/interfaces/ITopicSetting/#defaulttopicpath","title":"defaultTopicPath?","text":"<p><code>optional</code> defaultTopicPath: <code>string</code></p> <p>Defined in: api/api-client.ts:1301</p> <p>Gets or sets the default MQTT topic path for this setting.</p>"},{"location":"code/frontend/api/api-client/interfaces/ITopicSetting/#groupid","title":"groupId?","text":"<p><code>optional</code> groupId: <code>number</code></p> <p>Defined in: api/api-client.ts:1303</p> <p>Gets or sets the group identifier associated with this topic setting.</p>"},{"location":"code/frontend/api/api-client/interfaces/ITopicSetting/#hasrecovery","title":"hasRecovery?","text":"<p><code>optional</code> hasRecovery: <code>boolean</code></p> <p>Defined in: api/api-client.ts:1311</p> <p>Gets or sets a value indicating whether this topic setting has recovery enabled.</p>"},{"location":"code/frontend/api/api-client/interfaces/ITopicSetting/#sensorlocation","title":"sensorLocation?","text":"<p><code>optional</code> sensorLocation: <code>string</code></p> <p>Defined in: api/api-client.ts:1309</p> <p>Gets or sets the location of the sensor.</p>"},{"location":"code/frontend/api/api-client/interfaces/ITopicSetting/#sensorname","title":"sensorName?","text":"<p><code>optional</code> sensorName: <code>string</code></p> <p>Defined in: api/api-client.ts:1307</p> <p>Gets or sets the name of the sensor.</p>"},{"location":"code/frontend/api/api-client/interfaces/ITopicSetting/#sensortype","title":"sensorType?","text":"<p><code>optional</code> sensorType: <code>string</code></p> <p>Defined in: api/api-client.ts:1305</p> <p>Gets or sets the type of sensor (e.g., temperature, humidity).</p>"},{"location":"code/frontend/api/api-client/interfaces/ITopicSetting/#topicsettingid","title":"topicSettingId?","text":"<p><code>optional</code> topicSettingId: <code>number</code></p> <p>Defined in: api/api-client.ts:1299</p> <p>Gets or sets the unique identifier for the TopicSetting entity.</p>"},{"location":"code/frontend/api/clients/","title":"Index","text":"<p>isopruefi-frontend v1.0.0</p> <p>isopruefi-frontend / api/clients</p>"},{"location":"code/frontend/api/clients/#apiclients","title":"api/clients","text":""},{"location":"code/frontend/api/clients/#type-aliases","title":"Type Aliases","text":"<ul> <li>PostalLocation</li> </ul>"},{"location":"code/frontend/api/clients/#variables","title":"Variables","text":"<ul> <li>authClient</li> <li>locationClient</li> <li>tempClient</li> <li>topicClient</li> </ul>"},{"location":"code/frontend/api/clients/#functions","title":"Functions","text":"<ul> <li>addPostalLocation</li> <li>createTopic</li> <li>deleteTopic</li> <li>fetchPostalLocations</li> <li>getAllTopics</li> <li>getStoredLocationName</li> <li>removePostalLocation</li> <li>updateTopic</li> </ul>"},{"location":"code/frontend/api/clients/#references","title":"References","text":""},{"location":"code/frontend/api/clients/#apiexception","title":"ApiException","text":"<p>Re-exports ApiException</p>"},{"location":"code/frontend/api/clients/#topicsetting","title":"TopicSetting","text":"<p>Re-exports TopicSetting</p>"},{"location":"code/frontend/api/clients/functions/addPostalLocation/","title":"addPostalLocation","text":"<p>isopruefi-frontend v1.0.0</p> <p>isopruefi-frontend / api/clients / addPostalLocation</p>"},{"location":"code/frontend/api/clients/functions/addPostalLocation/#function-addpostallocation","title":"Function: addPostalLocation()","text":"<p>addPostalLocation(<code>postalCode</code>): <code>Promise</code>\\&lt;<code>FileResponse</code>&gt;</p> <p>Defined in: api/clients.ts:107</p>"},{"location":"code/frontend/api/clients/functions/addPostalLocation/#parameters","title":"Parameters","text":""},{"location":"code/frontend/api/clients/functions/addPostalLocation/#postalcode","title":"postalCode","text":"<p><code>number</code></p>"},{"location":"code/frontend/api/clients/functions/addPostalLocation/#returns","title":"Returns","text":"<p><code>Promise</code>\\&lt;<code>FileResponse</code>&gt;</p>"},{"location":"code/frontend/api/clients/functions/createTopic/","title":"createTopic","text":"<p>isopruefi-frontend v1.0.0</p> <p>isopruefi-frontend / api/clients / createTopic</p>"},{"location":"code/frontend/api/clients/functions/createTopic/#function-createtopic","title":"Function: createTopic()","text":"<p>createTopic(<code>topicSetting</code>): <code>Promise</code>\\&lt;<code>any</code>&gt;</p> <p>Defined in: api/clients.ts:120</p>"},{"location":"code/frontend/api/clients/functions/createTopic/#parameters","title":"Parameters","text":""},{"location":"code/frontend/api/clients/functions/createTopic/#topicsetting","title":"topicSetting","text":"<p><code>TopicSetting</code></p>"},{"location":"code/frontend/api/clients/functions/createTopic/#returns","title":"Returns","text":"<p><code>Promise</code>\\&lt;<code>any</code>&gt;</p>"},{"location":"code/frontend/api/clients/functions/deleteTopic/","title":"deleteTopic","text":"<p>isopruefi-frontend v1.0.0</p> <p>isopruefi-frontend / api/clients / deleteTopic</p>"},{"location":"code/frontend/api/clients/functions/deleteTopic/#function-deletetopic","title":"Function: deleteTopic()","text":"<p>deleteTopic(<code>topicSetting</code>): <code>Promise</code>\\&lt;<code>any</code>&gt;</p> <p>Defined in: api/clients.ts:128</p>"},{"location":"code/frontend/api/clients/functions/deleteTopic/#parameters","title":"Parameters","text":""},{"location":"code/frontend/api/clients/functions/deleteTopic/#topicsetting","title":"topicSetting","text":"<p><code>TopicSetting</code></p>"},{"location":"code/frontend/api/clients/functions/deleteTopic/#returns","title":"Returns","text":"<p><code>Promise</code>\\&lt;<code>any</code>&gt;</p>"},{"location":"code/frontend/api/clients/functions/fetchPostalLocations/","title":"fetchPostalLocations","text":"<p>isopruefi-frontend v1.0.0</p> <p>isopruefi-frontend / api/clients / fetchPostalLocations</p>"},{"location":"code/frontend/api/clients/functions/fetchPostalLocations/#function-fetchpostallocations","title":"Function: fetchPostalLocations()","text":"<p>fetchPostalLocations(): <code>Promise</code>\\&lt;<code>object</code>[]&gt;</p> <p>Defined in: api/clients.ts:36</p>"},{"location":"code/frontend/api/clients/functions/fetchPostalLocations/#returns","title":"Returns","text":"<p><code>Promise</code>\\&lt;<code>object</code>[]&gt;</p>"},{"location":"code/frontend/api/clients/functions/getAllTopics/","title":"getAllTopics","text":"<p>isopruefi-frontend v1.0.0</p> <p>isopruefi-frontend / api/clients / getAllTopics</p>"},{"location":"code/frontend/api/clients/functions/getAllTopics/#function-getalltopics","title":"Function: getAllTopics()","text":"<p>getAllTopics(): <code>Promise</code>\\&lt;<code>TopicSetting</code>[]&gt;</p> <p>Defined in: api/clients.ts:116</p>"},{"location":"code/frontend/api/clients/functions/getAllTopics/#returns","title":"Returns","text":"<p><code>Promise</code>\\&lt;<code>TopicSetting</code>[]&gt;</p>"},{"location":"code/frontend/api/clients/functions/getStoredLocationName/","title":"getStoredLocationName","text":"<p>isopruefi-frontend v1.0.0</p> <p>isopruefi-frontend / api/clients / getStoredLocationName</p>"},{"location":"code/frontend/api/clients/functions/getStoredLocationName/#function-getstoredlocationname","title":"Function: getStoredLocationName()","text":"<p>getStoredLocationName(<code>displayLocationName</code>): <code>string</code></p> <p>Defined in: api/clients.ts:103</p>"},{"location":"code/frontend/api/clients/functions/getStoredLocationName/#parameters","title":"Parameters","text":""},{"location":"code/frontend/api/clients/functions/getStoredLocationName/#displaylocationname","title":"displayLocationName","text":"<p><code>string</code></p>"},{"location":"code/frontend/api/clients/functions/getStoredLocationName/#returns","title":"Returns","text":"<p><code>string</code></p>"},{"location":"code/frontend/api/clients/functions/removePostalLocation/","title":"removePostalLocation","text":"<p>isopruefi-frontend v1.0.0</p> <p>isopruefi-frontend / api/clients / removePostalLocation</p>"},{"location":"code/frontend/api/clients/functions/removePostalLocation/#function-removepostallocation","title":"Function: removePostalLocation()","text":"<p>removePostalLocation(<code>postalCode</code>): <code>Promise</code>\\&lt;<code>void</code>&gt;</p> <p>Defined in: api/clients.ts:111</p>"},{"location":"code/frontend/api/clients/functions/removePostalLocation/#parameters","title":"Parameters","text":""},{"location":"code/frontend/api/clients/functions/removePostalLocation/#postalcode","title":"postalCode","text":"<p><code>number</code></p>"},{"location":"code/frontend/api/clients/functions/removePostalLocation/#returns","title":"Returns","text":"<p><code>Promise</code>\\&lt;<code>void</code>&gt;</p>"},{"location":"code/frontend/api/clients/functions/updateTopic/","title":"updateTopic","text":"<p>isopruefi-frontend v1.0.0</p> <p>isopruefi-frontend / api/clients / updateTopic</p>"},{"location":"code/frontend/api/clients/functions/updateTopic/#function-updatetopic","title":"Function: updateTopic()","text":"<p>updateTopic(<code>topicSetting</code>): <code>Promise</code>\\&lt;<code>any</code>&gt;</p> <p>Defined in: api/clients.ts:124</p>"},{"location":"code/frontend/api/clients/functions/updateTopic/#parameters","title":"Parameters","text":""},{"location":"code/frontend/api/clients/functions/updateTopic/#topicsetting","title":"topicSetting","text":"<p><code>TopicSetting</code></p>"},{"location":"code/frontend/api/clients/functions/updateTopic/#returns","title":"Returns","text":"<p><code>Promise</code>\\&lt;<code>any</code>&gt;</p>"},{"location":"code/frontend/api/clients/type-aliases/PostalLocation/","title":"PostalLocation","text":"<p>isopruefi-frontend v1.0.0</p> <p>isopruefi-frontend / api/clients / PostalLocation</p>"},{"location":"code/frontend/api/clients/type-aliases/PostalLocation/#type-alias-postallocation","title":"Type Alias: PostalLocation","text":"<p>PostalLocation = <code>object</code></p> <p>Defined in: api/clients.ts:133</p>"},{"location":"code/frontend/api/clients/type-aliases/PostalLocation/#properties","title":"Properties","text":""},{"location":"code/frontend/api/clients/type-aliases/PostalLocation/#locationname","title":"locationName","text":"<p>locationName: <code>string</code></p> <p>Defined in: api/clients.ts:135</p>"},{"location":"code/frontend/api/clients/type-aliases/PostalLocation/#postalcode","title":"postalCode","text":"<p>postalCode: <code>number</code></p> <p>Defined in: api/clients.ts:134</p>"},{"location":"code/frontend/api/clients/variables/authClient/","title":"authClient","text":"<p>isopruefi-frontend v1.0.0</p> <p>isopruefi-frontend / api/clients / authClient</p>"},{"location":"code/frontend/api/clients/variables/authClient/#variable-authclient","title":"Variable: authClient","text":"<p><code>const</code> authClient: <code>AuthenticationClient</code></p> <p>Defined in: api/clients.ts:27</p>"},{"location":"code/frontend/api/clients/variables/locationClient/","title":"locationClient","text":"<p>isopruefi-frontend v1.0.0</p> <p>isopruefi-frontend / api/clients / locationClient</p>"},{"location":"code/frontend/api/clients/variables/locationClient/#variable-locationclient","title":"Variable: locationClient","text":"<p><code>const</code> locationClient: <code>TempClient</code></p> <p>Defined in: api/clients.ts:29</p>"},{"location":"code/frontend/api/clients/variables/tempClient/","title":"tempClient","text":"<p>isopruefi-frontend v1.0.0</p> <p>isopruefi-frontend / api/clients / tempClient</p>"},{"location":"code/frontend/api/clients/variables/tempClient/#variable-tempclient","title":"Variable: tempClient","text":"<p><code>const</code> tempClient: <code>TemperatureDataClient</code></p> <p>Defined in: api/clients.ts:28</p>"},{"location":"code/frontend/api/clients/variables/topicClient/","title":"topicClient","text":"<p>isopruefi-frontend v1.0.0</p> <p>isopruefi-frontend / api/clients / topicClient</p>"},{"location":"code/frontend/api/clients/variables/topicClient/#variable-topicclient","title":"Variable: topicClient","text":"<p><code>const</code> topicClient: <code>TopicClient</code></p> <p>Defined in: api/clients.ts:30</p>"},{"location":"code/frontend/auth/AuthForm/","title":"Index","text":"<p>isopruefi-frontend v1.0.0</p> <p>isopruefi-frontend / auth/AuthForm</p>"},{"location":"code/frontend/auth/AuthForm/#authauthform","title":"auth/AuthForm","text":""},{"location":"code/frontend/auth/AuthForm/#functions","title":"Functions","text":"<ul> <li>default</li> </ul>"},{"location":"code/frontend/auth/AuthForm/functions/default/","title":"Default","text":"<p>isopruefi-frontend v1.0.0</p> <p>isopruefi-frontend / auth/AuthForm / default</p>"},{"location":"code/frontend/auth/AuthForm/functions/default/#function-default","title":"Function: default()","text":"<p>default(<code>__namedParameters</code>): <code>Element</code></p> <p>Defined in: auth/AuthForm.tsx:12</p>"},{"location":"code/frontend/auth/AuthForm/functions/default/#parameters","title":"Parameters","text":""},{"location":"code/frontend/auth/AuthForm/functions/default/#__namedparameters","title":"__namedParameters","text":"<p><code>AuthFormProps</code></p>"},{"location":"code/frontend/auth/AuthForm/functions/default/#returns","title":"Returns","text":"<p><code>Element</code></p>"},{"location":"code/frontend/auth/SignIn/","title":"Index","text":"<p>isopruefi-frontend v1.0.0</p> <p>isopruefi-frontend / auth/SignIn</p>"},{"location":"code/frontend/auth/SignIn/#authsignin","title":"auth/SignIn","text":""},{"location":"code/frontend/auth/SignIn/#functions","title":"Functions","text":"<ul> <li>default</li> </ul>"},{"location":"code/frontend/auth/SignIn/functions/default/","title":"Default","text":"<p>isopruefi-frontend v1.0.0</p> <p>isopruefi-frontend / auth/SignIn / default</p>"},{"location":"code/frontend/auth/SignIn/functions/default/#function-default","title":"Function: default()","text":"<p>default(): <code>Element</code></p> <p>Defined in: auth/SignIn.tsx:3</p>"},{"location":"code/frontend/auth/SignIn/functions/default/#returns","title":"Returns","text":"<p><code>Element</code></p>"},{"location":"code/frontend/auth/SignUp/","title":"Index","text":"<p>isopruefi-frontend v1.0.0</p> <p>isopruefi-frontend / auth/SignUp</p>"},{"location":"code/frontend/auth/SignUp/#authsignup","title":"auth/SignUp","text":""},{"location":"code/frontend/auth/SignUp/#functions","title":"Functions","text":"<ul> <li>default</li> </ul>"},{"location":"code/frontend/auth/SignUp/functions/default/","title":"Default","text":"<p>isopruefi-frontend v1.0.0</p> <p>isopruefi-frontend / auth/SignUp / default</p>"},{"location":"code/frontend/auth/SignUp/functions/default/#function-default","title":"Function: default()","text":"<p>default(): <code>Element</code></p> <p>Defined in: auth/SignUp.tsx:3</p>"},{"location":"code/frontend/auth/SignUp/functions/default/#returns","title":"Returns","text":"<p><code>Element</code></p>"},{"location":"code/frontend/components/Navbar/","title":"Index","text":"<p>isopruefi-frontend v1.0.0</p> <p>isopruefi-frontend / components/Navbar</p>"},{"location":"code/frontend/components/Navbar/#componentsnavbar","title":"components/Navbar","text":""},{"location":"code/frontend/components/ProtectedRoute/","title":"Index","text":"<p>isopruefi-frontend v1.0.0</p> <p>isopruefi-frontend / components/ProtectedRoute</p>"},{"location":"code/frontend/components/ProtectedRoute/#componentsprotectedroute","title":"components/ProtectedRoute","text":""},{"location":"code/frontend/components/Weather/","title":"Index","text":"<p>isopruefi-frontend v1.0.0</p> <p>isopruefi-frontend / components/Weather</p>"},{"location":"code/frontend/components/Weather/#componentsweather","title":"components/Weather","text":""},{"location":"code/frontend/components/Weather/#type-aliases","title":"Type Aliases","text":"<ul> <li>WeatherEntry</li> </ul>"},{"location":"code/frontend/components/Weather/#functions","title":"Functions","text":"<ul> <li>TempChart</li> </ul>"},{"location":"code/frontend/components/Weather/functions/TempChart/","title":"TempChart","text":"<p>isopruefi-frontend v1.0.0</p> <p>isopruefi-frontend / components/Weather / TempChart</p>"},{"location":"code/frontend/components/Weather/functions/TempChart/#function-tempchart","title":"Function: TempChart()","text":"<p>TempChart(<code>__namedParameters</code>): <code>Element</code></p> <p>Defined in: components/Weather.tsx:19</p>"},{"location":"code/frontend/components/Weather/functions/TempChart/#parameters","title":"Parameters","text":""},{"location":"code/frontend/components/Weather/functions/TempChart/#__namedparameters","title":"__namedParameters","text":"<p><code>TempChartProps</code> = <code>{}</code></p>"},{"location":"code/frontend/components/Weather/functions/TempChart/#returns","title":"Returns","text":"<p><code>Element</code></p>"},{"location":"code/frontend/components/Weather/type-aliases/WeatherEntry/","title":"WeatherEntry","text":"<p>isopruefi-frontend v1.0.0</p> <p>isopruefi-frontend / components/Weather / WeatherEntry</p>"},{"location":"code/frontend/components/Weather/type-aliases/WeatherEntry/#type-alias-weatherentry","title":"Type Alias: WeatherEntry","text":"<p>WeatherEntry = <code>object</code></p> <p>Defined in: components/Weather.tsx:7</p>"},{"location":"code/frontend/components/Weather/type-aliases/WeatherEntry/#properties","title":"Properties","text":""},{"location":"code/frontend/components/Weather/type-aliases/WeatherEntry/#tempnorth","title":"tempNorth","text":"<p>tempNorth: <code>number</code></p> <p>Defined in: components/Weather.tsx:10</p>"},{"location":"code/frontend/components/Weather/type-aliases/WeatherEntry/#tempoutside","title":"tempOutside","text":"<p>tempOutside: <code>number</code></p> <p>Defined in: components/Weather.tsx:11</p>"},{"location":"code/frontend/components/Weather/type-aliases/WeatherEntry/#tempsouth","title":"tempSouth","text":"<p>tempSouth: <code>number</code></p> <p>Defined in: components/Weather.tsx:9</p>"},{"location":"code/frontend/components/Weather/type-aliases/WeatherEntry/#timestamp","title":"timestamp","text":"<p>timestamp: <code>string</code></p> <p>Defined in: components/Weather.tsx:8</p>"},{"location":"code/frontend/main/","title":"Index","text":"<p>isopruefi-frontend v1.0.0</p> <p>isopruefi-frontend / main</p>"},{"location":"code/frontend/main/#main","title":"main","text":""},{"location":"code/frontend/pages/AdminPage/","title":"Index","text":"<p>isopruefi-frontend v1.0.0</p> <p>isopruefi-frontend / pages/AdminPage</p>"},{"location":"code/frontend/pages/AdminPage/#pagesadminpage","title":"pages/AdminPage","text":""},{"location":"code/frontend/pages/AdminPage/#functions","title":"Functions","text":"<ul> <li>default</li> </ul>"},{"location":"code/frontend/pages/AdminPage/functions/default/","title":"Default","text":"<p>isopruefi-frontend v1.0.0</p> <p>isopruefi-frontend / pages/AdminPage / default</p>"},{"location":"code/frontend/pages/AdminPage/functions/default/#function-default","title":"Function: default()","text":"<p>default(): <code>Element</code></p> <p>Defined in: pages/AdminPage.tsx:10</p>"},{"location":"code/frontend/pages/AdminPage/functions/default/#returns","title":"Returns","text":"<p><code>Element</code></p>"},{"location":"code/frontend/pages/UserPage/","title":"Index","text":"<p>isopruefi-frontend v1.0.0</p> <p>isopruefi-frontend / pages/UserPage</p>"},{"location":"code/frontend/pages/UserPage/#pagesuserpage","title":"pages/UserPage","text":""},{"location":"code/frontend/pages/UserPage/#functions","title":"Functions","text":"<ul> <li>default</li> </ul>"},{"location":"code/frontend/pages/UserPage/functions/default/","title":"Default","text":"<p>isopruefi-frontend v1.0.0</p> <p>isopruefi-frontend / pages/UserPage / default</p>"},{"location":"code/frontend/pages/UserPage/functions/default/#function-default","title":"Function: default()","text":"<p>default(): <code>Element</code></p> <p>Defined in: pages/UserPage.tsx:8</p>"},{"location":"code/frontend/pages/UserPage/functions/default/#returns","title":"Returns","text":"<p><code>Element</code></p>"},{"location":"code/frontend/pages/Welcome/","title":"Index","text":"<p>isopruefi-frontend v1.0.0</p> <p>isopruefi-frontend / pages/Welcome</p>"},{"location":"code/frontend/pages/Welcome/#pageswelcome","title":"pages/Welcome","text":""},{"location":"code/frontend/pages/Welcome/#functions","title":"Functions","text":"<ul> <li>default</li> </ul>"},{"location":"code/frontend/pages/Welcome/functions/default/","title":"Default","text":"<p>isopruefi-frontend v1.0.0</p> <p>isopruefi-frontend / pages/Welcome / default</p>"},{"location":"code/frontend/pages/Welcome/functions/default/#function-default","title":"Function: default()","text":"<p>default(): <code>Element</code></p> <p>Defined in: pages/Welcome.tsx:4</p>"},{"location":"code/frontend/pages/Welcome/functions/default/#returns","title":"Returns","text":"<p><code>Element</code></p>"},{"location":"code/frontend/utils/authApi/","title":"Index","text":"<p>isopruefi-frontend v1.0.0</p> <p>isopruefi-frontend / utils/authApi</p>"},{"location":"code/frontend/utils/authApi/#utilsauthapi","title":"utils/authApi","text":""},{"location":"code/frontend/utils/authApi/#type-aliases","title":"Type Aliases","text":"<ul> <li>LoginResult</li> </ul>"},{"location":"code/frontend/utils/authApi/#functions","title":"Functions","text":"<ul> <li>login</li> <li>refreshToken</li> <li>register</li> </ul>"},{"location":"code/frontend/utils/authApi/functions/login/","title":"Login","text":"<p>isopruefi-frontend v1.0.0</p> <p>isopruefi-frontend / utils/authApi / login</p>"},{"location":"code/frontend/utils/authApi/functions/login/#function-login","title":"Function: login()","text":"<p>login(<code>userName</code>, <code>password</code>): <code>Promise</code>\\&lt;<code>LoginResult</code>&gt;</p> <p>Defined in: utils/authApi.ts:29</p> <p>Login and get tokens (normalized to { token, refreshToken })</p>"},{"location":"code/frontend/utils/authApi/functions/login/#parameters","title":"Parameters","text":""},{"location":"code/frontend/utils/authApi/functions/login/#username","title":"userName","text":"<p><code>string</code></p>"},{"location":"code/frontend/utils/authApi/functions/login/#password","title":"password","text":"<p><code>string</code></p>"},{"location":"code/frontend/utils/authApi/functions/login/#returns","title":"Returns","text":"<p><code>Promise</code>\\&lt;<code>LoginResult</code>&gt;</p>"},{"location":"code/frontend/utils/authApi/functions/refreshToken/","title":"refreshToken","text":"<p>isopruefi-frontend v1.0.0</p> <p>isopruefi-frontend / utils/authApi / refreshToken</p>"},{"location":"code/frontend/utils/authApi/functions/refreshToken/#function-refreshtoken","title":"Function: refreshToken()","text":"<p>refreshToken(<code>token</code>, <code>refreshToken</code>): <code>Promise</code>\\&lt;<code>LoginResult</code>&gt;</p> <p>Defined in: utils/authApi.ts:41</p> <p>Refresh tokens (normalized to { token, refreshToken })</p>"},{"location":"code/frontend/utils/authApi/functions/refreshToken/#parameters","title":"Parameters","text":""},{"location":"code/frontend/utils/authApi/functions/refreshToken/#token","title":"token","text":"<p><code>string</code></p>"},{"location":"code/frontend/utils/authApi/functions/refreshToken/#refreshtoken","title":"refreshToken","text":"<p><code>string</code></p>"},{"location":"code/frontend/utils/authApi/functions/refreshToken/#returns","title":"Returns","text":"<p><code>Promise</code>\\&lt;<code>LoginResult</code>&gt;</p>"},{"location":"code/frontend/utils/authApi/functions/register/","title":"Register","text":"<p>isopruefi-frontend v1.0.0</p> <p>isopruefi-frontend / utils/authApi / register</p>"},{"location":"code/frontend/utils/authApi/functions/register/#function-register","title":"Function: register()","text":"<p>register(<code>userName</code>, <code>password</code>): <code>Promise</code>\\&lt;<code>void</code>&gt;</p> <p>Defined in: utils/authApi.ts:35</p> <p>Register a new user (server may return empty body; we swallow it)</p>"},{"location":"code/frontend/utils/authApi/functions/register/#parameters","title":"Parameters","text":""},{"location":"code/frontend/utils/authApi/functions/register/#username","title":"userName","text":"<p><code>string</code></p>"},{"location":"code/frontend/utils/authApi/functions/register/#password","title":"password","text":"<p><code>string</code></p>"},{"location":"code/frontend/utils/authApi/functions/register/#returns","title":"Returns","text":"<p><code>Promise</code>\\&lt;<code>void</code>&gt;</p>"},{"location":"code/frontend/utils/authApi/type-aliases/LoginResult/","title":"LoginResult","text":"<p>isopruefi-frontend v1.0.0</p> <p>isopruefi-frontend / utils/authApi / LoginResult</p>"},{"location":"code/frontend/utils/authApi/type-aliases/LoginResult/#type-alias-loginresult","title":"Type Alias: LoginResult","text":"<p>LoginResult = <code>object</code></p> <p>Defined in: utils/authApi.ts:4</p>"},{"location":"code/frontend/utils/authApi/type-aliases/LoginResult/#properties","title":"Properties","text":""},{"location":"code/frontend/utils/authApi/type-aliases/LoginResult/#refreshtoken","title":"refreshToken","text":"<p>refreshToken: <code>string</code></p> <p>Defined in: utils/authApi.ts:4</p>"},{"location":"code/frontend/utils/authApi/type-aliases/LoginResult/#token","title":"token","text":"<p>token: <code>string</code></p> <p>Defined in: utils/authApi.ts:4</p>"},{"location":"code/frontend/utils/config/","title":"Index","text":"<p>isopruefi-frontend v1.0.0</p> <p>isopruefi-frontend / utils/config</p>"},{"location":"code/frontend/utils/config/#utilsconfig","title":"utils/config","text":""},{"location":"code/frontend/utils/config/#functions","title":"Functions","text":"<ul> <li>apiBase</li> </ul>"},{"location":"code/frontend/utils/config/functions/apiBase/","title":"apiBase","text":"<p>isopruefi-frontend v1.0.0</p> <p>isopruefi-frontend / utils/config / apiBase</p>"},{"location":"code/frontend/utils/config/functions/apiBase/#function-apibase","title":"Function: apiBase()","text":"<p>apiBase(): <code>string</code></p> <p>Defined in: utils/config.ts:1</p>"},{"location":"code/frontend/utils/config/functions/apiBase/#returns","title":"Returns","text":"<p><code>string</code></p>"},{"location":"code/frontend/utils/tokenHelpers/","title":"Index","text":"<p>isopruefi-frontend v1.0.0</p> <p>isopruefi-frontend / utils/tokenHelpers</p>"},{"location":"code/frontend/utils/tokenHelpers/#utilstokenhelpers","title":"utils/tokenHelpers","text":""},{"location":"code/frontend/utils/tokenHelpers/#interfaces","title":"Interfaces","text":"<ul> <li>JwtPayload</li> </ul>"},{"location":"code/frontend/utils/tokenHelpers/#functions","title":"Functions","text":"<ul> <li>clearToken</li> <li>decodeToken</li> <li>getRefreshToken</li> <li>getToken</li> <li>getUserFromToken</li> <li>saveToken</li> </ul>"},{"location":"code/frontend/utils/tokenHelpers/functions/clearToken/","title":"clearToken","text":"<p>isopruefi-frontend v1.0.0</p> <p>isopruefi-frontend / utils/tokenHelpers / clearToken</p>"},{"location":"code/frontend/utils/tokenHelpers/functions/clearToken/#function-cleartoken","title":"Function: clearToken()","text":"<p>clearToken(): <code>void</code></p> <p>Defined in: utils/tokenHelpers.ts:37</p>"},{"location":"code/frontend/utils/tokenHelpers/functions/clearToken/#returns","title":"Returns","text":"<p><code>void</code></p>"},{"location":"code/frontend/utils/tokenHelpers/functions/decodeToken/","title":"decodeToken","text":"<p>isopruefi-frontend v1.0.0</p> <p>isopruefi-frontend / utils/tokenHelpers / decodeToken</p>"},{"location":"code/frontend/utils/tokenHelpers/functions/decodeToken/#function-decodetoken","title":"Function: decodeToken()","text":"<p>decodeToken(<code>token</code>): <code>null</code> | <code>JwtPayload</code></p> <p>Defined in: utils/tokenHelpers.ts:47</p>"},{"location":"code/frontend/utils/tokenHelpers/functions/decodeToken/#parameters","title":"Parameters","text":""},{"location":"code/frontend/utils/tokenHelpers/functions/decodeToken/#token","title":"token","text":"<p><code>string</code></p>"},{"location":"code/frontend/utils/tokenHelpers/functions/decodeToken/#returns","title":"Returns","text":"<p><code>null</code> | <code>JwtPayload</code></p>"},{"location":"code/frontend/utils/tokenHelpers/functions/getRefreshToken/","title":"getRefreshToken","text":"<p>isopruefi-frontend v1.0.0</p> <p>isopruefi-frontend / utils/tokenHelpers / getRefreshToken</p>"},{"location":"code/frontend/utils/tokenHelpers/functions/getRefreshToken/#function-getrefreshtoken","title":"Function: getRefreshToken()","text":"<p>getRefreshToken(): <code>null</code> | <code>string</code></p> <p>Defined in: utils/tokenHelpers.ts:29</p>"},{"location":"code/frontend/utils/tokenHelpers/functions/getRefreshToken/#returns","title":"Returns","text":"<p><code>null</code> | <code>string</code></p>"},{"location":"code/frontend/utils/tokenHelpers/functions/getToken/","title":"getToken","text":"<p>isopruefi-frontend v1.0.0</p> <p>isopruefi-frontend / utils/tokenHelpers / getToken</p>"},{"location":"code/frontend/utils/tokenHelpers/functions/getToken/#function-gettoken","title":"Function: getToken()","text":"<p>getToken(): <code>null</code> | <code>string</code></p> <p>Defined in: utils/tokenHelpers.ts:21</p>"},{"location":"code/frontend/utils/tokenHelpers/functions/getToken/#returns","title":"Returns","text":"<p><code>null</code> | <code>string</code></p>"},{"location":"code/frontend/utils/tokenHelpers/functions/getUserFromToken/","title":"getUserFromToken","text":"<p>isopruefi-frontend v1.0.0</p> <p>isopruefi-frontend / utils/tokenHelpers / getUserFromToken</p>"},{"location":"code/frontend/utils/tokenHelpers/functions/getUserFromToken/#function-getuserfromtoken","title":"Function: getUserFromToken()","text":"<p>getUserFromToken(<code>token</code>): <code>null</code> | <code>string</code></p> <p>Defined in: utils/tokenHelpers.ts:61</p>"},{"location":"code/frontend/utils/tokenHelpers/functions/getUserFromToken/#parameters","title":"Parameters","text":""},{"location":"code/frontend/utils/tokenHelpers/functions/getUserFromToken/#token","title":"token","text":"<p><code>string</code></p>"},{"location":"code/frontend/utils/tokenHelpers/functions/getUserFromToken/#returns","title":"Returns","text":"<p><code>null</code> | <code>string</code></p>"},{"location":"code/frontend/utils/tokenHelpers/functions/saveToken/","title":"saveToken","text":"<p>isopruefi-frontend v1.0.0</p> <p>isopruefi-frontend / utils/tokenHelpers / saveToken</p>"},{"location":"code/frontend/utils/tokenHelpers/functions/saveToken/#function-savetoken","title":"Function: saveToken()","text":"<p>saveToken(<code>token</code>, <code>refreshToken</code>): <code>void</code></p> <p>Defined in: utils/tokenHelpers.ts:12</p>"},{"location":"code/frontend/utils/tokenHelpers/functions/saveToken/#parameters","title":"Parameters","text":""},{"location":"code/frontend/utils/tokenHelpers/functions/saveToken/#token","title":"token","text":"<p><code>string</code></p>"},{"location":"code/frontend/utils/tokenHelpers/functions/saveToken/#refreshtoken","title":"refreshToken","text":"<p><code>string</code></p>"},{"location":"code/frontend/utils/tokenHelpers/functions/saveToken/#returns","title":"Returns","text":"<p><code>void</code></p>"},{"location":"code/frontend/utils/tokenHelpers/interfaces/JwtPayload/","title":"JwtPayload","text":"<p>isopruefi-frontend v1.0.0</p> <p>isopruefi-frontend / utils/tokenHelpers / JwtPayload</p>"},{"location":"code/frontend/utils/tokenHelpers/interfaces/JwtPayload/#interface-jwtpayload","title":"Interface: JwtPayload","text":"<p>Defined in: utils/tokenHelpers.ts:5</p>"},{"location":"code/frontend/utils/tokenHelpers/interfaces/JwtPayload/#indexable","title":"Indexable","text":"<p>[<code>key</code>: <code>string</code>]: <code>unknown</code></p>"},{"location":"code/frontend/utils/tokenHelpers/interfaces/JwtPayload/#properties","title":"Properties","text":""},{"location":"code/frontend/utils/tokenHelpers/interfaces/JwtPayload/#exp","title":"exp?","text":"<p><code>optional</code> exp: <code>number</code></p> <p>Defined in: utils/tokenHelpers.ts:7</p>"},{"location":"code/frontend/utils/tokenHelpers/interfaces/JwtPayload/#iat","title":"iat?","text":"<p><code>optional</code> iat: <code>number</code></p> <p>Defined in: utils/tokenHelpers.ts:8</p>"},{"location":"code/frontend/utils/tokenHelpers/interfaces/JwtPayload/#sub","title":"sub?","text":"<p><code>optional</code> sub: <code>string</code></p> <p>Defined in: utils/tokenHelpers.ts:6</p>"},{"location":"documentation/01_introduction_and_goals/","title":"Introduction and Goals","text":""},{"location":"documentation/01_introduction_and_goals/#aim-of-our-project-isoprufi","title":"Aim of our project IsoPr\u00fcfi:","text":"<p>Our project aims to test the effectiveness of building insulation based on outside temperature and present the data clearly using diagrams.</p>"},{"location":"documentation/01_introduction_and_goals/#features","title":"Features","text":""},{"location":"documentation/01_introduction_and_goals/#must-have","title":"Must-Have","text":"<ul> <li> <p>A website for a user-friendly presentation of temperature comparison diagrams</p> </li> <li> <p>Reliable sensors that measure interior temperature</p> </li> <li> <p>The ability to retrieve outside temperature data</p> </li> <li> <p>Clusterization of containers that we create ourselves</p> </li> </ul>"},{"location":"documentation/01_introduction_and_goals/#should-have","title":"Should-Have","text":"<ul> <li> <p>Sensors should be capable of storing temperature data for a period of one day, even in the absence of an internet connection or synchronization with the server</p> </li> <li> <p>A website should be used to offer configuration options</p> </li> </ul>"},{"location":"documentation/01_introduction_and_goals/#could-have","title":"Could-Have","text":"<ul> <li>Database clustering</li> </ul>"},{"location":"documentation/01_introduction_and_goals/#wont-have","title":"Won't Have","text":"<ul> <li> <p>The containers will only run on one server, however they are designed to function independently of each other</p> </li> <li> <p>Since this is a software project, we won't implement any resilience on the hardware side</p> </li> </ul>"},{"location":"documentation/01_introduction_and_goals/#_requirements_overview","title":"Requirements Overview","text":""},{"location":"documentation/01_introduction_and_goals/#functional-requirements","title":"Functional Requirements","text":"<ul> <li>The system must provide three data sources: two for indoor measurements and one for outdoor measurements</li> <li>Data should be updated every 60 seconds</li> <li>Each data point must include both temperature and timestamp</li> <li>Users must be able to view diagrams and evaluations of the collected data</li> <li>Users should have access to historical data to observe long-term trends</li> <li>The system must use containers for deployment</li> <li>In case of no network and or MQTT broker connection, the temperature data will be saved on an SD card for up to 24 h</li> </ul>"},{"location":"documentation/01_introduction_and_goals/#non-functional-requirements","title":"Non-Functional Requirements","text":"<ul> <li>The system should achieve an availability of 99.5%</li> <li>The system must remain reliable even if one container fails</li> <li>Data must be persistently stored in the database</li> <li>Automated unit tests must cover core functionalities, including correct data transmission, successful data storage, and simulation of failure scenarios</li> </ul>"},{"location":"documentation/01_introduction_and_goals/#_quality_goals","title":"Quality Goals","text":"Quality Goal Description Persistence Sensor readings must be logged centrally (database) and  locally (SD card), if offline -&gt; No data loss Data Integrity Data must include timestamps and sequance to prevent corruption or duplication Availability The system must remain partially operational during network outages and recover automatically"},{"location":"documentation/01_introduction_and_goals/#_stakeholders","title":"Stakeholders","text":"Role/Name Expectations Influence Developer Solution that is easy to maintain and fulfills all requirements for the project Quality of Code, Clean Architecture, Final product Supervisor Correct methodology, clear documentation and tracability of results Sets expectations and reviews the final product Coaches Clear documentation, preparation of meetings and clear presentation of the results for each meeting Review of the final product and support for the implementation User/Owner Want to reduce their heating costs through stable temperature measurements and correct assessment of the building's isolation Requires easy usability and trustworthy temperature data Systemadministrator Stable infrastructure, easy deployments and clear logs for easy maintenance Configuration of the system"},{"location":"documentation/02_quality_requirements/","title":"Quality Requirements","text":""},{"location":"documentation/02_quality_requirements/#1-persistence","title":"1. Persistence","text":"<p>Temperature data must be reliably and permanently stored in the database, even in the event of temporary system or connection failures.</p> <p>Measurable Criteria:</p> <ul> <li>Data Loss Rate: A maximum of 0.1% of all recorded measurements may be lost.</li> <li>Successful Write Operations: At least 99.9% of all database write operations must be completed without error.</li> <li>Time to Final Persistence: Temperature data must be permanently stored in the database within 5 seconds after being recorded under the condition that there is a working connection.  </li> <li>Fallback Storage: In case of missing connectivity, temperature data is written to the local SD card for up to 24h and synchronized once the connection is restored.</li> <li>Retry and Confirmation: Failed write operations to the central database are retried until confirmation is received.</li> </ul> <p>Testability:</p> <ul> <li>Disconnect the system from the internet in a controlled way and verify that data is buffered on the SD card and later persisted in the database.</li> <li>Simulate database outages to check retry logic and final persistence.</li> <li>Run long-term operation tests with daily storage cycles (e.g., multiple days) to verify absence of data loss.</li> </ul>"},{"location":"documentation/02_quality_requirements/#2-data-integrity","title":"2. Data Integrity","text":"<p>The recorded data must be correct, complete, and plausible to enable a reliable evaluation of the building's insulation.</p> <p>Measurable Criteria:</p> <ul> <li>Inconsistent Data Rate: Less than 0.05% of all records may be duplicates, incorrect, or implausible.</li> <li>Validation Error Rate: A maximum of 0.1% of data may be rejected by validation mechanisms.</li> <li> <p>Automatic plausibility checks:</p> <ul> <li>Range validation: Outdoor readings must stay between -30 \u00b0C and 45 \u00b0C, indoor readings between -10 \u00b0C and 35 \u00b0C. Values outside this range are logged as warnings.</li> <li>Jump detection: Sudden jumps &gt;10 \u00b0C between consecutive readings are flagged.</li> <li>Difference and mean analysis: Consecutive differences and moving averages are tracked to detect anomalies.</li> <li>Statistical window checks: Mean and standard deviation over a defined time window are used to identify abnormal fluctuations.</li> </ul> </li> </ul> <p>Testability:</p> <ul> <li>Inject out-of-range or implausible test data and verify that the system logs warnings or rejects values.</li> <li>Simulate sudden temperature jumps to ensure they are flagged.</li> <li>Compare sensor readings against expected ranges (indoor vs. outdoor).</li> </ul>"},{"location":"documentation/02_quality_requirements/#3-availability","title":"3. Availability","text":"<p>The system must remain functional even in the event of partial failures, so that users can always access the temperature data. Each critical service is deployed redundantly with at least two instances. If one instance fails, Traefik automatically routes traffic to the backup instance. All containers expose health checks, and stateless design ensures fast restart and recovery.</p> <p>The system is resilient against the following single-instance failures:</p> <ul> <li>Website (frontend): one instance down \u2192 second instance continues serving requests  </li> <li>REST API: one instance down \u2192 second instance handles API traffic  </li> <li>Weather Data Worker: one instance down \u2192 second instance continues scheduled tasks  </li> <li>MQTT Receiver: one instance down \u2192 second instance continues message processing  </li> </ul> <p>Measurable Criteria:</p> <ul> <li>System Availability: \u2265 99.5% overall operational time (software side)  </li> <li>Frontend Data Availability: \u2265 99.5% of the time, current or last available data is accessible via the UI  </li> <li> <p>Resilience Mechanisms: </p> <ul> <li>Redundant service instances per cluster (frontend, backend, workers)  </li> <li>Traefik load balancer distributes traffic and enables failover  </li> <li>Stateless service design for automatic restart or replacement  </li> <li>Health checks for all major containers  </li> <li>Local SD storage at Arduino nodes ensures sensor data buffering during backend or network outages  </li> </ul> </li> </ul> <p>Testability:</p> <ul> <li>Controlled shutdown of one instance per cluster (frontend, REST API, Weather Data Worker, MQTT Receiver) to verify automatic failover via Traefik  </li> <li>Disable one database or monitoring component to confirm health checks and recovery strategies  </li> <li>Simulate network outage between Arduino and backend to verify SD-card buffering and later synchronization  </li> <li>Long-term monitoring of uptime metrics to confirm compliance with \u2265 99.5% availability</li> </ul>"},{"location":"documentation/03_architecture_constraints_and_solution_strategy/","title":"Architecture Constraints and Solution Strategy","text":""},{"location":"documentation/03_architecture_constraints_and_solution_strategy/#architecture-contraints","title":"Architecture Contraints","text":"Category Constraint Technical The project will be hosted on a single server provided by Prof. H\u00e4nisch Technical Indoor temperature measurement hardware is supplied by the university Technical At least two data sources are required, with at least one being an Arduino device Technical The hardware and database are not specifically designed for high reliability Technical The final system must run in a clean environment with no prior setup required Organizational Weekly meetings with a coach are scheduled for project discussions Political The submission deadline is the 04.09.2025"},{"location":"documentation/03_architecture_constraints_and_solution_strategy/#system-decomposition-strategy","title":"System Decomposition Strategy","text":"<p>All services are containerized and grouped under a shared container orchestration layer (labelled \"Gruppen Container Sammlung\"). The system is fronted by a load balancer, ensuring scalability and high availability. MQTT acts as the bridge between the hardware (Arduino sensors) and the backend. Logging and observability are handled via the Loki stack, and external visibility is offered via a user-facing website and Grafana deshboards.</p> Old Architecture <p></p> <p></p>"},{"location":"documentation/03_architecture_constraints_and_solution_strategy/#organizational-development-process-decisions","title":"Organizational / Development Process Decisions","text":"<ul> <li>Source Control: GitHub with structured branches and CI pipelines</li> <li>Documentation: Based on arc42 template, managed in MkDocs</li> <li>Infrastructure as Code: All services defined in <code>docker-compose.yml</code> and version-controlled  </li> <li>Architecture Decisions: Documented using ADRs (Architecture Decision Records). The detailed technology choices are documented in 04 Architecture Decisions</li> </ul>"},{"location":"documentation/03_architecture_constraints_and_solution_strategy/#cross-cutting-concepts","title":"Cross-cutting Concepts","text":"<p>The following concepts ensure consistency and support the quality goals:</p>"},{"location":"documentation/03_architecture_constraints_and_solution_strategy/#domain-concepts","title":"Domain Concepts","text":"<ul> <li>\u0394T metric: Temperature difference between indoor and outdoor sensors as key indicator.  </li> <li>Sensor units: Each Arduino node has a unique ID and physical placement (e.g., north vs. south fa\u00e7ade).  </li> <li>Enriched records: Each reading contains value, timestamp, and source ID.  </li> </ul>"},{"location":"documentation/03_architecture_constraints_and_solution_strategy/#fault-tolerance","title":"Fault Tolerance","text":"<ul> <li>Redundant logging: Default to central database, with SD card fallback on network/MQTT outages (buffering up to 24h).  </li> <li>MQTT QoS (1): Guarantees at-least-once delivery.  </li> <li>Stateless services: Enable fast restart and failover without data inconsistencies.  </li> </ul>"},{"location":"documentation/03_architecture_constraints_and_solution_strategy/#architecture-and-design-patterns","title":"Architecture and Design Patterns","text":"<ul> <li>Message-driven architecture: Asynchronous data flow via MQTT.  </li> <li>Microservices: Independent services for ingestion, enrichment, API.  </li> <li>API gateway pattern: REST API shields internal complexity and exposes a single entry point.  </li> </ul>"},{"location":"documentation/03_architecture_constraints_and_solution_strategy/#development-concepts","title":"Development Concepts","text":"<ul> <li>Containerization: Consistent deployment via Docker.  </li> <li>Continuous Integration: Automated checks and tests before merges.  </li> <li>Infrastructure as Code: Networks and dependencies tracked in source control.  </li> </ul>"},{"location":"documentation/03_architecture_constraints_and_solution_strategy/#operational-concepts","title":"Operational Concepts","text":"<ul> <li>Observability: Logs via Loki, metrics via Prometheus, dashboards via Grafana.  </li> <li>Health monitoring: <code>/health</code> endpoints with automated restart on failure.  </li> <li>Scalability: Additional instances (frontend, MQTT receivers, workers) can be added behind Traefik.</li> </ul>"},{"location":"documentation/04_architecture_decisions/","title":"Architecture Decisions","text":""},{"location":"documentation/04_architecture_decisions/#adr-1-backend-technology-stack","title":"ADR 1: Backend Technology Stack","text":""},{"location":"documentation/04_architecture_decisions/#status","title":"Status:","text":"<p>Accepted (July 2025)</p>"},{"location":"documentation/04_architecture_decisions/#context","title":"Context:","text":"<p>System needs robust backend technology for REST API and worker services. Team has existing familiarity with C# development.</p>"},{"location":"documentation/04_architecture_decisions/#decision","title":"Decision:","text":"<p>Use .NET 9 with C# for all backend services (REST API, MQTT Receiver, Weather Worker).</p>"},{"location":"documentation/04_architecture_decisions/#alternatives-considered","title":"Alternatives Considered:","text":"Option Pros Cons Node.js Rapid iteration, huge ecosystem Different stack; weaker static typing by default; less team experience Go High perf/concurrency; small binaries Less team experience; different tooling Python Rich libs; fast prototyping Lower throughput; weaker typing by default"},{"location":"documentation/04_architecture_decisions/#consequences","title":"Consequences:","text":"<p>Positive:</p> <ul> <li>Team familiarity reduces development time</li> <li>Strong typing prevents runtime errors</li> <li>Excellent tooling and debugging support</li> <li>Modern async/await support for I/O operations</li> </ul> <p>Negative:</p> <ul> <li>Platform dependency (though mitigated by containers)</li> <li>Larger memory footprint than some alternatives</li> </ul> <p>Neutral:</p> <ul> <li>Containerization standardizes runtime</li> </ul>"},{"location":"documentation/04_architecture_decisions/#adr-2-microservices-architecture","title":"ADR 2: Microservices Architecture","text":""},{"location":"documentation/04_architecture_decisions/#status_1","title":"Status:","text":"<p>Accepted (July 2025)</p>"},{"location":"documentation/04_architecture_decisions/#context_1","title":"Context:","text":"<p>System has distinct responsibilities: API serving, MQTT message processing, and weather data fetching. Need modularity and independent scaling.</p>"},{"location":"documentation/04_architecture_decisions/#decision_1","title":"Decision:","text":"<p>Split backend into separate services: REST API, MQTT Receiver Worker, Weather Data Worker.</p>"},{"location":"documentation/04_architecture_decisions/#alternatives-considered_1","title":"Alternatives Considered:","text":"Option Pros Cons Monolith Simple deploy; easy local dev No independent scaling; fault blast radius Modular monolith Clear boundaries in one process Still one deploy unit; limited isolation Serverless No servers to manage; auto-scale Cold starts; platform coupling; ops visibility variance"},{"location":"documentation/04_architecture_decisions/#consequences_1","title":"Consequences:","text":"<p>Positive:</p> <ul> <li>Clear separation of concerns</li> <li>Independent scaling and deployment</li> <li>Fault isolation between services</li> </ul> <p>Negative:</p> <ul> <li>Increased deployment complexity</li> <li>Network communication overhead between services</li> </ul> <p>Neutral:</p> <ul> <li>Requires basic observability to manage complexity</li> </ul>"},{"location":"documentation/04_architecture_decisions/#adr-3-dual-database-strategy","title":"ADR 3: Dual Database Strategy","text":""},{"location":"documentation/04_architecture_decisions/#status_2","title":"Status:","text":"<p>Accepted (July 2025)</p>"},{"location":"documentation/04_architecture_decisions/#context_2","title":"Context:","text":"<p>System needs both structured application data (users, authentication) and time-series sensor data with different access patterns.</p>"},{"location":"documentation/04_architecture_decisions/#decision_2","title":"Decision:","text":"<p>Use PostgreSQL for application data and InfluxDB for time-series sensor data.</p>"},{"location":"documentation/04_architecture_decisions/#alternatives-considered_2","title":"Alternatives Considered:","text":"Option Pros Cons PostgreSQL + TimescaleDB One stack; SQL everywhere Ops complexity; perf tuning for time series needed InfluxDB only Optimized for time series Awkward relational modeling; joins missing SQLite + InfluxDB Lite Simple, lightweight Limited concurrency; feature gaps"},{"location":"documentation/04_architecture_decisions/#consequences_2","title":"Consequences:","text":"<p>Positive:</p> <ul> <li>PostgreSQL optimized for relational data and transactions</li> <li>InfluxDB optimized for time-series queries and compression</li> <li>Each database serves its specific use case efficiently</li> </ul> <p>Negative:</p> <ul> <li>Two databases to maintain and backup</li> </ul> <p>Neutral:</p> <ul> <li>Extract, Transform, Load (ETL) between stores is minimal</li> </ul>"},{"location":"documentation/04_architecture_decisions/#adr-4-observability-stack","title":"ADR 4: Observability Stack","text":""},{"location":"documentation/04_architecture_decisions/#status_3","title":"Status:","text":"<p>Accepted (July 2025)</p>"},{"location":"documentation/04_architecture_decisions/#context_3","title":"Context:","text":"<p>Distributed microservices architecture requires comprehensive monitoring, logging, and alerting capabilities.</p>"},{"location":"documentation/04_architecture_decisions/#decision_3","title":"Decision:","text":"<p>Loki for logs, Prometheus for metrics, Grafana for dashboards, Alloy as agent.</p>"},{"location":"documentation/04_architecture_decisions/#alternatives-considered_3","title":"Alternatives Considered:","text":"Option Pros Cons ELK (Elasticsearch, Kibana) Powerful search/analytics Heavier footprint; more ops effort OTel collector + vendor Standards-based; flexible pipelines Vendor lock-in and/or cost Managed cloud observability Minimal ops Ongoing costs; data residency limits"},{"location":"documentation/04_architecture_decisions/#consequences_3","title":"Consequences:","text":"<p>Positive:</p> <ul> <li>Complete observability into system health and performance</li> <li>Industry-standard tools with good integration</li> <li>Unified dashboard for all monitoring data</li> </ul> <p>Negative:</p> <ul> <li>Additional infrastructure to maintain</li> </ul> <p>Neutral:</p> <ul> <li>Can swap components later</li> </ul>"},{"location":"documentation/04_architecture_decisions/#adr-5-traefik-as-reverse-proxy","title":"ADR 5: Traefik as Reverse Proxy","text":""},{"location":"documentation/04_architecture_decisions/#status_4","title":"Status:","text":"<p>Accepted (July 2025)</p>"},{"location":"documentation/04_architecture_decisions/#context_4","title":"Context:","text":"<p>Multiple services need unified entry point, SSL termination, and service discovery in containerized environment.</p>"},{"location":"documentation/04_architecture_decisions/#decision_4","title":"Decision:","text":"<p>Use Traefik as reverse proxy with automatic service discovery and HTTPS termination.</p>"},{"location":"documentation/04_architecture_decisions/#alternatives-considered_4","title":"Alternatives Considered:","text":"Option Pros Cons Nginx Mature; high performance Manual routing/config; no auto-discovery Caddy Simple TLS; easy config Fewer discovery features HAProxy Very fast; robust LB features More manual config; fewer HTTP niceties"},{"location":"documentation/04_architecture_decisions/#consequences_4","title":"Consequences:","text":"<p>Positive:</p> <ul> <li>Automatic service discovery via Docker labels</li> <li>Built-in SSL certificate management</li> <li>Load balancing capabilities</li> </ul> <p>Negative:</p> <ul> <li>Single point of failure if not properly configured</li> <li>Additional configuration complexity</li> </ul> <p>Neutral:</p> <ul> <li>Replaceable by Nginx if needed</li> </ul>"},{"location":"documentation/04_architecture_decisions/#adr-6-jwt-authentication-strategy","title":"ADR 6: JWT Authentication Strategy","text":""},{"location":"documentation/04_architecture_decisions/#status_5","title":"Status:","text":"<p>Accepted (July 2025)</p>"},{"location":"documentation/04_architecture_decisions/#context_5","title":"Context:","text":"<p>REST API requires secure authentication mechanism. Need stateless authentication for microservices architecture.</p>"},{"location":"documentation/04_architecture_decisions/#decision_5","title":"Decision:","text":"<p>Implement JWT token-based authentication with Entity Framework for user management.</p>"},{"location":"documentation/04_architecture_decisions/#alternatives-considered_5","title":"Alternatives Considered:","text":"Option Pros Cons Server-side sessions Simple; revocation is trivial Stateful; sticky sessions; scale limits OAuth2/OIDC proxy Standards-based; SSO ready More moving parts; infra complexity API keys Simple; easy for machines Poor granularity; rotation burdens"},{"location":"documentation/04_architecture_decisions/#consequences_5","title":"Consequences:","text":"<p>Positive:</p> <ul> <li>Stateless authentication scales well</li> <li>Standard approach with good library support</li> <li>Tokens can carry user claims</li> </ul> <p>Negative:</p> <ul> <li>Token revocation complexity</li> <li>Requires secure token storage on client side</li> </ul> <p>Neutral: </p> <ul> <li>Token TTL balances risk and UX</li> </ul>"},{"location":"documentation/04_architecture_decisions/#adr-7-docker-compose-for-development-environment","title":"ADR 7: Docker Compose for Development Environment","text":""},{"location":"documentation/04_architecture_decisions/#status_6","title":"Status:","text":"<p>Accepted (July 2025)</p>"},{"location":"documentation/04_architecture_decisions/#context_6","title":"Context:","text":"<p>Complex multi-service architecture needs consistent development environment setup across team members.</p>"},{"location":"documentation/04_architecture_decisions/#decision_6","title":"Decision:","text":"<p>Use Docker Compose to orchestrate all services for local development.</p>"},{"location":"documentation/04_architecture_decisions/#alternatives-considered_6","title":"Alternatives Considered:","text":"Option Pros Cons Dev Containers Great DX; reproducible Editor-coupled; learning curve Kind/Minikube Closer to k8s Heavier locally; slower feedback Scripts/Makefiles Minimal tooling Fragile; drift across machines"},{"location":"documentation/04_architecture_decisions/#consequences_6","title":"Consequences:","text":"<p>Positive:</p> <ul> <li>Consistent development environment</li> <li>Easy service dependency management</li> <li>Simplified onboarding for new developers</li> </ul> <p>Negative:</p> <ul> <li>Requires Docker knowledge from all developers</li> <li>Resource intensive on development machines</li> </ul> <p>Neutral:</p> <ul> <li>Can migrate to Kubernetes later</li> </ul>"},{"location":"documentation/04_architecture_decisions/#adr-8-frontend","title":"ADR 8: Frontend","text":""},{"location":"documentation/04_architecture_decisions/#status_7","title":"Status:","text":"<p>Accepted (July 2025)</p>"},{"location":"documentation/04_architecture_decisions/#context_7","title":"Context:","text":"<p>System needs a frontend to display charts from measured/collected temperature data and to generate API docs with TypeDoc.</p>"},{"location":"documentation/04_architecture_decisions/#decision_7","title":"Decision:","text":"v0 <p>JavaScript React app via Docker. Reason: quick start.  Issue: Schema changes not caught at build time caused runtime UI errors (no static typing).</p> v1 <p>TypeScript React with Create React App (CRA). Reason: typing and better tooling. Issue: TypeDoc generation failed due to CRA/tooling version conflicts.</p> <p>React + TypeScript built with Vite for the frontend.</p>"},{"location":"documentation/04_architecture_decisions/#alternatives-considered_7","title":"Alternatives Considered:","text":"Option Pros Cons CRA (TS) Familiar, out-of-the-box setup Tooling conflicts with TypeDoc Next.js SSR/ISR, ecosystem Unneeded complexity for our use Custom Webpack Full control More maintenance"},{"location":"documentation/04_architecture_decisions/#consequences_7","title":"Consequences:","text":"<p>Positive:</p> <ul> <li>TypeDoc works</li> <li>faster startup</li> <li>lean tooling</li> </ul> <p>Negative:</p> <ul> <li>Some devs must learn Vite </li> </ul> <p>Neutral: </p> <ul> <li>No server-side rendering (SSR) required</li> </ul>"},{"location":"documentation/04_architecture_decisions/#adr-9-hardware-platform-decision-board-sensors","title":"ADR 9: Hardware Platform Decision (board, sensors)","text":""},{"location":"documentation/04_architecture_decisions/#status_8","title":"Status:","text":"<p>Accepted (July 2025)</p>"},{"location":"documentation/04_architecture_decisions/#context_8","title":"Context:","text":"<p>MKR1010 and ADT7410 were provided. Requirements: offline buffering, precise time, dual sites.</p>"},{"location":"documentation/04_architecture_decisions/#decision_8","title":"Decision:","text":"<p>Use Arduino MKR1010 with RTC DS3231 and SD card; deploy two identical units.</p>"},{"location":"documentation/04_architecture_decisions/#alternatives-considered_8","title":"Alternatives Considered:","text":"Option Pros Cons ESP32 boards Wi-Fi integrated; strong community Different toolchain; requalification Different sensors Potential accuracy/cost benefits Revalidation effort; integration risk Single hardware unit Simpler setup No north/south comparison; less robust"},{"location":"documentation/04_architecture_decisions/#consequences_8","title":"Consequences:","text":"<p>Positive:</p> <ul> <li>Local data persistence via SD card enables offline data storage for \u226424h</li> <li>Timestamp reliability through RTC with battery</li> <li>Compact hardware, low power, WiFi-ready (MKR1010)</li> </ul> <p>Negative:</p> <ul> <li>RTC and SD modules require additional wiring and SPI/I2C handling</li> <li>Time must be synchronized manually once (e.g., via compile-time setting or initial sync)</li> </ul> <p>Neutral:</p> <ul> <li>The Arduino MKR1010 was predefined, not evaluated</li> <li>Final visualization and backend will depend on further platform choices (e.g., MQTT, REST, database)</li> </ul>"},{"location":"documentation/04_architecture_decisions/#adr-10-arduino-development-environment-decision","title":"ADR 10: Arduino Development Environment Decision","text":""},{"location":"documentation/04_architecture_decisions/#status_9","title":"Status:","text":"<p>Accepted (July 2025)</p>"},{"location":"documentation/04_architecture_decisions/#context_9","title":"Context:","text":"<p>Arduino firmware needs modular builds and host-side unit tests.</p>"},{"location":"documentation/04_architecture_decisions/#decision_9","title":"Decision:","text":"<p>PlatformIO for builds; Unity with native target for tests.</p>"},{"location":"documentation/04_architecture_decisions/#alternatives-considered_9","title":"Alternatives Considered:","text":"Option Pros Cons Arduino IDE Easy; official No native tests; inflexible structure CMake toolchain Flexible; IDE-agnostic More setup; custom plumbing Ceedling Solid C test framework Extra integration effort"},{"location":"documentation/04_architecture_decisions/#consequences_9","title":"Consequences:","text":"<p>Positive:</p> <ul> <li>Reproducible builds and consistent project structure</li> <li>PC-native unit tests for business logic (Unity, native target)</li> <li>Seamless VS Code integration</li> <li>Use of modern C++ structure and dependency management</li> </ul> <p>Negative:</p> <ul> <li>Additional setup effort for non-Arduino users (e.g., Unity, test runners)</li> <li>Developers must learn PlatformIO\u2019s structure (src/lib/test)</li> </ul> <p>Neutral:</p> <ul> <li>The PlatformIO toolchain abstracts away the underlying GCC setup</li> <li>Unit tests cannot cover board-specific behavior (e.g., Wire, SD, RTC) directly without mocks</li> </ul>"},{"location":"documentation/04_architecture_decisions/#sources","title":"Sources","text":"<p>Documenting Architecture Decisions by Michael Nygard</p>"},{"location":"documentation/05_context_and_scope/","title":"Context and Scope","text":""},{"location":"documentation/05_context_and_scope/#_technical_context","title":"Technical Context","text":"<p>The IsoPr\u00fcfi system operates in a distributed container-based architecture hosted on the DHBW Server infrastructure. It integrates multiple services for data ingestion, processing, storage, and visualization.</p>"},{"location":"documentation/05_context_and_scope/#components-and-channels","title":"Components and Channels","text":"Component Communication Channel Description Arduino Wi-Fi / MQTT Publishes temperature readings to the MQTT broker MQTT Broker MQTT External broker for sensor communication traefik HTTP / HTTPS Reverse proxy and load balancer, entry point to the system isopruefi-backend HTTP (REST) Provides unified access to system data isopruefi-frontend HTTPS User interface for visualizing measurements influxdb TCP / SQL Time-series database for sensor data postgres TCP / SQL Relational database for application data loki gRPC / HTTP Collects and stores logs from all services prometheus HTTP Collects metrics from services grafana HTTP Dashboard for metrics and logs alloy HTTP / gRPC Integrates Loki and Prometheus for observability Weather API HTTPS Provides external weather data Client (Browser) HTTPS Interacts with the frontend <p>For a detailed list of all Docker containers, their images, addresses and networks, see the separate documentation page: Docker Development Environment</p>"},{"location":"documentation/05_context_and_scope/#mapping-io-to-channels","title":"Mapping I/O to Channels","text":"I/O Type Channel Source Destination Temperature Reading WiFi / MQTT Arduino MQTT Broker \u2192 MQTT Receiver Worker Weather Data Pull HTTPS (API) Weather API Service Weather Data Worker Web Page Access HTTPS Client Browser Traefik \u2192 React Frontend API Request HTTP / REST Frontend (via Traefik) REST API Service Data Storage SQL / TCP Backend Services PostgreSQL (app data), InfluxDB (time series) System Logs gRPC / HTTP All Services Alloy \u2192 Loki/Prometheus (visualized in Grafana)"},{"location":"documentation/05_context_and_scope/#technical-context-diagram","title":"Technical Context Diagram","text":""},{"location":"documentation/06_technical_risks/","title":"Risks and Technical Debts","text":""},{"location":"documentation/06_technical_risks/#1-description-of-the-processsystem","title":"1. Description of the Process/System","text":"<p>Overview of the Entire Product:</p> <ul> <li>Temperature Measurement and Transmission: <ul> <li>Involves temperature sensors, RTC modules, Arduino, SD module/card, and access to online weather data</li> </ul> </li> <li>Data Storage: <ul> <li>Utilizes a database for storing temperature data</li> </ul> </li> <li>Analysis/Evaluation: <ul> <li>Data is analyzed and evaluated, with results visualized via website or analytics tools</li> </ul> </li> </ul> <p>Components Involved:</p> <ul> <li>Temperature Measurement: <ul> <li>Temperature sensors, RTC modules, Arduino, SD module/card, online weather data availability</li> </ul> </li> <li>Temperature Transmission: <ul> <li>Network availability, server infrastructure</li> </ul> </li> <li>Data Storage: <ul> <li>Database systems</li> </ul> </li> <li>Visualization/Analysis: <ul> <li>Data availability, website, analytics platforms</li> </ul> </li> </ul> <p>Process Aspects:</p> <ul> <li>Data flow throughout the system</li> <li>Handling of failure and recovery scenarios</li> </ul>"},{"location":"documentation/06_technical_risks/#2-error-analysis","title":"2. Error Analysis","text":""},{"location":"documentation/06_technical_risks/#possible-errors","title":"Possible Errors","text":"<ul> <li>Incorrect or missing data</li> <li>Unavailability of services or functions (e.g., website, Grafana)</li> </ul>"},{"location":"documentation/06_technical_risks/#causes","title":"Causes","text":"<ul> <li>Compatibility issues due to software or hardware updates</li> <li>Security vulnerabilities</li> <li>Temperature Measurement:<ul> <li>Sensor errors (e.g., incorrect calibration, hardware malfunction, sensor failure, power supply issues, incorrect interval configuration)</li> <li>Misassignment of data (e.g., north/south confusion)</li> <li>Weather service outages</li> </ul> </li> <li>Data Transmission:<ul> <li>Network outages or connectivity issues</li> <li>Duplicate data transmission</li> </ul> </li> <li>Data Storage:<ul> <li>Incorrect or duplicate entries</li> <li>Database corruption or failure</li> </ul> </li> <li>Visualization/Analysis:<ul> <li>Website or Grafana unavailability</li> <li>Incorrect data presented for visualization</li> </ul> </li> </ul>"},{"location":"documentation/06_technical_risks/#impacts","title":"Impacts","text":"<ul> <li>Gaps in data analysis</li> <li>Misinterpretation or incorrect assessment of results</li> <li>Lack of long-term evaluation or comparison basis</li> <li>No or limited access to collected data</li> </ul>"},{"location":"documentation/06_technical_risks/#3-evaluation-of-errors-and-consequences","title":"3. Evaluation of Errors and Consequences","text":"Error Probability of Occurrence Severity Probability of Detection Risk Priority Number Sensor error 2-3 (unlikely) 8-9 (severe) 2-3 (inevitable detection) 32-81 Misassignment of data 3 (low) 6-7 (disturbance) 5-6 (only detected during targeted checks) 90-126 Weather service outage 1 (almost impossible) 8-9 (severe) 2-3 (inevitable detection) 16-27 Network outage 2 (unlikely) 8-9 (severe) 2-3 (inevitable detection) 31-45 Duplicate transmission 2 (unlikely) 2 (irrelevant) 5-6 (only detected during targeted checks) 20-24 Incorrect/missing entries 2-3 (unlikely) 8-9 (severe) 3-4 (high probability of detection) 48-108 Database corruption 2-3 (unlikely) 8-9 (severe) 3-4 (high probability of detection) 48-108 Website/Grafana malfunction 1 (almost impossible) 8-9 (severe) 2-3 (inevitable detection) 16-27 Power outage 3 (low) 8-9 (severe) 2-3 (inevitable detection) 48-81"},{"location":"documentation/06_technical_risks/#4-corrective-actions","title":"4. Corrective actions","text":"Error Risk Priority Number Mitigation Measure Sensor error 32-81 - Misassignment of data 90-126 Implement data validation and labeling checks Weather service outage 16-27 Use fallback data sources Network outage 31-45 Local storage of data on the Arduino Duplicate transmission 20-24 - Incorrect/missing entries 48-108 Input validation Database corruption 48-108 - Website/Grafana malfunction 16-27 Monitor uptime"},{"location":"documentation/06_technical_risks/#5-technical-debts","title":"5. Technical Debts","text":"Debt Impact Mitigation Priority Single-server deployment (no HA for DB/Traefik) Outage stops whole system; RTO/RPO undefined Define RTO/RPO; periodic restore drills; consider DB replication later High External single MQTT broker Ingestion is SPOF; no controlled failover Document broker SLA; add reconnect/backoff; plan broker redundancy/bridge later High SD-card buffering deduplication Risk of duplicate inserts on reconnect Idempotent writes (sensorId + timestamp + seq unique); DB upsert/unique index High Time synchronisation of sensors Clock drift \u2192 wrong \u0394T and ordering Regular NTP sync or backend time anchor; RTC drift check procedure High Missing/uneven health/readiness endpoints Load balancer may route to bad pods Standardize <code>/health</code> and <code>/ready</code>; Traefik forward-auth or ping checks Medium No alerting rules/SLOs Failures unnoticed; 99.5% not enforced Prometheus alert rules + Grafana alerts; SLO dashboards for availability Medium Secrets in env files Leakage risk; no rotation Use Docker secrets; rotate regularly; restrict file perms; avoid committing High TLS/auth on MQTT not specified Data spoofing/sniffing possible Enable TLS; client auth (user/pass or certs); topic ACLs High Schema/migration strategy Breaking changes risk data loss Versioned EF migrations; InfluxDB bucket retention + downsampling plan Medium Config scattering (topics, URLs) Drift and hidden coupling Central config per env; validated at startup; document defaults Medium Limited automated fault tests Availability regressions unnoticed CI: chaos/failure tests (DB down, broker down, network flap) Medium Weather API limits/caching Rate-limit failures; latency Add caching, retries with jitter, circuit breaker, fallback to last-known Low Backup without periodic restore test False sense of safety Quarterly restore test; document runbook; verify integrity checks High Logging/PII retention not defined Storage bloat; compliance risk Retention policy in Loki; scrub PII; log level guidelines Medium Rate limiting/DoS on API Resource exhaustion Traefik rate limits; API quotas; request size limits Medium Ownership/runbooks Slow incident response Define service owners; on-call matrix; SOPs for common incidents Low"},{"location":"documentation/06_technical_risks/#sources","title":"Sources","text":"<p>FMEA from the Orgahandbuch (Bundesministerium des Inneren)</p>"}]}